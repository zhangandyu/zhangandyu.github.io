<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>博客搭建及主题选择教程</title>
      <link href="/2021/11/14/2021-11-14-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA-%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2-1/"/>
      <url>/2021/11/14/2021-11-14-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA-%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2-1/</url>
      
        <content type="html"><![CDATA[<blockquote><p>正所谓前人栽树，后人乘凉。</p><p>感谢<a href="https://github.com/blinkfox/hexo-theme-matery/commits?author=blinkfox">blinkfox</a>提供的<a href="https://github.com/blinkfox/hexo-theme-matery.git">博客模板</a></p><p>为方便自己复习，教程教程转载于：[如何用Hexo+Github Pages快速搭建自己的博客]<a href="https://segmentfault.com/a/1190000023346633">https://segmentfault.com/a/1190000023346633</a></p></blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>从 搭建博客之初，自己在换电脑工作的过程中多次丢失博客内容，特此写文章记录下博客搭建及模板配置教程，方便自己复习。 </p><p>废话不多说了，开始进入正文。</p><h1 id="搭建博客"><a href="#搭建博客" class="headerlink" title="搭建博客"></a>搭建博客</h1><h2 id="初始化博客"><a href="#初始化博客" class="headerlink" title="初始化博客"></a>初始化博客</h2><p>首先自己选个地方，创建一个文件夹，来装我们博客的主体。<br>比如F:Projectsblog，文件夹下右键鼠标，点击Git Bash Here，进入Git命令框，执行以下操作。</p><p><img src="https://segmentfault.com/img/remote/1460000023346640/view"></p><p>这时候，再bush中输入</p><pre class="line-numbers language-none"><code class="language-none">hexo s<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://segmentfault.com/img/remote/1460000023346642"></p><p>直接网页搜索localhost:4000，你的博客雏形就出来了。这TM才叫功夫不负有心人。</p><p><img src="https://segmentfault.com/img/remote/1460000023346639/view"></p><h2 id="github的使用"><a href="#github的使用" class="headerlink" title="github的使用"></a>github的使用</h2><p><strong>敲黑板！！！重点来了！！！</strong><br>部署博客到GIthub - Pages，文章开头不是说了吗，如果你了解git那么，这部分，你可以略过，小白们还是来学下。</p><p>首先，注册个github账号吧，总不可能，用别人东西，还不给别人增加流量吧，拒绝白嫖，嘻嘻嘻，<strong>搭建好点赞你懂得</strong>！！！！</p><p>进入正题，其实不要把github想的很难，主要是英文把你难着了吧，哈哈哈，如果英语差可以谷歌浏览器翻译。</p><p>github其实就是个托管代码的，我们在这上面建库，然后把代码push上来，当然我们的博客不用push上来，后面讲解原理。</p><p><img src="https://segmentfault.com/img/remote/1460000023346643/view"></p><p id="Rename"></p><h2 id="配置SSH钥匙："><a href="#配置SSH钥匙：" class="headerlink" title="配置SSH钥匙："></a>配置SSH钥匙：</h2><p>SSH是个协议，就像HTTPS一样，保证安全的。<br>我们要把项目托管上去，github需要知道一把钥匙，这是公钥，我们自己有一把钥匙，叫私钥。<br>下面配置：<br><strong>1.创建钥匙</strong></p><pre class="line-numbers language-none"><code class="language-none"> $ ssh-keygen -t rsa -C "your_email@example.com"#这将按照你提供的邮箱地址，创建一对密钥Generating public/private rsa key pair.Enter file in which to save the key (/c/Users/you/.ssh/id_rsa): [Press enter]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>直接回车</p><pre class="line-numbers language-none"><code class="language-none">Enter passphrase (empty for no passphrase): [Type a passphrase]Enter same passphrase again: [Type passphrase again]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">Your identification has been saved in /c/Users/you/.ssh/id_rsa.Your public key has been saved in /c/Users/you/.ssh/id_rsa.pub.The key fingerprint is:01:0f:f4:3b:ca:85:d6:17:a1:7d:f0:68:9d:f0:a2:db your_email@example.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>然后钥匙的位置在用户文件下，叫做 <strong>.ssh</strong>,有个后缀是pub的，这个就是公钥，私钥是另一把，把公钥的内容复制下来，到github，点你的头像，有个setting，设置里去配置公钥。</p><p><img src="https://i.loli.net/2021/11/14/Ql45fsRmcpYiBGh.png" alt="image-20211114013115263.png"></p><p><img src="https://segmentfault.com/img/remote/1460000023346644/view"></p><p>好了配置好公钥了，下面检查一下</p><pre class="line-numbers language-none"><code class="language-none">$ ssh -T git@github.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">The authenticity of host 'github.com (207.97.227.239)' can't be established.RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.Are you sure you want to continue connecting (yes/no)?<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>输入yes就好了，下面就要设置用户信息了</p><pre class="line-numbers language-none"><code class="language-none">$ git config --global user.name "github名字"//用户名$ git config --global user.email  "github注册的邮箱"//填写自己的邮箱<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>下面点击的你新建的仓库，有个：</p><p><img src="https://segmentfault.com/img/remote/1460000023346645"></p><p>复制你的项目地址，到Hexo的配置文件里：就是</p><p><img src="https://segmentfault.com/img/remote/1460000023346646"></p><p>找到deploy（部署），开始只有个type的，加上我写的，只用改repository就行了，branch不用改：</p><pre class="line-numbers language-none"><code class="language-none">deploy:  type: git  repository: git@github.com:chenQD123/chenQD-blog.git  branch: master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>避坑1</strong>：repository必须按照上面方式来写，不能写成<code>https</code>开头，否则会需输入账号密码。</p><p><strong>避坑2</strong>：就是冒号后面有个空格，这是规定，如果没写空格，后面会部署失败，这就像python一样。</p></blockquote><p>然后就是美汁汁的部署你的博客到github上。</p><h2 id="部署："><a href="#部署：" class="headerlink" title="部署："></a>部署：</h2><pre class="line-numbers language-none"><code class="language-none">hexo ghexo d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>避坑</strong></p><pre class="line-numbers language-none"><code class="language-none">hexo d 出现以下错误：Branch 'master' set up to track remote branch 'main' from 'git@github.com:zhangandyu/zhangandyu.github.io.git'.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2021/11/14/BiSE8NTOjmpQoLg.png" alt="4.png"></p><p>则需要的以下两个设置之一进行修改：</p><blockquote><pre class="line-numbers language-none"><code class="language-none">deploy:type: gitrepository: git@github.com:chenQD123/chenQD-blog.gitbranch: master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></blockquote><blockquote><p>hexo 默认分支为master， github仓库默认分支为 main， 如果上传后博客不能成功刷新，则需要修改github仓库默认分支， 或branch参数修改为main。</p><p><img src="https://i.loli.net/2021/11/14/YOGI4sBUkATxwe3.png" alt="1234.png"></p></blockquote><h2 id="美化博客"><a href="#美化博客" class="headerlink" title="美化博客"></a>美化博客</h2><p>如果想使自己的博客好看点可以换主题：<br><a href="https://link.segmentfault.com/?enc=8eLR3W++7eNiMwHkYfsdUA==.Z47l5GuERtAlP/2xews5Q4aH8D9c530bdb2i6A1HlB0=">Hexo官网主题</a><br>建议换个，使用者多点的主题，这种的说明文档写的比较好，你开荒也会容易点。<br>美化博客你只需要点进官网开源的主题，然后找到这个主题的github链接，他会有详细教程的，从安装开始。</p><p>我用的主题为：[matery](<a href="https://github.com/blinkfox/hexo-theme-matery%EF%BC%8C">https://github.com/blinkfox/hexo-theme-matery，</a> 具体安装教程见：<a href="https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md">文档</a></p><h3 id="文章-Front-matter-介绍"><a href="#文章-Front-matter-介绍" class="headerlink" title="文章 Front-matter 介绍"></a>文章 Front-matter 介绍</h3><p><code>Front-matter</code> 选项中的所有内容均为<strong>非必填</strong>的。但我仍然建议至少填写 <code>title</code> 和 <code>date</code> 的值。</p><table><thead><tr><th>配置选项</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>title</td><td><code>Markdown</code> 的文件标题</td><td>文章标题，强烈建议填写此选项</td></tr><tr><td>date</td><td>文件创建时的日期时间</td><td>发布时间，强烈建议填写此选项，且最好保证全局唯一</td></tr><tr><td>author</td><td>根 <code>_config.yml</code> 中的 <code>author</code></td><td>文章作者</td></tr><tr><td>img</td><td><code>featureImages</code> 中的某个值</td><td>文章特征图，推荐使用图床(腾讯云、七牛云、又拍云等)来做图片的路径.如: <code>http://xxx.com/xxx.jpg</code></td></tr><tr><td>top</td><td><code>true</code></td><td>推荐文章（文章是否置顶），如果 <code>top</code> 值为 <code>true</code>，则会作为首页推荐文章</td></tr><tr><td>hide</td><td><code>false</code></td><td>隐藏文章，如果<code>hide</code>值为<code>true</code>，则文章不会在首页显示</td></tr><tr><td>cover</td><td><code>false</code></td><td><code>v1.0.2</code>版本新增，表示该文章是否需要加入到首页轮播封面中</td></tr><tr><td>coverImg</td><td>无</td><td><code>v1.0.2</code>版本新增，表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片</td></tr><tr><td>password</td><td>无</td><td>文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 <code>password</code> 的值，该值必须是用 <code>SHA256</code> 加密后的密码，防止被他人识破。前提是在主题的 <code>config.yml</code> 中激活了 <code>verifyPassword</code> 选项</td></tr><tr><td>toc</td><td><code>true</code></td><td>是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的 <code>config.yml</code> 中激活了 <code>toc</code> 选项</td></tr><tr><td>mathjax</td><td><code>false</code></td><td>是否开启数学公式支持 ，本文章是否开启 <code>mathjax</code>，且需要在主题的 <code>_config.yml</code> 文件中也需要开启才行</td></tr><tr><td>summary</td><td>无</td><td>文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</td></tr><tr><td>categories</td><td>无</td><td>文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类</td></tr><tr><td>tags</td><td>无</td><td>文章标签，一篇文章可以多个标签</td></tr><tr><td>keywords</td><td>文章标题</td><td>文章关键字，SEO 时需要</td></tr><tr><td>reprintPolicy</td><td>cc_by</td><td>文章转载规则， 可以是 cc_by, cc_by_nd, cc_by_sa, cc_by_nc, cc_by_nc_nd, cc_by_nc_sa, cc0, noreprint 或 pay 中的一个</td></tr></tbody></table><blockquote><p><strong>注意</strong>:</p><ol><li>如果 <code>img</code> 属性不填写的话，文章特色图会根据文章标题的 <code>hashcode</code> 的值取余，然后选取主题中对应的特色图片，从而达到让所有文章的特色图<strong>各有特色</strong>。</li><li><code>date</code> 的值尽量保证每篇文章是唯一的，因为本主题中 <code>Gitalk</code> 和 <code>Gitment</code> 识别 <code>id</code> 是通过 <code>date</code> 的值来作为唯一标识的。</li><li>如果要对文章设置阅读验证密码的功能，不仅要在 Front-matter 中设置采用了 SHA256 加密的 password 的值，还需要在主题的 <code>_config.yml</code> 中激活了配置。有些在线的 SHA256 加密的地址，可供你使用：<a href="http://tool.oschina.net/encrypt?type=2">开源中国在线工具</a>、<a href="http://encode.chahuo.com/">chahuo</a>、<a href="http://tool.chinaz.com/tools/hash.aspx">站长工具</a>。</li><li>您可以在文章md文件的 front-matter 中指定 reprintPolicy 来给单个文章配置转载规则</li></ol></blockquote><p>以下为文章的 <code>Front-matter</code> 示例。</p><h4 id="最简示例"><a href="#最简示例" class="headerlink" title="最简示例"></a>最简示例</h4><pre class="line-numbers language-none"><code class="language-none">---title: typora-vue-theme主题介绍date: 2018-09-07 09:25:00---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="最全示例"><a href="#最全示例" class="headerlink" title="最全示例"></a>最全示例</h4><pre class="line-numbers language-none"><code class="language-none">---title: typora-vue-theme主题介绍date: 2018-09-07 09:25:00author: 赵奇img: /source/images/xxx.jpgtop: truehide: falsecover: truecoverImg: /images/1.jpgpassword: 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92toc: falsemathjax: falsesummary: 这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要categories: Markdowntags:  - Typora  - Markdown---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="模板首页蒙板颜色修改"><a href="#模板首页蒙板颜色修改" class="headerlink" title="模板首页蒙板颜色修改"></a>模板首页蒙板颜色修改</h3><p>主题中默认首页展示有颜色蒙板</p><p><img src="https://i.loli.net/2021/11/14/nTKdRzUIuXqLpes.png" alt="5.png"></p><p>如果想取消可以对以下参数进行修改：</p><p>在主题文件的 <code>/source/css/matery.css</code> 文件中，搜索 <code>.bg-color</code> 来修改背景颜色：</p><pre class="line-numbers language-none"><code class="language-none">/* 整体背景颜色，包括导航、移动端的导航、页尾、标签页等的背景颜色. */.bg-color {    background-image: linear-gradient(to right, #4cbf30 0%, #0f9d58 100%);}@-webkit-keyframes rainbow {   /* 动态切换背景颜色. */}@keyframes rainbow {    /* 动态切换背景颜色. */}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将参数<code>0.75</code>、<code>0.6</code>改成<code>0</code></p><p><img src="https://i.loli.net/2021/11/14/eBuxZjVNmnLJ287.png" alt="6.png"></p><h3 id="代码高亮"><a href="#代码高亮" class="headerlink" title="代码高亮"></a>代码高亮</h3><p>从 Hexo5.0 版本开始自带了 <code>prismjs</code> 代码语法高亮的支持，本主题对此进行了改造支持。</p><p>如果你的博客中曾经安装过 <code>hexo-prism-plugin</code> 的插件，那么你须要执行 <code>npm uninstall hexo-prism-plugin</code> 来卸载掉它，否则生成的代码中会有 <code>{</code> 和 <code>}</code> 的转义字符。</p><p>然后，修改 Hexo 根目录下 <code>_config.yml</code> 文件中 <code>highlight.enable</code> 的值为 <code>false</code>，并将 <code>prismjs.enable</code> 的值设置为 <code>true</code>，主要配置如下：</p><pre class="line-numbers language-none"><code class="language-none">highlight:  enable: false  line_number: true  auto_detect: false  tab_replace: ''  wrap: true  hljs: falseprismjs:  enable: true  preprocess: true  line_number: true  tab_replace: ''<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>主题中默认的 <code>prismjs</code> 主题是 <code>Tomorrow Night</code>，如果你想定制自己的主题，可以前往 <a href="https://prismjs.com/download.html">prismjs 下载页面</a> 定制下载自己喜欢的主题 <code>css</code> 文件，然后将此 css 主题文件取名为 <code>prism.css</code>，替换掉 <code>hexo-theme-matery</code> 主题文件夹中的 <code>source/libs/prism/prism.css</code> 文件即可。</p><p>选择自己喜欢的主题并且下载：</p><p><img src="https://raw.githubusercontent.com/zhangandyu/picture/main/%E6%96%87%E7%AB%A0%E5%9B%BE%E7%89%87/3.png" alt="选择主题"></p><p><img src="https://raw.githubusercontent.com/zhangandyu/picture/main/%E6%96%87%E7%AB%A0%E5%9B%BE%E7%89%87/1.png" alt="下载css代码"></p><p>修改后的样式：</p><p><img src="https://raw.githubusercontent.com/zhangandyu/picture/main/%E6%96%87%E7%AB%A0%E5%9B%BE%E7%89%87/2.png" alt="修改后"></p><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p><a href="https://pixabay.com/zh/photos/">免费版权图片网站</a></p><p><a href="https://sm.ms/">图床</a></p>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>技能-Hive-SQL学习</title>
      <link href="/2020/06/02/2021-02-24-%E6%8A%80%E8%83%BD-Hive-SQL%E5%AD%A6%E4%B9%A0-3/"/>
      <url>/2020/06/02/2021-02-24-%E6%8A%80%E8%83%BD-Hive-SQL%E5%AD%A6%E4%B9%A0-3/</url>
      
        <content type="html"><![CDATA[<h2 id="SQL中的简单查询"><a href="#SQL中的简单查询" class="headerlink" title="SQL中的简单查询"></a>SQL中的简单查询</h2><p>表：score_student</p><table><thead><tr><th>id</th><th>name</th><th>class</th><th>age</th><th>score</th></tr></thead><tbody><tr><td>01</td><td>甲</td><td>一班</td><td>18</td><td>{“语文”:89,”数学”:98,”英语”:76}</td></tr><tr><td>02</td><td>乙</td><td>一班</td><td>19</td><td>{“语文”:96,”数学”:52,”英语”:78}</td></tr><tr><td>03</td><td>丙</td><td>二班</td><td>21</td><td>{“语文”:76,”数学”:69,”英语”:89}</td></tr><tr><td>04</td><td>丁</td><td>二班</td><td>23</td><td>{“语文”:92,”数学”:91,”英语”:96}</td></tr><tr><td>05</td><td>张</td><td>三班</td><td>25</td><td>{“语文”:85,”数学”:90,”英语”:73}</td></tr></tbody></table><ol><li><p>获取指定的数据</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span>     id<span class="token punctuation">,</span>    name<span class="token keyword">from</span>     score_student<span class="token keyword">where</span>     class <span class="token operator">=</span> <span class="token string">'一班'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>插入一列固定值</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span>    id<span class="token punctuation">,</span>    name<span class="token punctuation">,</span>    <span class="token string">"age &lt; 20 "</span> <span class="token keyword">as</span> label<span class="token keyword">from</span>     score_student<span class="token keyword">where</span>     age <span class="token operator">&lt;</span> <span class="token number">20</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>id</th><th>name</th><th>label</th></tr></thead><tbody><tr><td>01</td><td>甲</td><td>age &lt; 20</td></tr><tr><td>02</td><td>乙</td><td>age &lt; 20</td></tr></tbody></table></li><li><p>json解析-获取对应的value值</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span>    name<span class="token punctuation">,</span>    json_extract<span class="token punctuation">(</span>score<span class="token punctuation">,</span> <span class="token string">'$.英语'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token string">'英语成绩'</span><span class="token keyword">from</span>     score_student<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>name</th><th>英语成绩</th></tr></thead><tbody><tr><td>甲</td><td>76</td></tr><tr><td>乙</td><td>78</td></tr><tr><td>丙</td><td>89</td></tr><tr><td>张</td><td>73</td></tr></tbody></table></li><li><p>json解析-查看key值</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span>    name<span class="token punctuation">,</span>    json_keys<span class="token punctuation">(</span>score<span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token string">'科目'</span><span class="token keyword">from</span>     score_student<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>name</th><th>科目</th></tr></thead><tbody><tr><td>甲</td><td>[“语文”,”数学”,”英语”]</td></tr><tr><td>乙</td><td>[“语文”,”数学”,”英语”]</td></tr><tr><td>丙</td><td>[“语文”,”数学”,”英语”]</td></tr><tr><td>张</td><td>[“语文”,”数学”,”英语”]</td></tr></tbody></table></li></ol><ol start="5"><li>加入表中一列含有多个元素， 我们可以只查找此列的第一个元素<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span>    name<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token keyword">from</span>    employees<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ol><ol start="6"><li>可以使用 “点” 符号， 如：表的别名.列名<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span>      name<span class="token punctuation">,</span>     address<span class="token punctuation">.</span>city  <span class="token keyword">from</span>      employees<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><ol start="7"><li><p>使用正则表达式，可以选出所有列名以 price 作为前缀的列</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span>     <span class="token string">'price.*'</span>  <span class="token keyword">from</span>      stocks<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>where中关系型运算符优先级高到低为：not - and - or</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span>     <span class="token operator">*</span> <span class="token keyword">from</span>     employees <span class="token keyword">where</span>     country  <span class="token operator">not</span> <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token string">'us'</span><span class="token punctuation">,</span> <span class="token string">'china'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>where中用like、rlike进行数据筛选</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span>     name<span class="token punctuation">,</span>     address<span class="token punctuation">.</span>street <span class="token keyword">from</span>     employees <span class="token keyword">where</span>     address<span class="token punctuation">.</span>street <span class="token operator">rlike</span> <span class="token string">'.*(beijing|shanghai).*'</span>    <span class="token comment">--address.street like '%beijing%' </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><ul><li>like与rlike中常见的通配符</li></ul><table><thead><tr><th>like通配符</th><th>含义</th></tr></thead><tbody><tr><td>%</td><td>匹配0个或任意多个字符</td></tr><tr><td>_</td><td>匹配任意一个字符</td></tr><tr><td>escape</td><td>转义字符，可匹配%和_。如SELECT * FROM table_name WHERE column_name LIKE ‘/%/<em>%</em>‘ ESCAPE’/‘</td></tr><tr><td>——</td><td>————————————————————</td></tr><tr><td></td><td></td></tr></tbody></table><table><thead><tr><th>rlike通配符</th><th>含义</th></tr></thead><tbody><tr><td>.</td><td>匹配任意单个字 符</td></tr><tr><td>*</td><td>匹配0个或多个前一个得到的字符</td></tr><tr><td>[]</td><td>含有任意一个[]内的字符，[ab]*可匹配空串、a、b、或者由任意个a和b组成的字符串</td></tr><tr><td>^</td><td>匹配开头，如^s匹配以s或者S开头的字符串</td></tr><tr><td>$</td><td>匹配结尾，如s$匹配以s结尾的字符串</td></tr><tr><td>{n}</td><td>匹配前一个字符反复n次</td></tr></tbody></table><ol start="10"><li>对数据进行排序——order by<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span>    <span class="token operator">*</span><span class="token keyword">from</span>     a <span class="token keyword">order</span> <span class="token keyword">by</span>     code <span class="token keyword">asc</span><span class="token punctuation">,</span> name <span class="token keyword">desc</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><ul><li>排序说明</li></ul><table><thead><tr><th>字段</th><th>说明</th></tr></thead><tbody><tr><td>order by a,b</td><td>a和b都是升序</td></tr><tr><td>order by a,b desc</td><td>a升序，b降序</td></tr><tr><td>order by a desc，b</td><td>a降序，b升序</td></tr><tr><td>order by a desc，b desc</td><td>a，b都是降序</td></tr></tbody></table><ol start="11"><li><p>对数据进行限制-limit</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span>    account<span class="token keyword">from</span>     employees<span class="token keyword">limit</span> <span class="token number">10</span> <span class="token comment">---使用limit语句限制返回的行数，只显示 10 行</span><span class="token keyword">limit</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token comment">--获取第2行（不包含第2行），以后的3行数据</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>注释</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token operator">/</span><span class="token operator">*</span>大段文字注释<span class="token operator">/</span><span class="token operator">*</span><span class="token keyword">select</span>    account<span class="token keyword">from</span>     employees<span class="token keyword">limit</span> <span class="token number">10</span> <span class="token comment">---使用limit语句限制返回的行数，只显示 10 行， 对某一行进行注释</span><span class="token keyword">limit</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token comment">--获取第2行（不包含第2行），以后的3行数据</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="数据预处理"><a href="#数据预处理" class="headerlink" title="数据预处理"></a>数据预处理</h2><ol><li>排除缺失值<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span>     <span class="token operator">*</span><span class="token keyword">from</span>     score_student<span class="token keyword">where</span>     score <span class="token operator">!=</span> <span class="token string">""</span> <span class="token operator">or</span>     score <span class="token operator">is</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token operator">or</span>     score <span class="token operator">!=</span> <span class="token string">" "</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>缺失值填充<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span>    id<span class="token punctuation">,</span>    <span class="token keyword">coalesce</span><span class="token punctuation">(</span>score<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment">--当score为null值时，将返回1，否则返回score真实值</span>    <span class="token keyword">coalesce</span><span class="token punctuation">(</span> name<span class="token punctuation">,</span> score<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">--当name不为null，那么无论score是否为null，都返回name的真实值。当name为null,而score不为null时，返回score的真实值。当name和score都为null时，返回1</span><span class="token keyword">from</span>     score_student<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol> <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span>    id<span class="token punctuation">,</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>score<span class="token operator">!=</span> <span class="token string">""</span><span class="token punctuation">,</span> score<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">from</span>     score_student<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>重复值处理<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span>      <span class="token keyword">distinct</span> user_account<span class="token punctuation">,</span><span class="token comment">--如果用 distinct, select 后面必须直接跟 distinct</span>    province <span class="token keyword">from</span>        computer<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol> <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span>    user_account<span class="token punctuation">,</span>    province<span class="token keyword">from</span>    computer<span class="token keyword">group</span> <span class="token keyword">by</span>     user_account<span class="token punctuation">,</span>    province<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>数据格式转换-cast与convert函数<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span>    age<span class="token punctuation">,</span>    cast<span class="token punctuation">(</span>age <span class="token keyword">as</span> <span class="token keyword">decimal</span><span class="token punctuation">)</span> <span class="token keyword">as</span> decimal_age<span class="token punctuation">,</span>    <span class="token keyword">convert</span><span class="token punctuation">(</span>age <span class="token keyword">as</span> <span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token keyword">as</span> char_age<span class="token keyword">from</span>     score<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><ul><li>数据类型</li></ul><table><thead><tr><th>类型</th><th>符号</th></tr></thead><tbody><tr><td>浮点型</td><td>decimal</td></tr><tr><td>整形</td><td>signed</td></tr><tr><td>字符型</td><td>char</td></tr><tr><td>二进制</td><td>binary</td></tr><tr><td>日期</td><td>date</td></tr><tr><td>时间</td><td>time</td></tr><tr><td>日期时间</td><td>datetime</td></tr></tbody></table><h2 id="数据运算"><a href="#数据运算" class="headerlink" title="数据运算"></a>数据运算</h2><ol><li>算数运算<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span>    id<span class="token punctuation">,</span>    <span class="token punctuation">(</span>score_a <span class="token operator">+</span> score_b<span class="token punctuation">)</span> <span class="token keyword">as</span> all_score<span class="token keyword">from</span>     score_student<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><ul><li>算数运算符</li></ul><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td>+</td><td>加法</td></tr><tr><td>-</td><td>减法</td></tr><tr><td>*</td><td>乘法</td></tr><tr><td>/</td><td>除法</td></tr><tr><td>% , mod</td><td>取余</td></tr><tr><td>div</td><td>整除</td></tr></tbody></table><ol start="2"><li>比较运算<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span>    id<span class="token punctuation">,</span>    score_a<span class="token punctuation">,</span>    score_b<span class="token punctuation">,</span>    score_a <span class="token operator">&gt;</span> score_b <span class="token keyword">as</span> <span class="token string">'大于'</span> <span class="token comment">--返回1或0</span><span class="token keyword">from</span>    score_student<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><ul><li>比较运算符</li></ul><table><thead><tr><th><strong>操作符</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>=</td><td>等于</td></tr><tr><td>&lt;&gt; , !=</td><td>不等于</td></tr><tr><td>&lt;</td><td>小于</td></tr><tr><td>&gt;</td><td>大于</td></tr><tr><td>&lt;=</td><td>小于或等于</td></tr><tr><td>&gt;=</td><td>大于或等于</td></tr><tr><td>[not] between</td><td>介于</td></tr><tr><td>in</td><td>包含</td></tr><tr><td>is [not] null</td><td>空值</td></tr></tbody></table><ol start="3"><li>逻辑运算<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span>     id<span class="token punctuation">,</span>    score_a<span class="token punctuation">,</span>    score_b<span class="token punctuation">,</span>    <span class="token punctuation">(</span><span class="token punctuation">(</span>score_a <span class="token operator">&gt;</span><span class="token number">85</span><span class="token punctuation">)</span> <span class="token operator">and</span> <span class="token punctuation">(</span> score_b <span class="token operator">&gt;</span> <span class="token number">85</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token string">"双优"</span><span class="token punctuation">,</span>    <span class="token punctuation">(</span><span class="token punctuation">(</span>score_a <span class="token operator">&gt;</span><span class="token number">85</span><span class="token punctuation">)</span> <span class="token operator">or</span> <span class="token punctuation">(</span> score_b <span class="token operator">&gt;</span> <span class="token number">85</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token string">"单优"</span><span class="token keyword">from</span>     score_student<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><ul><li>逻辑运算符</li></ul><table><thead><tr><th><strong>逻辑符</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>and</td><td>和</td></tr><tr><td>or</td><td>或</td></tr><tr><td>not</td><td>非</td></tr></tbody></table><ol start="4"><li>数学运算<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span>     id<span class="token punctuation">,</span>    score_a<span class="token punctuation">,</span>    score_b<span class="token punctuation">,</span>    abs<span class="token punctuation">(</span>score_a <span class="token operator">-</span>core_b <span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token string">"绝对差值"</span><span class="token punctuation">,</span>    sign<span class="token punctuation">(</span>score_a <span class="token operator">-</span>core_b <span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token string">"正负"</span><span class="token keyword">from</span>     score_student<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><ul><li>数学运算符</li></ul><table><thead><tr><th><strong>数学函数</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>abs(x)</td><td>返回x的绝对值</td></tr><tr><td>ceil(x)</td><td>返回不小于x的最小整数值</td></tr><tr><td>floor(x)</td><td>返回不大于x的最大整数值</td></tr><tr><td>rand()</td><td>返回一个随机浮点值</td></tr><tr><td>round(d,x)</td><td>返回d精确度的x</td></tr><tr><td>sign(x)</td><td>返回x的正负，如果为正返回1，为负返回-1</td></tr></tbody></table><ol start="5"><li>聚合运算<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span>     <span class="token function">sum</span><span class="token punctuation">(</span>score_a<span class="token punctuation">)</span> <span class="token keyword">as</span> a_sum<span class="token punctuation">,</span>    <span class="token function">sum</span><span class="token punctuation">(</span>score_b<span class="token punctuation">)</span> <span class="token keyword">as</span> b_sum<span class="token punctuation">,</span>    <span class="token function">sum</span><span class="token punctuation">(</span>a_sum<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">sum</span><span class="token punctuation">(</span>b_sum<span class="token punctuation">)</span> <span class="token keyword">as</span> a_b_sum<span class="token keyword">from</span>     score_student<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><ul><li>聚合函数</li></ul><table><thead><tr><th>聚合函数</th><th>定义</th></tr></thead><tbody><tr><td>count()</td><td>个数统计函数</td></tr><tr><td>sum()</td><td>求和</td></tr><tr><td>avg()</td><td>平均值</td></tr><tr><td>min()</td><td>最小值</td></tr><tr><td>max()</td><td>最大值</td></tr><tr><td>corr(A, B)</td><td>相关系数</td></tr><tr><td>var_pop()</td><td>总体方差</td></tr><tr><td>var_samp()</td><td>样本方差</td></tr><tr><td>std()</td><td>总体标准差</td></tr><tr><td>stddev_samp</td><td>样本标准差</td></tr></tbody></table><ul><li>count(1)、count(*)、count(column) 之间的区别<blockquote><p>执行范围上： count(*) 和 count (1)  都包含了 对NULL的统计。 count(列名)统计时不包含NULL值。<br>执行速度上： 列名为主键时， count(列名) 最快。  当无主键时， count(1) 最快。  当表只有一个字段，count(*) 最快。</p></blockquote></li></ul><h2 id="字符串处理"><a href="#字符串处理" class="headerlink" title="字符串处理"></a>字符串处理</h2><ol><li>字符串函数</li></ol><table><thead><tr><th>函数名</th><th>定义</th></tr></thead><tbody><tr><td>concat(str1, str2,..strn)</td><td>将str1,str2,…strn合并成一个字符串,只要其中一个是NUll，则返回NUll</td></tr><tr><td>concat_ws(s,str1, str2,…strn)</td><td>将str1,str2,…strn用连接符s合并成一个字符串,只能接收 string或string类型的数组，只要有一个字符串</td></tr><tr><td>collect_set(col)</td><td>将某字段的值进行去重汇总，产生array类型字段</td></tr><tr><td>collect_list(col)</td><td>将某字段的值进行汇总不去重，产生array类型字段</td></tr><tr><td>explode(col)</td><td>将hive列中复杂的array或者map结构拆分成多行</td></tr><tr><td>substr / substring(str,m,n)</td><td>获取字符串str从m位置开始，长度为n的字符串</td></tr><tr><td>split(str, s)</td><td>str字符串通过s进行分割</td></tr><tr><td>substring_index(str, s,n)</td><td>str字符串通过第n个s进行分割</td></tr><tr><td>replace(str,a,b)</td><td>将str字符串中的a替换成b</td></tr><tr><td>left(str, n)</td><td>取str字符串中最左边的n个字符</td></tr><tr><td>right(str,n)</td><td>取str字符串中最右边的n个字符</td></tr><tr><td>ltrim(str)</td><td>去除str字符串左边的空格</td></tr><tr><td>rtrim(str)</td><td>去除str字符串右边的空格</td></tr><tr><td><strong>trim(str)</strong></td><td>去除str字符串开头和结尾的空格</td></tr><tr><td>length / char_length(str)</td><td>返回str字符串的字符长度，一个汉字算三个字符</td></tr><tr><td>repeat(str,n)</td><td>将str字符串重复n遍</td></tr><tr><td>lower()</td><td>将字串转化为小写</td></tr><tr><td>upper()</td><td>将字符转化为大写</td></tr><tr><td>lpad(str1，n，str2)</td><td>在str1字符串的左边第n个位置，添加str2</td></tr><tr><td>rpad(str1，n，str2)</td><td>在str1字符串的右边第n个位置，添加str2</td></tr><tr><td>instr (A ,B )</td><td>返回字符B首次在A中出现的位置,不存在返回0</td></tr></tbody></table><ol start="2"><li><p><strong>substr函数与 substring函数用法</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">substr<span class="token punctuation">(</span>string<span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span>: 从右第<span class="token number">4</span>位置截取到最后，结果为：ingsubstring<span class="token punctuation">(</span>string<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>:取左边第<span class="token number">1</span>位置起，<span class="token number">3</span>字长的字符串，结果为：strsubstring<span class="token punctuation">(</span>string<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>:取右边第<span class="token number">1</span>位置起，<span class="token number">3</span>字长的字符串<span class="token punctuation">,</span>右边第一位置往右不够<span class="token number">3</span>字长，结果为：gsubstring<span class="token punctuation">(</span>string<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>:取右边第<span class="token number">1</span>位置起，<span class="token number">3</span>字长的字符串，结果为：ing<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>substring_index函数</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">substring_index<span class="token punctuation">(</span><span class="token string">'15,151,152,16'</span><span class="token punctuation">,</span><span class="token string">','</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>：取第一个逗号前面的字符串，结果为：<span class="token number">15</span>substring_index<span class="token punctuation">(</span><span class="token string">'15,151,152,16'</span><span class="token punctuation">,</span><span class="token string">','</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>：取第二个逗号前面部分，结果为：<span class="token number">15</span><span class="token punctuation">,</span><span class="token number">151</span>substring_index<span class="token punctuation">(</span><span class="token string">'15,151,152,16'</span><span class="token punctuation">,</span><span class="token string">','</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>：取目标字符串中最后一个含 “<span class="token punctuation">,</span>” 位子的后的部分，结果为：<span class="token number">16</span>substring_index<span class="token punctuation">(</span>substring_index<span class="token punctuation">(</span><span class="token string">'15,151,152,16'</span><span class="token punctuation">,</span><span class="token string">','</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">','</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>:取第二个逗号前面部分<span class="token punctuation">,</span>然后最后逗号的前面部分，结果为：<span class="token number">151</span>substring_index<span class="token punctuation">(</span>substring_index<span class="token punctuation">(</span><span class="token string">'15,151,152,16'</span><span class="token punctuation">,</span><span class="token string">','</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">','</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>：取倒数第二个逗号后面部分字符串，再去这部分里第一个都号前的部分，结果为：<span class="token number">152</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>split函数</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">split<span class="token punctuation">(</span><span class="token string">'a,b,c,d'</span><span class="token punctuation">,</span><span class="token string">','</span><span class="token punctuation">)</span>:根据逗号进行分割，结果为： <span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">,</span><span class="token string">"c"</span><span class="token punctuation">,</span><span class="token string">"d"</span><span class="token punctuation">]</span>split<span class="token punctuation">(</span><span class="token string">'a,b,c,d'</span><span class="token punctuation">,</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>： 取结果数组中的某一项，结果为： asplit<span class="token punctuation">(</span><span class="token string">'192.168.0.1'</span><span class="token punctuation">,</span><span class="token string">'\\.'</span><span class="token punctuation">)</span>： 点号这种特殊字符的时候需要做特殊的处理，结果为：<span class="token punctuation">[</span><span class="token string">"192"</span><span class="token punctuation">,</span><span class="token string">"168"</span><span class="token punctuation">,</span><span class="token string">"0"</span><span class="token punctuation">,</span><span class="token string">"1"</span><span class="token punctuation">]</span><span class="token string">"....  split('192.168.0.1','\\\\.') ... "</span>: split包含在 <span class="token string">""</span> 之中时 需要加<span class="token number">4</span>个\<span class="token punctuation">,</span>不然得到的值是<span class="token boolean">null</span><span class="token punctuation">,</span>同样的 <span class="token operator">|</span> 等特殊符号也需要做类似处理。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ol><ul><li>例如： 将一些字段拆解出来进行使用<blockquote><p>比如：Syjh-sjsy-zygn-3_1字段，我们只需要Syjh-sjsy-zygn位置的所有按钮。</p></blockquote><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span>     substring_index<span class="token punctuation">(</span>nbtn_position<span class="token punctuation">,</span> <span class="token string">'-'</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token keyword">as</span> position<span class="token punctuation">,</span>    <span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">distinct</span> user_account<span class="token punctuation">)</span> <span class="token keyword">as</span> uv <span class="token keyword">from</span>     apache_computer_view<span class="token keyword">where</span>     hit_date <span class="token operator">=</span> <span class="token string">'2020-03-01'</span>    <span class="token operator">and</span>     nbtn_position <span class="token operator">like</span> <span class="token string">'%Syjh%'</span><span class="token keyword">group</span> <span class="token keyword">by</span>     substring_index<span class="token punctuation">(</span>nbtn_position<span class="token punctuation">,</span> <span class="token string">'-'</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><ol start="5"><li><strong>lpad(str1,len,str2)</strong> <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> lpad<span class="token punctuation">(</span>nbtn_name<span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token string">'xo'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token string">'左填充'</span><span class="token punctuation">,</span>rpad<span class="token punctuation">(</span>nbtn_name<span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token string">'xo'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token string">'右填充'</span><span class="token punctuation">,</span>nbtn_name <span class="token keyword">as</span> <span class="token string">'不填充'</span><span class="token keyword">from</span> table1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>左填充</th><th>右填充</th><th>不填充</th></tr></thead><tbody><tr><td>xoxo张晓东</td><td>张晓东xoxo</td><td>张晓东</td></tr></tbody></table></li></ol><ol start="6"><li><strong>concat_ws函数</strong> <blockquote><p>把下表中星座和血型一样的人归类到一起：</p></blockquote></li></ol><table><thead><tr><th>name</th><th>contellation</th><th>blood_type</th></tr></thead><tbody><tr><td>孙悟空</td><td>白羊座</td><td>A</td></tr><tr><td>猪八戒</td><td>射手座</td><td>A</td></tr><tr><td>宋宋</td><td>白羊座</td><td>B</td></tr><tr><td>唐僧</td><td>白羊座</td><td>A</td></tr><tr><td>张帅</td><td>射手座</td><td>A</td></tr></tbody></table> <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> con_blood<span class="token punctuation">,</span>concat_ws <span class="token punctuation">(</span>"\"<span class="token punctuation">,</span> collect_set<span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> concat_ws<span class="token punctuation">(</span> <span class="token string">','</span><span class="token punctuation">,</span> contellation<span class="token punctuation">,</span> blood_type<span class="token punctuation">)</span> <span class="token keyword">as</span> con_blood<span class="token punctuation">,</span>name<span class="token keyword">from</span> table1<span class="token punctuation">)</span> <span class="token keyword">group</span> <span class="token keyword">by</span> con_blood<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>得到结果如下：</p></blockquote><table><thead><tr><th>con_blod</th><th>name</th></tr></thead><tbody><tr><td>射手座,A</td><td>猪八戒\张帅</td></tr><tr><td>白羊座，A</td><td>孙悟空\唐僧</td></tr><tr><td>白羊座，B</td><td>宋</td></tr></tbody></table><ol start="7"><li><strong>collect_set函数</strong> </li></ol><blockquote><p>求将每个省的城市列出来<br> </p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> province<span class="token punctuation">,</span> collect_set<span class="token punctuation">(</span>city<span class="token punctuation">)</span> <span class="token keyword">from</span> android <span class="token keyword">where</span>  dt <span class="token operator">=</span> <span class="token string">'2020-05-01'</span> <span class="token operator">and</span> city <span class="token operator">is</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">group</span> <span class="token keyword">by</span> province <span class="token comment">---辽宁省  ["营口市","大连","大连市",.....,"朝阳"]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>求出一个月内活跃天数大于20天的用户数<br> <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">distinct</span> user_account<span class="token punctuation">)</span> <span class="token keyword">as</span> uv <span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token keyword">select</span> user_account<span class="token punctuation">,</span>collect_set<span class="token punctuation">(</span>hit_date<span class="token punctuation">)</span>  <span class="token keyword">as</span> dt<span class="token keyword">from</span> an<span class="token keyword">where</span> hit_date <span class="token operator">between</span> <span class="token string">'2020-05-01'</span> <span class="token operator">and</span> <span class="token string">'2020-05-31'</span><span class="token keyword">group</span> <span class="token keyword">by</span> user_account<span class="token keyword">having</span>size<span class="token punctuation">(</span>dt<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">20</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p></p></blockquote><ol start="8"><li><strong>explode函数</strong>  </li></ol><ul><li><p>函数说明</p><blockquote><ul><li>explode(col): 将hive列中复杂的array或者map结构拆分成多行</li><li><strong>lateral view</strong> 用法： lateral view UDTF(expression) adtable  as a1  说明： 用户和split,explode 等UDTF一起使用，能够将一列数据拆分成多行数据， 在此基础上可以对拆分的数据进行聚合计算. 形成一个新的表，并对原来的表进行侧写</li></ul></blockquote></li><li><p>需求1：</p><blockquote><p>将如下表进行拆分</p></blockquote></li></ul><table><thead><tr><th>movie</th><th>category</th></tr></thead><tbody><tr><td>《疑犯追踪》</td><td>悬疑,动作,科幻,剧情</td></tr><tr><td>《lie to me》</td><td>警匪,动作,心理</td></tr></tbody></table> <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> movie<span class="token punctuation">.</span> categrory_name<span class="token keyword">from</span> movie_infolateral  <span class="token keyword">view</span> explode <span class="token punctuation">(</span> categrory<span class="token punctuation">)</span>  adtable <span class="token keyword">as</span> categrory_name<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>得到结果如下：</p></blockquote><table><thead><tr><th>movie</th><th>category</th></tr></thead><tbody><tr><td>《疑犯追踪》</td><td>悬疑</td></tr><tr><td>《疑犯追踪》</td><td>动作</td></tr><tr><td>《疑犯追踪》</td><td>科幻</td></tr><tr><td>《疑犯追踪》</td><td>剧情</td></tr><tr><td>《lie to me》</td><td>警匪</td></tr><tr><td>《lie to me》</td><td>动作</td></tr><tr><td>《lie to me》</td><td>心理</td></tr></tbody></table><ul><li>需求2： <blockquote><p>将 表 table 中的 <code>adid_list</code> 转换为单独的行。</p></blockquote></li></ul><table><thead><tr><th>pageid</th><th>adid_list</th></tr></thead><tbody><tr><td>front_page</td><td>[1,2,3]</td></tr><tr><td>contact_page</td><td>[3,4]</td></tr></tbody></table> <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> pageid<span class="token punctuation">,</span> adid<span class="token keyword">from</span> talbe1lateral <span class="token keyword">view</span> explode<span class="token punctuation">(</span>adid_list<span class="token punctuation">)</span> adtable <span class="token keyword">as</span> adid<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>输出结果为： </p></blockquote><table><thead><tr><th>pageid</th><th>adid_list</th></tr></thead><tbody><tr><td>front_page</td><td>1</td></tr><tr><td>front_page</td><td>2</td></tr><tr><td>front_page</td><td>3</td></tr><tr><td>contact_page</td><td>3</td></tr><tr><td>contact_page</td><td>4</td></tr></tbody></table><ul><li>需求3： <blockquote><p>多个 lateral view 查询</p></blockquote></li></ul><table><thead><tr><th>array</th><th>col2</th></tr></thead><tbody><tr><td>[1,2]</td><td>[“a”，”b”]</td></tr><tr><td>[3,4]</td><td>[“c”, “d”]</td></tr></tbody></table> <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> mycol1<span class="token punctuation">,</span>mycol2<span class="token keyword">from</span> table1alteral  <span class="token keyword">view</span> explode<span class="token punctuation">(</span>array<span class="token punctuation">)</span> adtable <span class="token keyword">as</span> mycol1 alteral  <span class="token keyword">view</span> explode<span class="token punctuation">(</span>col2<span class="token punctuation">)</span>  adtable <span class="token keyword">as</span> mycol2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>输出结果为： </p></blockquote><table><thead><tr><th>myCol1</th><th>myCol2</th></tr></thead><tbody><tr><td>1</td><td>“a”</td></tr><tr><td>1</td><td>“b”</td></tr><tr><td>2</td><td>“a”</td></tr><tr><td>2</td><td>“b”</td></tr><tr><td>3</td><td>“c”</td></tr><tr><td>3</td><td>“d”</td></tr><tr><td>4</td><td>“c”</td></tr><tr><td>4</td><td>“d”</td></tr></tbody></table><hr><h2 id="控制函数"><a href="#控制函数" class="headerlink" title="控制函数"></a>控制函数</h2><ol><li><p><strong>IF( expr , v1 , v2 )函数</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span>     <span class="token operator">*</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>age<span class="token operator">&lt;</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token string">'少年'</span><span class="token punctuation">,</span><span class="token string">'青年'</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> ifage <span class="token comment">--- 查出班级所有学生，如果年龄小于20，就标准为少年，否则标记为青年。</span><span class="token keyword">from</span>      student<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>ifnull(V1,V2)函数</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span>    ifnull<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment">--如果v1不为空，则直接返回v1;如果v1为空，则返回参数v2</span>    ifnull<span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p><strong>case when 函数</strong></p></li></ol><ul><li>对不同字母进行省份转换<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span><span class="token keyword">case</span>         <span class="token keyword">when</span> province <span class="token operator">like</span> <span class="token string">'ah'</span> <span class="token keyword">then</span> <span class="token string">'安徽'</span>        <span class="token keyword">when</span> province <span class="token operator">like</span> <span class="token string">'fj'</span> <span class="token keyword">then</span> <span class="token string">'福建'</span>        <span class="token keyword">when</span> province <span class="token operator">like</span> <span class="token string">'gd'</span> <span class="token keyword">then</span> <span class="token string">'广东'</span>    <span class="token keyword">else</span> <span class="token string">'m'</span>     <span class="token keyword">end</span> <span class="token keyword">as</span> province <span class="token punctuation">,</span>    <span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">distinct</span> user_account<span class="token punctuation">)</span> uv<span class="token punctuation">,</span>    <span class="token function">count</span><span class="token punctuation">(</span>page_name<span class="token punctuation">)</span> pv<span class="token keyword">from</span> android_log<span class="token keyword">where</span> hit_date <span class="token operator">between</span> <span class="token string">'{}'</span> <span class="token operator">and</span> <span class="token string">'{}'</span><span class="token operator">and</span> page_name <span class="token operator">like</span> <span class="token string">'%Kefujh%'</span><span class="token keyword">group</span> <span class="token keyword">by</span> <span class="token keyword">case</span>         <span class="token keyword">when</span> province <span class="token operator">like</span> <span class="token string">'ah'</span> <span class="token keyword">then</span> <span class="token string">'安徽'</span>        <span class="token keyword">when</span> province <span class="token operator">like</span> <span class="token string">'fj'</span> <span class="token keyword">then</span> <span class="token string">'福建'</span>        <span class="token keyword">when</span> province <span class="token operator">like</span> <span class="token string">'gd'</span> <span class="token keyword">then</span> <span class="token string">'广东'</span>    <span class="token keyword">else</span> <span class="token string">'m'</span>     <span class="token keyword">end</span> <span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token keyword">case</span>         <span class="token keyword">when</span> province <span class="token operator">like</span> <span class="token string">'ah'</span> <span class="token keyword">then</span> <span class="token string">'安徽'</span>        <span class="token keyword">when</span> province <span class="token operator">like</span> <span class="token string">'fj'</span> <span class="token keyword">then</span> <span class="token string">'福建'</span>        <span class="token keyword">when</span> province <span class="token operator">like</span> <span class="token string">'gd'</span> <span class="token keyword">then</span> <span class="token string">'广东'</span>    <span class="token keyword">else</span> <span class="token string">'m'</span>     <span class="token keyword">end</span> <span class="token keyword">limit</span> <span class="token number">1000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><ul><li>范围转换<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token keyword">case</span> <span class="token keyword">when</span> population <span class="token operator">&lt;</span> <span class="token number">250</span> <span class="token keyword">then</span> <span class="token string">'1'</span> <span class="token keyword">when</span> population  <span class="token operator">=</span> <span class="token number">250</span> <span class="token operator">and</span>  population <span class="token operator">&lt;</span> <span class="token number">500</span> <span class="token keyword">then</span> <span class="token string">'2'</span><span class="token keyword">else</span> <span class="token boolean">null</span> <span class="token keyword">end</span>  <span class="token keyword">as</span> pop_class<span class="token punctuation">,</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">as</span> cntfrom <span class="token keyword">from</span> pop <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="日期函数"><a href="#日期函数" class="headerlink" title="日期函数"></a>日期函数</h2><ol><li><strong>时间函数</strong></li></ol><table><thead><tr><th>函数名</th><th>定义</th></tr></thead><tbody><tr><td>NOW()</td><td>当前时间</td></tr><tr><td>curdate()</td><td>获取当前时刻的日期</td></tr><tr><td>curtime()</td><td>获取当前时刻的时间</td></tr><tr><td>date()</td><td>返回时间的日期部分</td></tr><tr><td>year()</td><td>返回时间的年份</td></tr><tr><td>month()</td><td>返回时间的月份</td></tr><tr><td>day()</td><td>返回日期的天</td></tr><tr><td>hour()</td><td>返回时间的小时</td></tr><tr><td>minute()</td><td>返回时间的分钟</td></tr><tr><td>second()</td><td>返回时间的秒</td></tr><tr><td>week ()</td><td>第几周</td></tr><tr><td>time()</td><td>将日期转换为时间</td></tr><tr><td>dayofweek()</td><td>返回星期几，1为星期天</td></tr><tr><td>dayofyear()</td><td>一年中的第几天</td></tr><tr><td>weekofyear(now())</td><td>获取当前时间是全年的第几周</td></tr><tr><td>quarter()</td><td>获取时间所属的季度</td></tr><tr><td>sec_to_time ( )</td><td>秒数转成时间</td></tr><tr><td>date_add(dt,interval 1 day )</td><td>时间相加</td></tr><tr><td>date_sub(date,INTERVAL expr（时间间隔） type（时间类型，天、月、年）)</td><td>时间相减</td></tr><tr><td>datediff()</td><td>时间的差值</td></tr><tr><td>extract()</td><td>抽取具体的年、月、日</td></tr><tr><td>date_format()</td><td>输出指定时间格式</td></tr></tbody></table><ol start="2"><li> <strong>extract(unit from datetime)用法</strong></li></ol><ul><li>unit的取值说明为：</li></ul><table><thead><tr><th>unit</th><th>说明</th></tr></thead><tbody><tr><td>year</td><td>年</td></tr><tr><td>month</td><td>月</td></tr><tr><td>day</td><td>日</td></tr><tr><td>hour</td><td>小时</td></tr><tr><td>minute</td><td>分钟</td></tr><tr><td>second</td><td>秒</td></tr><tr><td>week</td><td>周</td></tr></tbody></table> <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span>     extract<span class="token punctuation">(</span><span class="token keyword">year</span> <span class="token keyword">from</span> <span class="token string">"2020-07-29 10:31:10"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> y<span class="token punctuation">,</span>    extract<span class="token punctuation">(</span><span class="token keyword">month</span> <span class="token keyword">from</span>  <span class="token string">"2020-07-29 10:31:10"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> m<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>输出结果为：</p></blockquote><table><thead><tr><th>y</th><th>m</th></tr></thead><tbody><tr><td>2020</td><td>07</td></tr></tbody></table><ol start="3"><li><strong>date_format() 用法</strong></li></ol><ul><li>参数可选格式：</li></ul><table><thead><tr><th>主题</th><th>格式</th><th>描述</th></tr></thead><tbody><tr><td>年</td><td>%Y</td><td>4位数字表示的年</td></tr><tr><td>月</td><td>%b</td><td>月份对应的英文缩写</td></tr><tr><td>月</td><td>%M</td><td>月份对应的英文全称</td></tr><tr><td>月</td><td>%m</td><td>以01-12的形式表示的月</td></tr><tr><td>月</td><td>%c</td><td>以1-12的形式表示的月</td></tr><tr><td>日</td><td>%d</td><td>以01-31的形式表示某月中的第几天</td></tr><tr><td>日</td><td>%e</td><td>以1-31的形式表示某月中的第几天</td></tr><tr><td>日</td><td>%D</td><td>用th后缀表示某月中的第几天</td></tr><tr><td>日</td><td>%j</td><td>以001-366的形式表示一年中的第几天</td></tr><tr><td>周</td><td>%a</td><td>星期几对应的英文缩写</td></tr><tr><td>周</td><td>%W</td><td>星期几对应的英文全称</td></tr><tr><td>时</td><td>%H</td><td>以00-23的形式表示的小时</td></tr><tr><td>时</td><td>%h</td><td>以01-12的形式表示的小时</td></tr><tr><td>分</td><td>%i</td><td>以00-59的形式表示的分钟</td></tr><tr><td>秒</td><td>%S</td><td>以00-59的形式表示的秒</td></tr><tr><td>秒</td><td>%f</td><td>微秒</td></tr><tr><td>时分秒</td><td>%T</td><td>返回当前时刻的时分秒（hh:mm:ss)</td></tr></tbody></table> <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span>     date_format<span class="token punctuation">(</span><span class="token string">"2020-07-29 10:31:10"</span><span class="token punctuation">,</span> <span class="token string">"%Y-%m-%d"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="4"><li><strong>datediff-求留存率</strong><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">with</span> a1 <span class="token keyword">as</span> <span class="token punctuation">(</span><span class="token keyword">select</span>     hit_date<span class="token punctuation">,</span>    user_account<span class="token keyword">from</span>     computer_view<span class="token punctuation">.</span><span class="token keyword">data</span><span class="token keyword">where</span>     hit_date <span class="token operator">between</span> <span class="token string">'2019-04-25'</span> <span class="token operator">and</span> <span class="token string">'2019-05-13'</span>    <span class="token operator">and</span>     btn_information <span class="token operator">is</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">)</span><span class="token punctuation">,</span>a2 <span class="token keyword">as</span> <span class="token punctuation">(</span><span class="token keyword">select</span>     hit_date<span class="token punctuation">,</span>    user_account<span class="token keyword">from</span>     computer_view<span class="token punctuation">.</span><span class="token keyword">data</span><span class="token keyword">where</span>     hit_date <span class="token operator">between</span> <span class="token string">'2019-04-25'</span> <span class="token operator">and</span> <span class="token string">'2019-05-13'</span>    <span class="token operator">and</span>     btn_information <span class="token operator">is</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">)</span><span class="token keyword">select</span> a1<span class="token punctuation">.</span>hit_date<span class="token punctuation">,</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">distinct</span> a1<span class="token punctuation">.</span>user_account<span class="token punctuation">)</span> uv<span class="token punctuation">,</span><span class="token comment">---一次性求次1日，次3日， 次7日留存，此方法不能计算pv，会造成笛卡尔积</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">distinct</span> <span class="token keyword">case</span> <span class="token keyword">when</span> datediff<span class="token punctuation">(</span>a2<span class="token punctuation">.</span>hit_date<span class="token punctuation">,</span> a1<span class="token punctuation">.</span>hit_date<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token keyword">then</span> a1<span class="token punctuation">.</span>user_account <span class="token keyword">else</span> <span class="token boolean">null</span> <span class="token keyword">end</span> <span class="token punctuation">)</span> next_day<span class="token punctuation">,</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">distinct</span> <span class="token keyword">case</span> <span class="token keyword">when</span> datediff<span class="token punctuation">(</span>a2<span class="token punctuation">.</span>hit_date<span class="token punctuation">,</span> a1<span class="token punctuation">.</span>hit_date<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">3</span> <span class="token keyword">then</span> a1<span class="token punctuation">.</span>user_account <span class="token keyword">else</span> <span class="token boolean">null</span> <span class="token keyword">end</span> <span class="token punctuation">)</span> three_day<span class="token punctuation">,</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">distinct</span> <span class="token keyword">case</span> <span class="token keyword">when</span> datediff<span class="token punctuation">(</span>a2<span class="token punctuation">.</span>hit_date<span class="token punctuation">,</span> a1<span class="token punctuation">.</span>hit_date<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">7</span> <span class="token keyword">then</span> a1<span class="token punctuation">.</span>user_account <span class="token keyword">else</span> <span class="token boolean">null</span> <span class="token keyword">end</span> <span class="token punctuation">)</span> seven_day<span class="token keyword">from</span> a1 <span class="token keyword">join</span> a2 <span class="token keyword">on</span> a1<span class="token punctuation">.</span>user_account <span class="token operator">=</span> a2<span class="token punctuation">.</span>user_account<span class="token keyword">group</span> <span class="token keyword">by</span> a1<span class="token punctuation">.</span>hit_date<span class="token keyword">order</span> <span class="token keyword">by</span> a1<span class="token punctuation">.</span>hit_date<span class="token keyword">limit</span> <span class="token number">100</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p> date_add 求留存率</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">---步骤1：统计每天的uv</span><span class="token comment">---步骤2： - 统计10-15号每天的次日留存数， 统计次3、7日留存只需将1换为3、7</span><span class="token keyword">with</span> a1 <span class="token keyword">as</span> <span class="token punctuation">(</span>    <span class="token keyword">select</span>         user_account<span class="token punctuation">,</span>        hit_date    <span class="token keyword">from</span>         computer_view<span class="token punctuation">.</span><span class="token keyword">data</span>    <span class="token keyword">where</span>         hit_date <span class="token operator">between</span>  <span class="token string">'2018-11-10'</span> <span class="token operator">and</span> <span class="token string">'2018-11-15'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>a2 <span class="token keyword">as</span> <span class="token punctuation">(</span>        <span class="token keyword">select</span>         user_account<span class="token punctuation">,</span>        hit_date    <span class="token keyword">from</span>         computer_view<span class="token punctuation">.</span><span class="token keyword">data</span>    <span class="token keyword">where</span>         hit_date <span class="token operator">between</span> <span class="token string">'2018-11-10'</span> <span class="token operator">and</span> <span class="token string">'2018-11-25'</span><span class="token punctuation">)</span><span class="token keyword">select</span>     a1<span class="token punctuation">.</span>hit_date<span class="token punctuation">,</span>    <span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">distinct</span> a1<span class="token punctuation">.</span>user_account<span class="token punctuation">)</span> <span class="token keyword">as</span> uv<span class="token keyword">from</span>    a1 <span class="token keyword">join</span> a2 <span class="token keyword">on</span> a1<span class="token punctuation">.</span>user_account <span class="token operator">=</span> a2<span class="token punctuation">.</span>user_account<span class="token keyword">WHERE</span>       a2<span class="token punctuation">.</span>hit_date <span class="token operator">=</span>  date_add<span class="token punctuation">(</span>a1<span class="token punctuation">.</span>hit_date<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">group</span> <span class="token keyword">by</span>     a1<span class="token punctuation">.</span>hit_date<span class="token keyword">order</span> <span class="token keyword">BY</span>    a1<span class="token punctuation">.</span>hit_date步骤<span class="token number">3</span>：计算留存率<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>计算留存率的其他写法-迷神</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 留存sql优化</span><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">from</span><span class="token punctuation">(</span>    <span class="token keyword">select</span> userid<span class="token punctuation">,</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">from</span><span class="token punctuation">(</span>        <span class="token keyword">select</span> t1<span class="token punctuation">.</span>userid<span class="token punctuation">,</span>                t1<span class="token punctuation">.</span>statdate        <span class="token keyword">from</span>            table1 t1        <span class="token keyword">where</span>            t1<span class="token punctuation">.</span>statdate <span class="token operator">=</span> ${上<span class="token number">30</span>天日期}            <span class="token operator">and</span> t1<span class="token punctuation">.</span>statdate <span class="token operator">&lt;=</span> ${上一天日期}        <span class="token keyword">group</span> <span class="token keyword">by</span>            t1<span class="token punctuation">.</span>userid<span class="token punctuation">,</span>            t1<span class="token punctuation">.</span>statdate        <span class="token punctuation">)</span> s1    <span class="token keyword">group</span> <span class="token keyword">by</span>        userid    <span class="token keyword">having</span>        <span class="token function">count</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token number">2</span>    <span class="token punctuation">)</span> R1<span class="token comment">--此sql为一个样例，计算连续跟任意都适用，至于计算第N天，只需要更改下日期过滤条件，变成=$[上N天日期]，=${上一天日期}。 </span><span class="token comment">--另外，这种方式适合跑当前周期数据，如果跑历史数据，可以写个循环。当然，最暴力还是直接用userid 关联。</span><span class="token comment">--这种写法，更多是针对现在大部分分布式处理平台的特性，尽可能将数据合理均匀分片，每台服务器各自运算自己的，最后汇总。 尽可能少用 count distinct 这种写法，因为无法利用分片的特性。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>留存率的另一种写法-勇哥</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">with</span> a1 <span class="token keyword">as</span> <span class="token punctuation">(</span><span class="token keyword">select</span>hit_date<span class="token punctuation">,</span>user_account<span class="token punctuation">,</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">as</span> hit_count<span class="token keyword">from</span> apache_computer_view<span class="token punctuation">.</span>client_android_log<span class="token keyword">WHERE</span> hit_date <span class="token operator">between</span> <span class="token string">'2020-04-01'</span> <span class="token operator">and</span>  <span class="token string">'2020-04-07'</span><span class="token operator">and</span>btn_navigation  <span class="token operator">like</span> <span class="token string">"%查询办理%"</span><span class="token keyword">group</span> <span class="token keyword">by</span>    <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>a2 <span class="token keyword">as</span> <span class="token punctuation">(</span><span class="token keyword">select</span>hit_date<span class="token punctuation">,</span>    user_account<span class="token punctuation">,</span>    <span class="token function">count</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">as</span> hit_count<span class="token keyword">from</span> apache_computer_view<span class="token punctuation">.</span>client_android_log<span class="token keyword">WHERE</span>hit_date <span class="token operator">between</span> <span class="token string">'2020-04-01'</span> <span class="token operator">and</span>  <span class="token string">'2020-04-07'</span><span class="token operator">and</span>btn_navigation  <span class="token operator">like</span> <span class="token string">"%查询办理%"</span><span class="token keyword">group</span> <span class="token keyword">by</span>    <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">select</span> a1<span class="token punctuation">.</span>hit_date <span class="token keyword">as</span> one<span class="token punctuation">,</span>a2<span class="token punctuation">.</span>hit_date <span class="token keyword">as</span> two<span class="token punctuation">,</span>datediff<span class="token punctuation">(</span>a2<span class="token punctuation">.</span>hit_date<span class="token punctuation">,</span> a1<span class="token punctuation">.</span>hit_date<span class="token punctuation">)</span> <span class="token keyword">as</span> cha<span class="token punctuation">,</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">distinct</span> a2<span class="token punctuation">.</span>user_account<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">sum</span><span class="token punctuation">(</span>a2<span class="token punctuation">.</span>hit_count<span class="token punctuation">)</span><span class="token keyword">from</span>    a1 <span class="token keyword">left</span> <span class="token keyword">join</span> a2 <span class="token keyword">on</span> a1<span class="token punctuation">.</span>user_account <span class="token operator">=</span> a2<span class="token punctuation">.</span>user_account<span class="token keyword">group</span> <span class="token keyword">by</span>    <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token keyword">having</span>    cha <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token keyword">order</span> <span class="token keyword">by</span>    <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span>​<span class="token punctuation">`</span><span class="token punctuation">`</span><span class="token punctuation">`</span> <span class="token operator">-</span> 计算月留存率的简单写法：筛选出在两个月份出现的用户​<span class="token punctuation">`</span><span class="token punctuation">`</span><span class="token punctuation">`</span><span class="token keyword">sql</span><span class="token keyword">with</span> a1 <span class="token keyword">as</span> <span class="token punctuation">(</span><span class="token keyword">select</span>     user_account<span class="token punctuation">,</span>    <span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">distinct</span> <span class="token keyword">month</span> <span class="token punctuation">(</span>hit_date<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">as</span> c<span class="token keyword">from</span>    android_log <span class="token keyword">where</span>      hit_date <span class="token operator">between</span> <span class="token string">'2019-03-01'</span> <span class="token operator">and</span> <span class="token string">'2019-04-31'</span><span class="token keyword">group</span> <span class="token keyword">by</span>  user_account<span class="token keyword">having</span>   c <span class="token operator">=</span> <span class="token number">2</span><span class="token keyword">union</span> <span class="token keyword">select</span>     user_account<span class="token punctuation">,</span>    <span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">distinct</span> <span class="token keyword">month</span> <span class="token punctuation">(</span>hit_date<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">as</span> c<span class="token keyword">from</span>     ios_log <span class="token keyword">where</span>      hit_date <span class="token operator">between</span> <span class="token string">'2019-03-01'</span> <span class="token operator">and</span> <span class="token string">'2019-04-31'</span><span class="token keyword">group</span> <span class="token keyword">by</span>  user_account<span class="token keyword">having</span>   c <span class="token operator">=</span> <span class="token number">2</span>    <span class="token punctuation">)</span><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">distinct</span> user_account<span class="token punctuation">)</span> <span class="token keyword">as</span> uv <span class="token keyword">from</span> a1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="5"><li><p><strong>日期转换</strong></p><p>把2020-12-01日期字段改成：2020-12-01 这样的形式</p><pre class="line-numbers language-none"><code class="language-none">from_unixtime(unix_timestamp(hit_date,'yyyymmdd'),'yyyy-mm-dd')<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h2 id="数据分组与透视"><a href="#数据分组与透视" class="headerlink" title="数据分组与透视"></a>数据分组与透视</h2><ol><li><p><strong>对分组后的数据进行聚合运算</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span>         <span class="token keyword">year</span><span class="token punctuation">(</span>ymd<span class="token punctuation">)</span><span class="token punctuation">,</span>     <span class="token function">avg</span><span class="token punctuation">(</span>price_close<span class="token punctuation">)</span> <span class="token comment">--- 对结果进行分类</span><span class="token keyword">from</span>         stocks<span class="token keyword">where</span>         exchange <span class="token operator">=</span> <span class="token string">'nasdaq'</span><span class="token keyword">group</span> <span class="token keyword">by</span>         <span class="token keyword">year</span><span class="token punctuation">(</span>ymd<span class="token punctuation">)</span><span class="token keyword">order</span> <span class="token keyword">by</span>         <span class="token keyword">year</span><span class="token punctuation">(</span>ymd<span class="token punctuation">)</span> <span class="token keyword">desc</span><span class="token punctuation">;</span>  <span class="token comment">--desc 从高到低排列</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>对聚合后的数据进行条件筛选</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span>         deparment<span class="token punctuation">,</span>     <span class="token function">avg</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span> <span class="token keyword">as</span> average <span class="token keyword">from</span>          salary_info<span class="token keyword">group</span> <span class="token keyword">by</span>         deparment <span class="token keyword">having</span>         average <span class="token operator">&gt;</span> <span class="token number">3000</span><span class="token comment">--- having 子句来限制输出结果--- 查找平均工资大于3000的部门</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><ul><li>having 与 where 的区别：<blockquote><p>Where 是一个约束声明，使用Where约束来自数据库的数据，Where是在结果返回之前起作用的，Where中不能使用聚合函数。<br>Having是一个过滤声明，是在查询返回结果集以后对查询结果进行的过滤操作，在Having中可以使用聚合函数。</p></blockquote></li></ul><ol start="3"><li><strong>group_concat()函数</strong><blockquote><p>对以下数据进行分组处理</p></blockquote></li></ol><table><thead><tr><th>id</th><th>score</th></tr></thead><tbody><tr><td>1</td><td>78</td></tr><tr><td>2</td><td>52</td></tr><tr><td>1</td><td>69</td></tr><tr><td>2</td><td>45</td></tr></tbody></table> <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span>    id<span class="token punctuation">,</span>    group_concat<span class="token punctuation">(</span>score<span class="token punctuation">)</span> <span class="token keyword">as</span> g_score<span class="token keyword">from</span>     <span class="token keyword">tables</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>得到结果如下</p></blockquote><table><thead><tr><th>id</th><th>score</th></tr></thead><tbody><tr><td>1</td><td>78,69</td></tr><tr><td>2</td><td>52,45</td></tr></tbody></table><ol start="4"><li><strong>rollup 函数用法</strong></li></ol><ul><li> 需求背景： 求每个省份的销量，然后求每个省份下城市的销量，汇总到一张表中。</li></ul><blockquote><p>写法1：</p></blockquote> <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span>     province<span class="token punctuation">,</span>    <span class="token boolean">null</span> <span class="token keyword">as</span> city<span class="token punctuation">,</span>    <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">order</span><span class="token punctuation">)</span><span class="token keyword">from</span>     table_sales<span class="token keyword">group</span> <span class="token keyword">by</span>     province<span class="token keyword">union</span> <span class="token keyword">all</span> <span class="token keyword">select</span>     province<span class="token punctuation">,</span>    city<span class="token punctuation">,</span>    <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">order</span><span class="token punctuation">)</span><span class="token keyword">from</span>     table_sales<span class="token keyword">group</span> <span class="token keyword">by</span>     province<span class="token punctuation">,</span>    city<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>写法2：<br> </p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span>  province<span class="token punctuation">,</span> city<span class="token punctuation">,</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">order</span><span class="token punctuation">)</span><span class="token keyword">from</span> table_sales<span class="token keyword">group</span> <span class="token keyword">by</span>  province<span class="token punctuation">,</span>city<span class="token keyword">with rollup</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p></p></blockquote><blockquote><p>得到结果如下：</p></blockquote><table><thead><tr><th>province</th><th>city</th><th>sum(order)</th></tr></thead><tbody><tr><td>陕西</td><td>null</td><td>50</td></tr><tr><td>陕西</td><td>西安</td><td>20</td></tr><tr><td>陕西</td><td>渭南</td><td>10</td></tr><tr><td>陕西</td><td>汉中</td><td>20</td></tr><tr><td>北京</td><td>北京</td><td>24</td></tr><tr><td>null</td><td>null</td><td>74</td></tr></tbody></table><ol start="5"><li>数据透视表</li></ol><ul><li> 将下表进行按照年份和季度进行透视汇总</li></ul><table><thead><tr><th>年</th><th>季度</th><th>销售量</th></tr></thead><tbody><tr><td>1991</td><td>1</td><td>11</td></tr><tr><td>1991</td><td>2</td><td>12</td></tr><tr><td>1991</td><td>3</td><td>13</td></tr><tr><td>1991</td><td>4</td><td>14</td></tr><tr><td>1992</td><td>1</td><td>21</td></tr><tr><td>1992</td><td>2</td><td>22</td></tr><tr><td>1992</td><td>3</td><td>23</td></tr><tr><td>1992</td><td>4</td><td>24</td></tr></tbody></table> <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> 年<span class="token punctuation">,</span><span class="token function">sum</span><span class="token punctuation">(</span> <span class="token keyword">case</span> <span class="token keyword">when</span>  季度 <span class="token operator">=</span> <span class="token number">1</span> <span class="token keyword">then</span> 销售量  <span class="token keyword">else</span> <span class="token boolean">null</span> <span class="token keyword">end</span> <span class="token punctuation">)</span> 一季度<span class="token punctuation">,</span><span class="token function">sum</span><span class="token punctuation">(</span> <span class="token keyword">case</span> <span class="token keyword">when</span> 季度 <span class="token operator">=</span> <span class="token number">2</span> <span class="token keyword">then</span> 销售量 <span class="token keyword">else</span> <span class="token boolean">null</span> <span class="token keyword">end</span> <span class="token punctuation">)</span> <span class="token keyword">as</span> 二季度<span class="token punctuation">,</span><span class="token function">sum</span><span class="token punctuation">(</span> <span class="token keyword">case</span> <span class="token keyword">when</span> 季度 <span class="token operator">=</span> <span class="token number">3</span> <span class="token keyword">then</span> 销售量 <span class="token keyword">else</span> <span class="token boolean">null</span> <span class="token keyword">end</span> <span class="token punctuation">)</span> <span class="token keyword">as</span>  三季度<span class="token punctuation">,</span><span class="token function">sum</span><span class="token punctuation">(</span> <span class="token keyword">case</span> <span class="token keyword">when</span> 季度 <span class="token operator">=</span> <span class="token number">4</span> <span class="token keyword">then</span> 销售量 <span class="token keyword">else</span> <span class="token boolean">null</span> <span class="token keyword">end</span> <span class="token punctuation">)</span> <span class="token keyword">as</span> 四季度<span class="token keyword">from</span> page <span class="token keyword">group</span> <span class="token keyword">by</span> 年<span class="token keyword">order</span> <span class="token keyword">by</span> 年<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>查询结果如下：</p></blockquote><table><thead><tr><th>年</th><th>一季度</th><th>二季度</th><th>三季度</th><th>四季度</th></tr></thead><tbody><tr><td>1991</td><td>11</td><td>12</td><td>13</td><td>14</td></tr><tr><td>1992</td><td>21</td><td>22</td><td>23</td><td>24</td></tr></tbody></table><ul><li>统计各部门男女分别有多少人</li></ul><table><thead><tr><th>姓名</th><th>部门</th><th>性别</th></tr></thead><tbody><tr><td>甲</td><td>A</td><td>男</td></tr><tr><td>乙</td><td>A</td><td>男</td></tr><tr><td>丙</td><td>B</td><td>女</td></tr><tr><td>丁</td><td>A</td><td>女</td></tr><tr><td>张</td><td>B</td><td>男</td></tr><tr><td>赵</td><td>B</td><td>女</td></tr></tbody></table> <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token string">'部门'</span><span class="token punctuation">,</span><span class="token function">sum</span><span class="token punctuation">(</span> <span class="token keyword">case</span> <span class="token keyword">when</span> 性别 <span class="token operator">=</span> <span class="token string">'男'</span> <span class="token keyword">then</span> <span class="token number">1</span>  <span class="token keyword">else</span> <span class="token boolean">null</span> <span class="token keyword">end</span> <span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token string">'男'</span><span class="token punctuation">,</span><span class="token function">sum</span><span class="token punctuation">(</span> <span class="token keyword">case</span> <span class="token keyword">when</span> 性别 <span class="token operator">=</span> <span class="token string">'女'</span> <span class="token keyword">then</span> <span class="token number">1</span> <span class="token keyword">else</span> <span class="token boolean">null</span> <span class="token keyword">end</span> <span class="token punctuation">)</span> <span class="token keyword">as</span>  <span class="token string">'女'</span><span class="token keyword">from</span> table1<span class="token keyword">group</span> <span class="token keyword">by</span> <span class="token string">'部门'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>得到结果如下:</p></blockquote><table><thead><tr><th>部门</th><th>男</th><th>女</th></tr></thead><tbody><tr><td>A</td><td>2</td><td>1</td></tr><tr><td>B</td><td>1</td><td>2</td></tr></tbody></table><p> <code>rollup</code> 函数输出结果，不会有 <code>null, null, null, city</code> 值， 和 <code>cube</code> 的区别在于： <code>cube</code> 是维度更细的统计，假设数据有 <code>n</code> 个维度， 那么 <code>rollup</code> 会有 <code>n</code> 个聚合，<code>cube</code> 会有 <code>2n</code> 个聚合。 </p><p>解法1：分别写5个sql，这种方法太低效了， 还需要在excel中进行合并。<br> </p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span>order_id<span class="token punctuation">)</span>  <span class="token keyword">as</span> sales <span class="token keyword">from</span> table1 <span class="token comment">---全国成交量</span><span class="token keyword">select</span> area<span class="token punctuation">,</span> <span class="token function">count</span><span class="token punctuation">(</span>order_id<span class="token punctuation">)</span> <span class="token keyword">as</span> sales <span class="token keyword">from</span> table1 <span class="token keyword">group</span> <span class="token keyword">by</span> area<span class="token comment">--大区成交量</span><span class="token keyword">select</span> area<span class="token punctuation">,</span> province<span class="token punctuation">,</span> <span class="token function">count</span><span class="token punctuation">(</span>order_id<span class="token punctuation">)</span> <span class="token keyword">as</span> sales <span class="token keyword">from</span> table1 <span class="token keyword">group</span> <span class="token keyword">by</span> area<span class="token punctuation">,</span> province<span class="token comment">--省成交量</span><span class="token keyword">select</span> area<span class="token punctuation">,</span> province<span class="token punctuation">,</span> city<span class="token punctuation">,</span> <span class="token function">count</span><span class="token punctuation">(</span>order_id<span class="token punctuation">)</span> <span class="token keyword">as</span> sales <span class="token keyword">from</span> table1 <span class="token keyword">group</span> <span class="token keyword">by</span>  area<span class="token punctuation">,</span> province<span class="token punctuation">,</span> city<span class="token comment">---城市成交量</span><span class="token keyword">select</span> area<span class="token punctuation">,</span> province<span class="token punctuation">,</span> city<span class="token punctuation">,</span> shop<span class="token punctuation">,</span> <span class="token function">count</span><span class="token punctuation">(</span>order_id<span class="token punctuation">)</span> <span class="token keyword">as</span> sales <span class="token keyword">from</span> table1 <span class="token keyword">group</span> <span class="token keyword">by</span> area<span class="token punctuation">,</span> province<span class="token punctuation">,</span> city<span class="token punctuation">,</span> shop<span class="token comment">--店铺成交量</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p></p><blockquote><p>解法2：通过 union 和 union all 对查询结果进行纵向合并—sql中有很多 null, 这是因为 union all 拼接的两个表的列数需要相等。</p></blockquote> <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token boolean">null</span><span class="token punctuation">,</span> <span class="token boolean">null</span><span class="token punctuation">,</span> <span class="token boolean">null</span><span class="token punctuation">,</span> <span class="token boolean">null</span><span class="token punctuation">,</span> <span class="token boolean">null</span><span class="token punctuation">,</span> <span class="token function">count</span><span class="token punctuation">(</span>order_id<span class="token punctuation">)</span>  <span class="token keyword">as</span> sales <span class="token keyword">from</span> table1 <span class="token comment">---全国成交量</span><span class="token keyword">union</span> <span class="token keyword">all</span> <span class="token keyword">select</span> <span class="token boolean">null</span><span class="token punctuation">,</span> <span class="token boolean">null</span><span class="token punctuation">,</span> <span class="token boolean">null</span><span class="token punctuation">,</span><span class="token boolean">null</span><span class="token punctuation">,</span>  area<span class="token punctuation">,</span> <span class="token function">count</span><span class="token punctuation">(</span>order_id<span class="token punctuation">)</span> <span class="token keyword">as</span> sales <span class="token keyword">from</span> table1 <span class="token keyword">group</span> <span class="token keyword">by</span> area<span class="token comment">--大区成交量</span><span class="token keyword">union</span> <span class="token keyword">all</span> <span class="token keyword">select</span> <span class="token boolean">null</span><span class="token punctuation">,</span> <span class="token boolean">null</span><span class="token punctuation">,</span><span class="token boolean">null</span><span class="token punctuation">,</span>  area<span class="token punctuation">,</span> province<span class="token punctuation">,</span> <span class="token function">count</span><span class="token punctuation">(</span>order_id<span class="token punctuation">)</span> <span class="token keyword">as</span> sales <span class="token keyword">from</span> table1 <span class="token keyword">group</span> <span class="token keyword">by</span> area<span class="token punctuation">,</span> province<span class="token comment">--省成交量</span><span class="token keyword">union</span> <span class="token keyword">all</span> <span class="token keyword">select</span> <span class="token boolean">null</span><span class="token punctuation">,</span> <span class="token boolean">null</span><span class="token punctuation">,</span> area<span class="token punctuation">,</span> province<span class="token punctuation">,</span> city<span class="token punctuation">,</span> <span class="token function">count</span><span class="token punctuation">(</span>order_id<span class="token punctuation">)</span> <span class="token keyword">as</span> sales <span class="token keyword">from</span> table1 <span class="token keyword">group</span> <span class="token keyword">by</span>  area<span class="token punctuation">,</span> province<span class="token punctuation">,</span> city<span class="token comment">---城市成交量</span><span class="token keyword">union</span> <span class="token keyword">all</span><span class="token keyword">select</span> <span class="token boolean">null</span><span class="token punctuation">,</span>  area<span class="token punctuation">,</span> province<span class="token punctuation">,</span> city<span class="token punctuation">,</span> shop<span class="token punctuation">,</span> <span class="token function">count</span><span class="token punctuation">(</span>order_id<span class="token punctuation">)</span> <span class="token keyword">as</span> sales <span class="token keyword">from</span> table1 <span class="token keyword">group</span> <span class="token keyword">by</span> area<span class="token punctuation">,</span> province<span class="token punctuation">,</span> city<span class="token punctuation">,</span> shop <span class="token comment">--店铺成交量</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果如下：</p><p><img src="https://i.loli.net/2019/06/10/5cfe6c219ca3f57084.png" alt="sql结果"></p><p>解法3：用<code>grouping sets</code>来根据不同维度组合进行聚合</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token boolean">null</span><span class="token punctuation">,</span> area<span class="token punctuation">,</span> province<span class="token punctuation">,</span> city<span class="token punctuation">,</span> shop<span class="token keyword">from</span> table1<span class="token keyword">group</span> <span class="token keyword">by</span> <span class="token boolean">null</span><span class="token punctuation">,</span> area<span class="token punctuation">,</span> province<span class="token punctuation">,</span> city<span class="token punctuation">,</span> shopgrouping <span class="token keyword">set</span><span class="token punctuation">(</span> <span class="token boolean">null</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">,</span> area<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">,</span> area<span class="token punctuation">,</span>province<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">,</span> area<span class="token punctuation">,</span> province<span class="token punctuation">,</span> city<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">,</span>area<span class="token punctuation">,</span> province<span class="token punctuation">,</span> city<span class="token punctuation">,</span>shop<span class="token punctuation">)</span> <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>得到结果与利用 <code>union all</code>拼接结果相同。<code>group by</code>后面的字段表示要分组聚合的全部字段， <code>grouping sets</code>后面为 <code>group by</code> 后面各种字段的组合。</p><p>解法4：<code>cube</code>函数， 对<code>group by</code>的维度的所有组合进行聚合。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span>  area<span class="token punctuation">,</span> province<span class="token punctuation">,</span> city<span class="token punctuation">,</span> shop<span class="token keyword">from</span> table1<span class="token keyword">group</span> <span class="token keyword">by</span>  area<span class="token punctuation">,</span> province<span class="token punctuation">,</span> city<span class="token punctuation">,</span> shop<span class="token keyword">with</span> cube<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>cube</code> 会先对全部数据进行聚合，即 <code>null,null,null,null</code> 进行聚合，(只是不像解法3一样，显示null列， 如需显示只要加入null即可） 然后对 <code>area, null, null, null</code> 进行聚合，</p><hr><h2 id="窗口函数"><a href="#窗口函数" class="headerlink" title="窗口函数"></a>窗口函数</h2><table><thead><tr><th>函数名</th><th>定义</th></tr></thead><tbody><tr><td>over()</td><td>指定分析函数工作的数据窗口大小，这个数据窗口大小可能会随着行的变化而变化</td></tr><tr><td><strong>常跟的函数</strong></td><td><strong>说明</strong></td></tr><tr><td>current row</td><td>当前行</td></tr><tr><td>n preceding</td><td>往前n行数据</td></tr><tr><td>n following</td><td>往后n行数据</td></tr><tr><td>unbounded</td><td>起点</td></tr><tr><td>uvbounded preceding</td><td>表示从前面的起点开始</td></tr><tr><td>unbounded following</td><td>表示到后面的终点</td></tr><tr><td>lag(col, n)</td><td>往前第n行数据</td></tr><tr><td>lead(col, n)</td><td>往后第n行数据</td></tr><tr><td>ntile(n)</td><td>把有序分区中的行分发到指定数据的组中， 各个组有编号，编号从1开始，ntile返回此行所属组的编号</td></tr><tr><td>first_value()</td><td>返回组中数据窗口的第一个值</td></tr><tr><td>last_value()</td><td>返回组中数据窗口的最后一个值</td></tr></tbody></table><ol><li><strong>聚合函数+over()</strong></li></ol><blockquote><p>商业表如下</p></blockquote><table><thead><tr><th>shop_name</th><th>order_date</th><th>cost</th></tr></thead><tbody><tr><td>A</td><td>2017-01-01</td><td>10</td></tr><tr><td>B</td><td>2017-01-01</td><td>15</td></tr><tr><td>C</td><td>2017-01-01</td><td>20</td></tr><tr><td>A</td><td>2017-01-02</td><td>25</td></tr><tr><td>B</td><td>2017-01-02</td><td>25</td></tr><tr><td>C</td><td>2017-01-02</td><td>20</td></tr><tr><td>A</td><td>2017-01-03</td><td>15</td></tr><tr><td>B</td><td>2017-01-03</td><td>10</td></tr><tr><td>C</td><td>2017-01-03</td><td>20</td></tr></tbody></table><ul><li>求每个店铺的每天效率和全部总销量</li></ul><blockquote><p>写法1</p></blockquote> <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span>    shop_name<span class="token punctuation">,</span>    order_date<span class="token punctuation">,</span>    cost<span class="token punctuation">,</span>    <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token function">sum</span><span class="token punctuation">(</span>cost<span class="token punctuation">)</span> <span class="token keyword">from</span> business<span class="token punctuation">)</span> <span class="token keyword">as</span> sum_cost<span class="token keyword">from</span>     business<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>写法2<br> </p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"> <span class="token keyword">select</span>     shop_name<span class="token punctuation">,</span>    order_date<span class="token punctuation">,</span>    cost<span class="token punctuation">,</span>    <span class="token function">sum</span><span class="token punctuation">(</span>cost<span class="token punctuation">)</span><span class="token keyword">over</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> sum_cost<span class="token keyword">from</span>     business<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p></p></blockquote><blockquote><p>得到结果如下</p></blockquote><table><thead><tr><th>shop_name</th><th>order_date</th><th>cost</th><th>sum_cost</th></tr></thead><tbody><tr><td>A</td><td>2017-01-01</td><td>10</td><td>150</td></tr><tr><td>B</td><td>2017-01-01</td><td>15</td><td>150</td></tr><tr><td>C</td><td>2017-01-01</td><td>20</td><td>150</td></tr><tr><td>A</td><td>2017-01-02</td><td>25</td><td>150</td></tr><tr><td>B</td><td>2017-01-02</td><td>25</td><td>150</td></tr><tr><td>C</td><td>2017-01-02</td><td>20</td><td>150</td></tr><tr><td>A</td><td>2017-01-03</td><td>15</td><td>150</td></tr><tr><td>B</td><td>2017-01-03</td><td>10</td><td>150</td></tr><tr><td>C</td><td>2017-01-03</td><td>20</td><td>150</td></tr></tbody></table><ol start="2"><li><strong>partition by 子句</strong></li></ol><ul><li>查询各店铺日销量明细及各店铺平均每日销量</li></ul><blockquote><p>写法1<br> </p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">with</span> a1 <span class="token keyword">as</span> <span class="token punctuation">(</span>    <span class="token keyword">select</span>         shop_name<span class="token punctuation">,</span>order_name<span class="token punctuation">,</span> cost    <span class="token keyword">from</span>         business<span class="token punctuation">)</span><span class="token punctuation">,</span>a2 <span class="token keyword">as</span> <span class="token punctuation">(</span>    <span class="token keyword">select</span>         shop_name<span class="token punctuation">,</span>        <span class="token function">avg</span><span class="token punctuation">(</span>cost<span class="token punctuation">)</span> <span class="token keyword">as</span> avg_cost    <span class="token keyword">from</span>        business    <span class="token keyword">group</span> <span class="token keyword">by</span>         shop_name<span class="token punctuation">)</span><span class="token keyword">select</span>     a1<span class="token punctuation">.</span>shop_name<span class="token punctuation">,</span>    a1<span class="token punctuation">.</span>order_name<span class="token punctuation">,</span>    a1<span class="token punctuation">.</span>cost<span class="token punctuation">,</span>    a2<span class="token punctuation">.</span>avg_cost<span class="token keyword">from</span>     a1 <span class="token keyword">left</span> <span class="token keyword">join</span> a2 <span class="token keyword">on</span> a1<span class="token punctuation">.</span>shop_name <span class="token operator">=</span> a2<span class="token punctuation">.</span>shop_name<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p></p></blockquote><blockquote><p>写法2</p></blockquote> <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"> <span class="token keyword">select</span>     shop_name<span class="token punctuation">,</span>    order_name<span class="token punctuation">,</span>    cost<span class="token punctuation">,</span>    <span class="token function">avg</span><span class="token punctuation">(</span>cost<span class="token punctuation">)</span><span class="token keyword">over</span><span class="token punctuation">(</span><span class="token keyword">partition</span> <span class="token keyword">by</span> shop_name<span class="token punctuation">)</span> <span class="token keyword">as</span> avg_cost<span class="token keyword">from</span>    business<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>输出结果如下：</p></blockquote><table><thead><tr><th>shop_name</th><th>order_date</th><th>cost</th><th>age_cost</th></tr></thead><tbody><tr><td>A</td><td>2017-01-01</td><td>10</td><td>16.7</td></tr><tr><td>B</td><td>2017-01-01</td><td>15</td><td>16.7</td></tr><tr><td>C</td><td>2017-01-01</td><td>20</td><td>20</td></tr><tr><td>A</td><td>2017-01-02</td><td>25</td><td>16.7</td></tr><tr><td>B</td><td>2017-01-02</td><td>25</td><td>16.7</td></tr><tr><td>C</td><td>2017-01-02</td><td>20</td><td>20</td></tr><tr><td>A</td><td>2017-01-03</td><td>15</td><td>16.7</td></tr><tr><td>B</td><td>2017-01-03</td><td>10</td><td>16.7</td></tr><tr><td>C</td><td>2017-01-03</td><td>20</td><td>20</td></tr></tbody></table><ol start="3"><li> order by 子句</li></ol><ul><li>求不同店铺每日明细，及按照日期进行累加<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"> <span class="token keyword">select</span>     shop_name<span class="token punctuation">,</span>    order_name<span class="token punctuation">,</span>    cost<span class="token punctuation">,</span>    <span class="token function">sum</span><span class="token punctuation">(</span>cost<span class="token punctuation">)</span><span class="token keyword">over</span><span class="token punctuation">(</span><span class="token keyword">partition</span> <span class="token keyword">by</span> shop_name <span class="token keyword">order</span> <span class="token keyword">by</span> order_date<span class="token punctuation">)</span>  <span class="token keyword">as</span> sum_cost    <span class="token comment">---只根据日期进行累加，不区分店铺。先排序，之后按照顺序，从起到到当前行进行求和</span>    <span class="token comment">---sum(cost)over( order by orderdate   rows between unbounded preceding and  current row)</span>    <span class="token comment">--- 按照日期进行排序，并将当前日期和前一天、后一天数据求和</span>    <span class="token comment">---sum(cost) over(order by  orderdate  rows between 1   preceding  between  1 following ) </span><span class="token keyword">from</span>     business    <span class="token comment">--- sum没有问题，但是count(distinct user_account) 就不能用这种方法</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>输出结果如下：</p></blockquote></li></ul><table><thead><tr><th>shop_name</th><th>order_date</th><th>cost</th><th>age_cost</th></tr></thead><tbody><tr><td>A</td><td>2017-01-01</td><td>10</td><td>10</td></tr><tr><td>A</td><td>2017-01-02</td><td>25</td><td>35</td></tr><tr><td>A</td><td>2017-01-03</td><td>15</td><td>50</td></tr><tr><td>B</td><td>2017-01-01</td><td>15</td><td>15</td></tr><tr><td>B</td><td>2017-01-02</td><td>25</td><td>40</td></tr><tr><td>B</td><td>2017-01-03</td><td>10</td><td>50</td></tr><tr><td>C</td><td>2017-01-01</td><td>20</td><td>60</td></tr><tr><td>C</td><td>2017-01-02</td><td>20</td><td>60</td></tr><tr><td>C</td><td>2017-01-03</td><td>20</td><td>60</td></tr></tbody></table><p>求每个人将按照日期进行累加的消费金额</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> name<span class="token punctuation">,</span> <span class="token function">sum</span><span class="token punctuation">(</span>cost<span class="token punctuation">)</span> <span class="token keyword">over</span> <span class="token punctuation">(</span> <span class="token keyword">partition</span> <span class="token keyword">by</span> name <span class="token keyword">order</span> <span class="token keyword">by</span>  orderdate  <span class="token keyword">row</span> <span class="token operator">between</span> <span class="token keyword">unbounded</span> <span class="token keyword">preceding</span> <span class="token operator">and</span> <span class="token keyword">current</span> <span class="token keyword">row</span><span class="token punctuation">)</span> <span class="token keyword">from</span>  business <span class="token keyword">group</span> <span class="token keyword">by</span> name <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>要将cost按照日期进行倒序累加</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"> <span class="token keyword">select</span> <span class="token operator">*</span><span class="token punctuation">,</span><span class="token function">sum</span><span class="token punctuation">(</span>cost<span class="token punctuation">)</span> <span class="token keyword">over</span> <span class="token punctuation">(</span> <span class="token keyword">order</span> <span class="token keyword">by</span> orderdate <span class="token keyword">desc</span> <span class="token keyword">row</span> <span class="token operator">between</span> <span class="token keyword">unbounded</span> <span class="token keyword">preceding</span> <span class="token operator">and</span> <span class="token keyword">current</span> <span class="token keyword">row</span><span class="token punctuation">)</span><span class="token keyword">from</span> business ​<span class="token punctuation">`</span><span class="token punctuation">`</span><span class="token punctuation">`</span> <span class="token number">4.</span> ntile<span class="token punctuation">(</span><span class="token punctuation">)</span>函数<span class="token operator">-</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">[</span>ntile函数详解<span class="token punctuation">]</span><span class="token punctuation">(</span>https:<span class="token comment">//www.cnblogs.com/52xf/p/4209211.html)** </span><span class="token operator">&gt;</span> ntile函数可以将有序数据，根据指定的组数进行分组处理。 编号从<span class="token number">1</span>开始，对于每一行，ntile将返回此行所属的组编号。 ntile函数的分组依据：<span class="token operator">&gt;</span><span class="token number">1.</span> 检查能不能对所有满足条件的记录进行平均分组，若能则直接平均分配完成分组。<span class="token operator">&gt;</span><span class="token number">2.</span> 若不能，则会先分出一个组，此组个数为（总个数<span class="token operator">/</span>总组数）<span class="token operator">+</span><span class="token number">1</span>。<span class="token operator">&gt;</span><span class="token number">3.</span> 分配之后系统会继续比较余下的记录数与未分配的组数能不能进行平均分配，若不能，则根据上面条件再分配。<span class="token operator">&gt;</span><span class="token operator">-</span> 例如：将<span class="token number">6</span>个记录分为<span class="token number">4</span>组， 不能平均分配则，第一组记录数为 （<span class="token number">6</span><span class="token operator">/</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span> <span class="token operator">=</span> <span class="token number">2</span>条记录。剩余<span class="token number">4</span>条记录分为<span class="token number">3</span>组，不能平均分配，则第二组记录数为（<span class="token number">4</span><span class="token operator">/</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token operator">=</span><span class="token number">2</span>条记录。剩余<span class="token number">2</span>条记录分为<span class="token number">2</span>组，则剩余<span class="token number">2</span>组各<span class="token number">1</span>条记录。<span class="token operator">*</span> 将表分成三组​<span class="token punctuation">`</span><span class="token punctuation">`</span><span class="token punctuation">`</span><span class="token keyword">sql</span><span class="token keyword">select</span>      <span class="token keyword">select</span>     shop_name<span class="token punctuation">,</span>    order_name<span class="token punctuation">,</span>    cost<span class="token punctuation">,</span>    ntile<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">over</span> <span class="token keyword">as</span> cut_group<span class="token keyword">from</span>     business<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>输出结果如下</p></blockquote><table><thead><tr><th>shop_name</th><th>order_date</th><th>cost</th><th>cut_group</th></tr></thead><tbody><tr><td>A</td><td>2017-01-01</td><td>10</td><td>1</td></tr><tr><td>B</td><td>2017-01-01</td><td>15</td><td>1</td></tr><tr><td>C</td><td>2017-01-01</td><td>20</td><td>1</td></tr><tr><td>A</td><td>2017-01-02</td><td>25</td><td>2</td></tr><tr><td>B</td><td>2017-01-02</td><td>25</td><td>2</td></tr><tr><td>C</td><td>2017-01-02</td><td>20</td><td>2</td></tr><tr><td>A</td><td>2017-01-03</td><td>15</td><td>3</td></tr><tr><td>B</td><td>2017-01-03</td><td>10</td><td>3</td></tr><tr><td>C</td><td>2017-01-03</td><td>20</td><td>3</td></tr></tbody></table><ul><li>将各个店铺销量进行升序排序后进行内部切分<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span>      <span class="token keyword">select</span>     shop_name<span class="token punctuation">,</span>    order_name<span class="token punctuation">,</span>    cost<span class="token punctuation">,</span>    ntile<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">over</span><span class="token punctuation">(</span><span class="token keyword">partition</span> <span class="token keyword">by</span> shop_name <span class="token keyword">order</span> <span class="token keyword">by</span> cost<span class="token punctuation">)</span> <span class="token keyword">as</span> cut_group<span class="token keyword">from</span>     business<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><blockquote><p>输出结果如下</p></blockquote><table><thead><tr><th>shop_name</th><th>order_date</th><th>cost</th><th>age_cost</th></tr></thead><tbody><tr><td>A</td><td>2017-01-01</td><td>10</td><td>1</td></tr><tr><td>A</td><td>2017-01-02</td><td>25</td><td>2</td></tr><tr><td>A</td><td>2017-01-03</td><td>15</td><td>3</td></tr><tr><td>B</td><td>2017-01-01</td><td>15</td><td>1</td></tr><tr><td>B</td><td>2017-01-02</td><td>25</td><td>2</td></tr><tr><td>B</td><td>2017-01-03</td><td>10</td><td>3</td></tr><tr><td>C</td><td>2017-01-01</td><td>20</td><td>1</td></tr><tr><td>C</td><td>2017-01-02</td><td>20</td><td>2</td></tr><tr><td>C</td><td>2017-01-03</td><td>20</td><td>3</td></tr></tbody></table><ul><li>查询前50%时间的订单信息<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span>  <span class="token operator">*</span>  <span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token keyword">select</span> name<span class="token punctuation">,</span>orderdate<span class="token punctuation">,</span>cost<span class="token punctuation">,</span>ntile<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">over</span><span class="token punctuation">(</span><span class="token keyword">order</span> <span class="token keyword">by</span> orderdate<span class="token punctuation">)</span> <span class="token keyword">as</span> git<span class="token keyword">from</span> business<span class="token punctuation">)</span><span class="token keyword">where</span> git <span class="token operator">=</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><ol start="5"><li><strong>排序函数</strong></li></ol><ul><li>SQl 中用于排序的函数有：rank、dense_rank、row_number、ntile函数,其语法为：</li></ul> <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">rank<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">over</span> <span class="token punctuation">(</span> <span class="token keyword">partition</span> <span class="token keyword">by</span> A <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> B  <span class="token keyword">desc</span> <span class="token punctuation">)</span>   <span class="token comment">---1、1、3</span>dense_rank<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">over</span> <span class="token punctuation">(</span><span class="token keyword">partition</span> <span class="token keyword">by</span> A <span class="token keyword">order</span> <span class="token keyword">by</span> B <span class="token keyword">desc</span><span class="token punctuation">)</span>  <span class="token comment">--- 1、1、2</span>row_number<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">over</span> <span class="token punctuation">(</span><span class="token keyword">partition</span> <span class="token keyword">by</span> A <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> b <span class="token keyword">desc</span><span class="token punctuation">)</span>    <span class="token comment">--1、2、3</span>ntile<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">over</span> <span class="token punctuation">(</span><span class="token keyword">partition</span> <span class="token keyword">by</span> A <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> b <span class="token keyword">desc</span><span class="token punctuation">)</span>      <span class="token comment">--分组</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>找出各省点击人数Top10的按钮？<blockquote><ol><li>取出 省份、按钮和 uv;</li><li>各省分组内，按照uv进行从大到小排序，并输出一列排序序号;</li><li>根据排序序号，取出排序前10的按钮和省份。 </li></ol></blockquote></li></ul> <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> province<span class="token punctuation">,</span>nbtn_name<span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token keyword">select</span>     province<span class="token punctuation">,</span>  <span class="token comment">--省份</span>    nbtn_name<span class="token punctuation">,</span> <span class="token comment">--按钮 </span>    uv<span class="token punctuation">,</span>        <span class="token comment">--uv</span>    dense_rank<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">over</span><span class="token punctuation">(</span><span class="token keyword">partition</span> <span class="token keyword">by</span> province <span class="token keyword">order</span> <span class="token keyword">by</span> uv  <span class="token keyword">DESC</span><span class="token punctuation">)</span> <span class="token keyword">as</span> ran <span class="token comment">--排序</span><span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token keyword">select</span>    province<span class="token punctuation">,</span>    nbtn_name<span class="token punctuation">,</span>    <span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">distinct</span> user_account<span class="token punctuation">)</span> <span class="token keyword">as</span> uv<span class="token keyword">from</span>     table1<span class="token keyword">where</span>     nbtn_name <span class="token operator">is</span> <span class="token operator">not</span> <span class="token boolean">null</span>      <span class="token operator">and</span>     hit_date <span class="token operator">=</span> <span class="token string">'2020-06-01'</span><span class="token keyword">group</span> <span class="token keyword">by</span>     province<span class="token punctuation">,</span>    nbtn_name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">where</span> ran <span class="token operator">between</span> <span class="token string">'1'</span> <span class="token operator">and</span> <span class="token string">'10'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>求连续3个月活跃的用户数</li></ul> <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">distinct</span> user_account<span class="token punctuation">)</span> <span class="token keyword">as</span> uv <span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token keyword">select</span> dt<span class="token punctuation">,</span>user_account<span class="token punctuation">,</span>dense_rank<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">over</span><span class="token punctuation">(</span><span class="token keyword">partition</span> <span class="token keyword">by</span> user_account <span class="token keyword">order</span> <span class="token keyword">by</span> dt<span class="token punctuation">)</span> <span class="token keyword">as</span> raws<span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">select</span> user_account<span class="token punctuation">,</span><span class="token keyword">month</span><span class="token punctuation">(</span>hit_date<span class="token punctuation">)</span>  <span class="token keyword">as</span> dt <span class="token keyword">from</span> table1<span class="token keyword">where</span> hit_date <span class="token operator">between</span> <span class="token string">'2020-04-01'</span> <span class="token operator">and</span> <span class="token string">'2020-06-31'</span><span class="token keyword">group</span> <span class="token keyword">by</span> user_account<span class="token punctuation">,</span> dt<span class="token punctuation">)</span> a1<span class="token punctuation">)</span> a2<span class="token punctuation">)</span><span class="token keyword">where</span> a2<span class="token punctuation">.</span>raws <span class="token operator">=</span> <span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>求4月连续7天进行签到的用户数<blockquote><ol><li>求出手机号和日期，并去重</li><li>根据手机号，对日期进行排序，并且日期和排序进行相减</li><li>对相减后得到的日期进行统计，并计算数量大于7的用户</li><li>对数量大于7的用户进行去重处理</li></ol></blockquote><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">distinct</span> user_account<span class="token punctuation">)</span> <span class="token keyword">as</span> uv <span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token keyword">select</span> user_account<span class="token punctuation">,</span>raw<span class="token punctuation">,</span><span class="token function">count</span><span class="token punctuation">(</span>raw<span class="token punctuation">)</span> <span class="token keyword">as</span> raw_1<span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token keyword">select</span> user_account<span class="token punctuation">,</span>hit_date<span class="token punctuation">,</span>date_sub<span class="token punctuation">(</span>hit_date<span class="token punctuation">,</span> row_number<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">over</span><span class="token punctuation">(</span><span class="token keyword">partition</span> <span class="token keyword">by</span> user_account <span class="token keyword">order</span> <span class="token keyword">by</span> hit_date<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token keyword">as</span> raw<span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token keyword">select</span>user_account<span class="token punctuation">,</span>hit_date<span class="token keyword">from</span> apache_computer_view<span class="token punctuation">.</span>client_android_log<span class="token keyword">where</span> hit_date <span class="token operator">between</span> <span class="token string">'2020-04-01'</span> <span class="token operator">and</span> <span class="token string">'2020-04-31'</span><span class="token keyword">group</span> <span class="token keyword">by</span> user_account<span class="token punctuation">,</span>hit_date<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">group</span> <span class="token keyword">by</span> user_account<span class="token punctuation">,</span>raw<span class="token punctuation">)</span><span class="token keyword">where</span> raw_1 <span class="token operator">&gt;=</span> <span class="token number">7</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><ol start="6"><li><strong>lag()和lead()函数</strong></li></ol><ul><li>查询顾客的上次购买时间</li></ul> <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span><span class="token punctuation">,</span>    lag<span class="token punctuation">(</span>orderdate<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">over</span><span class="token punctuation">(</span> partation <span class="token keyword">by</span> name <span class="token keyword">order</span> <span class="token keyword">by</span>  orderdate<span class="token punctuation">)</span><span class="token keyword">from</span>     business<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>查询顾客上次购买的时间, 与下次购买时间。相邻两个时间戳如何相减，求时间</li></ul> <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span><span class="token punctuation">,</span>    lag<span class="token punctuation">(</span>orderdate<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">over</span> <span class="token punctuation">(</span><span class="token keyword">partition</span> <span class="token keyword">by</span> name <span class="token keyword">order</span> <span class="token keyword">by</span> orderdate<span class="token punctuation">)</span> <span class="token keyword">as</span> up_date<span class="token punctuation">,</span>    lead<span class="token punctuation">(</span>orderdate<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">over</span> <span class="token punctuation">(</span><span class="token keyword">partition</span> <span class="token keyword">by</span> name <span class="token keyword">order</span> <span class="token keyword">by</span> orderdate<span class="token punctuation">)</span> <span class="token keyword">as</span> downdate<span class="token keyword">from</span>     business <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="7"><li> <strong>first_value()和last_value函数</strong></li></ol><ul><li>查询用户第一次购买时间和最后一次购买时间<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span>     <span class="token operator">*</span><span class="token punctuation">,</span>    first_value<span class="token punctuation">(</span>orderdate<span class="token punctuation">)</span> <span class="token keyword">over</span><span class="token punctuation">(</span><span class="token keyword">partition</span> <span class="token keyword">by</span> name <span class="token keyword">order</span> <span class="token keyword">by</span>  orderdate<span class="token punctuation">)</span> <span class="token keyword">as</span> first_date<span class="token punctuation">,</span>    last_value<span class="token punctuation">(</span>orderdate<span class="token punctuation">)</span> <span class="token keyword">over</span> <span class="token punctuation">(</span><span class="token keyword">partition</span> <span class="token keyword">by</span> name <span class="token keyword">order</span> <span class="token keyword">by</span> orderdate<span class="token punctuation">)</span> <span class="token keyword">as</span> last_date<span class="token keyword">from</span>     business<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="多表连接"><a href="#多表连接" class="headerlink" title="多表连接"></a>多表连接</h2><ol><li><strong>join</strong></li></ol><blockquote><p>Hive中Join的关联键必须在ON ()中指定，不能在Where中指定,ON 子句指定了两个表间数据进行连接的条件。</p></blockquote><p><img src="https://i.loli.net/2019/06/11/5cffb911ad8e183153.png" alt="join"></p><ul><li>对于多张表进行连接查询</li></ul> <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span>    <span class="token operator">*</span><span class="token keyword">FROM</span>    <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a <span class="token keyword">JOIN</span> b <span class="token keyword">ON</span> a<span class="token punctuation">.</span>ymd <span class="token operator">=</span> b<span class="token punctuation">.</span>ymd<span class="token punctuation">)</span>      <span class="token keyword">JOIN</span> c <span class="token keyword">ON</span> a<span class="token punctuation">.</span>ymd <span class="token operator">=</span> c<span class="token punctuation">.</span>ymd<span class="token punctuation">)</span>      <span class="token keyword">join</span> d <span class="token keyword">on</span> a<span class="token punctuation">.</span>ymd <span class="token operator">=</span> d<span class="token punctuation">.</span>ymd<span class="token punctuation">)</span>       <span class="token comment">---为什么条件内不将表 b 和表 c 进行连接操作， 因为 Hive总是按照从左到右的顺序来执行</span><span class="token keyword">WHERE</span>     a<span class="token punctuation">.</span> symbol <span class="token operator">=</span> <span class="token string">'Apple'</span>  <span class="token operator">AND</span> b<span class="token punctuation">.</span>symbol <span class="token operator">=</span> <span class="token string">'Ibm'</span> <span class="token operator">AND</span> c<span class="token punctuation">.</span>symbol <span class="token operator">=</span> <span class="token string">'Google'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li> <strong>并集：union 与 union all</strong></li></ol> <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">with</span> a1 <span class="token keyword">as</span> <span class="token punctuation">(</span>        <span class="token keyword">select</span>            user_account        <span class="token keyword">from</span>            <span class="token keyword">data</span>        <span class="token keyword">where</span>            hit_date <span class="token operator">between</span> <span class="token string">'2018-12-01'</span> <span class="token operator">and</span> <span class="token string">'2018-12-02'</span>            <span class="token operator">and</span>            nbtn_name <span class="token operator">like</span> <span class="token string">"%支付宝%"</span>        <span class="token keyword">union</span>         <span class="token keyword">select</span>            user_account        <span class="token keyword">from</span>            <span class="token keyword">data</span>        <span class="token keyword">where</span>            hit_date <span class="token operator">between</span> <span class="token string">'2018-12-01'</span> <span class="token operator">and</span> <span class="token string">'2018-12-02'</span>        <span class="token operator">and</span>        nbtn_name <span class="token operator">like</span> <span class="token string">"%手淘%"</span><span class="token punctuation">)</span><span class="token keyword">select</span>    <span class="token function">count</span><span class="token punctuation">(</span>user_account<span class="token punctuation">)</span> <span class="token keyword">as</span> pv<span class="token keyword">from</span>    a1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>union 与 union all 的不同：<blockquote><ul><li>union, 结果包含所有行， 并删除重复行</li><li>unoin all, 结果包含所有行， 但不删除重复行</li></ul></blockquote></li></ul><ol start="3"><li> <strong>交集：intersect</strong></li></ol> <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">with</span> a1 <span class="token keyword">as</span> <span class="token punctuation">(</span>        <span class="token keyword">select</span>            user_account        <span class="token keyword">from</span>            data1        <span class="token keyword">where</span>            hit_date <span class="token operator">between</span> <span class="token string">'2018-12-01'</span> <span class="token operator">and</span> <span class="token string">'2018-12-02'</span>            <span class="token operator">and</span>            nbtn_name <span class="token operator">like</span> <span class="token string">"%支付宝%"</span>        <span class="token keyword">intersect</span>        <span class="token keyword">select</span>            user_account        <span class="token keyword">from</span>            data1        <span class="token keyword">where</span>            hit_date <span class="token operator">between</span> <span class="token string">'2018-12-01'</span> <span class="token operator">and</span> <span class="token string">'2018-12-02'</span>        <span class="token operator">and</span>        nbtn_name <span class="token operator">like</span> <span class="token string">"%手淘%"</span><span class="token punctuation">)</span><span class="token keyword">select</span>    <span class="token function">count</span><span class="token punctuation">(</span>user_account<span class="token punctuation">)</span> <span class="token keyword">as</span> pv<span class="token keyword">from</span>    a1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li> <strong>差集：except</strong></li></ol> <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">with</span> a1 <span class="token keyword">as</span> <span class="token punctuation">(</span>        <span class="token keyword">select</span>            user_account        <span class="token keyword">from</span>            <span class="token keyword">data</span>        <span class="token keyword">where</span>            hit_date <span class="token operator">between</span> <span class="token string">'2018-12-01'</span> <span class="token operator">and</span> <span class="token string">'2018-12-25'</span>            <span class="token operator">and</span>            nbtn_name <span class="token operator">like</span> <span class="token string">"%支付宝%"</span>        <span class="token keyword">except</span>        <span class="token keyword">select</span>            user_account        <span class="token keyword">from</span>            <span class="token keyword">data</span>        <span class="token keyword">where</span>            hit_date <span class="token operator">between</span> <span class="token string">'2018-12-01'</span> <span class="token operator">and</span> <span class="token string">'2018-12-25'</span>        <span class="token operator">and</span>        nbtn_name <span class="token operator">like</span> <span class="token string">"%手淘%"</span><span class="token punctuation">)</span><span class="token keyword">select</span>    <span class="token function">count</span><span class="token punctuation">(</span>user_account<span class="token punctuation">)</span> <span class="token keyword">as</span> pv<span class="token keyword">from</span>    a1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h2><ol><li><p>select 子查询</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span>    shop_name<span class="token punctuation">,</span>    order_date<span class="token punctuation">,</span>    cost<span class="token punctuation">,</span>    <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token function">sum</span><span class="token punctuation">(</span>cost<span class="token punctuation">)</span> <span class="token keyword">from</span> business<span class="token punctuation">)</span> <span class="token keyword">as</span> sum_cost<span class="token keyword">from</span>     business<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>from 子查询</p></li></ol><ul><li>求连续3个月活跃的用户数</li></ul> <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">distinct</span> user_account<span class="token punctuation">)</span> <span class="token keyword">as</span> uv <span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token keyword">select</span> dt<span class="token punctuation">,</span>user_account<span class="token punctuation">,</span>dense_rank<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">over</span><span class="token punctuation">(</span><span class="token keyword">partition</span> <span class="token keyword">by</span> user_account <span class="token keyword">order</span> <span class="token keyword">by</span> dt<span class="token punctuation">)</span> <span class="token keyword">as</span> raws<span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">select</span> user_account<span class="token punctuation">,</span><span class="token keyword">month</span><span class="token punctuation">(</span>hit_date<span class="token punctuation">)</span>  <span class="token keyword">as</span> dt <span class="token keyword">from</span> table1<span class="token keyword">where</span> hit_date <span class="token operator">between</span> <span class="token string">'2020-04-01'</span> <span class="token operator">and</span> <span class="token string">'2020-06-31'</span><span class="token keyword">group</span> <span class="token keyword">by</span> user_account<span class="token punctuation">,</span> dt<span class="token punctuation">)</span> a1<span class="token punctuation">)</span> a2<span class="token punctuation">)</span><span class="token keyword">where</span> a2<span class="token punctuation">.</span>raws <span class="token operator">=</span> <span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>where 子查询</li></ol><ul><li>把平均成绩大于600的同学每次月考成绩提取出来<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span>    id<span class="token punctuation">,</span>    score<span class="token punctuation">,</span>    month_num<span class="token keyword">from</span>     table_score<span class="token keyword">where</span>     id <span class="token operator">in</span>     <span class="token punctuation">(</span>        <span class="token keyword">select</span>             id<span class="token punctuation">,</span> age<span class="token punctuation">(</span>score<span class="token punctuation">)</span>        <span class="token keyword">from</span>         table_score        <span class="token keyword">group</span> <span class="token keyword">by</span>             id        <span class="token keyword">having</span>            age<span class="token punctuation">(</span>score<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">600</span>    <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><ol start="4"><li>with 临时表</li></ol> <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">with</span> a1 <span class="token keyword">as</span> <span class="token punctuation">(</span>        <span class="token keyword">select</span>            user_account        <span class="token keyword">from</span>            <span class="token keyword">data</span>        <span class="token keyword">where</span>            hit_date <span class="token operator">between</span> <span class="token string">'2018-12-01'</span> <span class="token operator">and</span> <span class="token string">'2018-12-25'</span>            <span class="token operator">and</span>            nbtn_name <span class="token operator">like</span> <span class="token string">"%支付宝%"</span>        <span class="token keyword">except</span>        <span class="token keyword">select</span>            user_account        <span class="token keyword">from</span>            <span class="token keyword">data</span>        <span class="token keyword">where</span>            hit_date <span class="token operator">between</span> <span class="token string">'2018-12-01'</span> <span class="token operator">and</span> <span class="token string">'2018-12-25'</span>        <span class="token operator">and</span>        nbtn_name <span class="token operator">like</span> <span class="token string">"%手淘%"</span><span class="token punctuation">)</span><span class="token keyword">select</span>    <span class="token function">count</span><span class="token punctuation">(</span>user_account<span class="token punctuation">)</span> <span class="token keyword">as</span> pv<span class="token keyword">from</span>    a1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Hive避免数据倾斜"><a href="#Hive避免数据倾斜" class="headerlink" title="Hive避免数据倾斜"></a>Hive避免数据倾斜</h2><blockquote><ul><li>数据倾斜：当我们在Hive上进行查询时，因为数据的分散度不够， 导致大量数据集中在一台或者几台服务器上， 导致数据的计算速度远远低于平均计算速度， 计算过程特别耗时。</li><li>数据倾斜的表现：任务进度长时间维持在99%，查看任务监控页面，发现只有少量子任务未完成。</li></ul></blockquote><ol><li><strong>小表Join大表</strong></li></ol><ul><li>Hive 会假定查询中最后一个表是最大的表， 在对每行记录进行连续操作时， 它会尝试将其他表缓存起来，然后扫描最后那个表进行计算。因此，我们在查询时，要保证连续查询中的表的大小从左到右依次是增加的。<blockquote><ul><li>假如，在 a, b 两个表中，b表最小， 则 写sql时需让b表在左，a表在右：</li></ul></blockquote></li></ul> <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span>    a<span class="token punctuation">.</span>price_close<span class="token punctuation">,</span> b<span class="token punctuation">.</span>price_close<span class="token keyword">FROM</span>    b <span class="token keyword">JOIN</span> a <span class="token keyword">ON</span> b<span class="token punctuation">.</span>ymd <span class="token operator">=</span> a<span class="token punctuation">.</span>ymd <span class="token operator">AND</span> b<span class="token punctuation">.</span>symbol <span class="token operator">=</span> a<span class="token punctuation">.</span>symbol<span class="token keyword">WHERE</span>    a<span class="token punctuation">.</span>symbol <span class="token operator">=</span> <span class="token string">'APPLE'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span>    <span class="token comment">/*+3`'LKLLGFG Streamtable(a)*/</span> a<span class="token punctuation">.</span>price_close<span class="token punctuation">,</span> b<span class="token punctuation">.</span>price_close<span class="token comment">---Hive支持使用/*+STREAMTALBE*/语法指定哪张表是大表， 不需要排序</span><span class="token keyword">FROM</span>    a <span class="token keyword">JOIN</span> B <span class="token keyword">on</span> a<span class="token punctuation">.</span>ymd <span class="token operator">=</span> b<span class="token punctuation">.</span>ymd <span class="token operator">AND</span> a<span class="token punctuation">.</span>symbol <span class="token operator">=</span> b<span class="token punctuation">.</span>symbol<span class="token keyword">WHERE</span>    a<span class="token punctuation">.</span>symbol <span class="token operator">=</span> <span class="token string">'Apple'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li> <strong>大表JOIN大表</strong></li></ol><ul><li> 空key过滤 <blockquote><p>有时join超时是因为某些key对应的数据太多，而相同key对应的数据都会发送到相同的reducer上，从而导致内存不够。此时我们应该仔细分析这些异常的key，很多情况下，这些key对应的数据是异常数据，我们需要在sql语句中进行过滤。</p></blockquote></li></ul><ul><li> 空key转换 <blockquote><ul><li>有时虽然某个key为空对应的数据很多，但是相应的数据不是异常数据，必须要包含在join的结果中，此时我们可以表a中key为空的字段赋一个随机值，是的数据随机均匀地分布到不同的reducer上。</li><li>把空值的 key 变成一个字符串加上随机数，就能把倾斜的数据分到不同的 reduce 上 ,解决数据倾斜问题。</li></ul></blockquote></li></ul><ol start="3"><li> <strong>count(distinct) 去重统计</strong></li></ol><ul><li>数据量大时，由于count distinct 操作需要用一个 reduce task 来完成， 这一个reduce 需要处理的数据量太大，会导致整个job很难完成，一般 count distinct 使用先group by 再 count的方式替换。</li></ul> <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">distinct</span> id<span class="token punctuation">)</span> <span class="token keyword">from</span> bigtable<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre> <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token keyword">select</span> id <span class="token keyword">from</span> bigtable <span class="token keyword">group</span> <span class="token keyword">by</span> id<span class="token punctuation">)</span> a<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="4"><li> <strong>避免笛卡尔积</strong></li></ol><p> 尽量避免产生笛卡尔积，如join时不加on条件，或无效的on条件。hive只能使用1个reducer来完成笛卡尔积</p><ol start="5"><li> <strong>行列过滤</strong></li></ol><ul><li>列处理： 在查询中， 避免使用 select *, 使用条件限制取需要的列。</li><li> 行处理： 在分区剪裁中，当使用join外关联时，如果将副表的过滤条件写在where后面，那么就会先全表关联，之后再过滤, 这样会耗费资源。</li></ul><blockquote><p>优化前后<br> </p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> o<span class="token punctuation">.</span>id <span class="token keyword">from</span> bigtable b <span class="token keyword">join</span> ori o <span class="token keyword">on</span><span class="token punctuation">.</span>id <span class="token operator">=</span> b<span class="token punctuation">.</span>id <span class="token keyword">where</span> o<span class="token punctuation">.</span>id <span class="token operator">&lt;=</span><span class="token number">10</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p></p></blockquote> <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> b<span class="token punctuation">.</span>id <span class="token keyword">from</span> bigtable b<span class="token keyword">join</span> <span class="token punctuation">(</span><span class="token keyword">select</span> id <span class="token keyword">from</span> ori <span class="token keyword">where</span> id <span class="token operator">&lt;=</span><span class="token number">10</span><span class="token punctuation">)</span> o <span class="token keyword">on</span> b<span class="token punctuation">.</span>id <span class="token operator">=</span> o<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>优化前后</p></blockquote><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span>    a<span class="token punctuation">.</span>price_close<span class="token punctuation">,</span> b<span class="token punctuation">.</span>price_close<span class="token keyword">FROM</span>    b <span class="token keyword">JOIN</span> a <span class="token keyword">ON</span> b<span class="token punctuation">.</span>ymd <span class="token operator">=</span> a<span class="token punctuation">.</span>ymd <span class="token operator">AND</span> b<span class="token punctuation">.</span>symbol <span class="token operator">=</span> a<span class="token punctuation">.</span>symbol<span class="token keyword">WHERE</span>    s<span class="token punctuation">.</span>symbol <span class="token operator">=</span> <span class="token string">'APPLE'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span>    a<span class="token punctuation">.</span>price_close<span class="token punctuation">,</span> b<span class="token punctuation">.</span>price_close<span class="token keyword">FROM</span>    b <span class="token keyword">JOIN</span> a <span class="token keyword">ON</span> <span class="token punctuation">(</span> b<span class="token punctuation">.</span>ymd <span class="token operator">=</span> a<span class="token punctuation">.</span>ymd <span class="token operator">AND</span> b<span class="token punctuation">.</span>symbol <span class="token operator">=</span> a<span class="token punctuation">.</span>symbol <span class="token operator">and</span> s<span class="token punctuation">.</span>symbol <span class="token operator">=</span> <span class="token string">'APPLE'</span>  <span class="token comment">--正确的写法是将 where 条件写在 on 后面</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="6"><li> <strong>union all 子查询避免中使用 group by等</strong></li></ol><ul><li>union all 子查询避免中使用 group by【替换 count(distinct) 除外】、count(distinct)、max、min等。</li></ul> <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">with</span> a1 <span class="token keyword">as</span> <span class="token punctuation">(</span>        <span class="token keyword">select</span>            user_account<span class="token punctuation">,</span>            hit_date        <span class="token keyword">from</span>            <span class="token keyword">data</span>        <span class="token keyword">where</span>            hit_date <span class="token operator">between</span> <span class="token string">'2018-12-01'</span> <span class="token operator">and</span> <span class="token string">'2018-12-13'</span>            <span class="token operator">and</span>            nbtn_name <span class="token operator">like</span> <span class="token string">"%支付宝%"</span>        <span class="token keyword">union</span> <span class="token keyword">all</span>         <span class="token keyword">select</span>            user_account<span class="token punctuation">,</span>            hit_date        <span class="token keyword">from</span>            <span class="token keyword">data</span>        <span class="token keyword">where</span>            hit_date <span class="token operator">between</span> <span class="token string">'2018-12-01'</span> <span class="token operator">and</span> <span class="token string">'2018-12-13'</span>        <span class="token operator">and</span>        nbtn_name <span class="token operator">like</span> <span class="token string">"%支付宝%"</span><span class="token punctuation">)</span><span class="token keyword">select</span>    hit_date<span class="token punctuation">,</span>    <span class="token function">count</span><span class="token punctuation">(</span>user_account<span class="token punctuation">)</span> <span class="token keyword">as</span> pv<span class="token keyword">from</span>    a1<span class="token keyword">group</span> <span class="token keyword">by</span>    hit_date<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="7"><li> <strong>避免不同数据类型进行关联</strong></li></ol><ul><li>使用CAST函数对数据类型进行转换，语法为cast(value AS TYPE)</li></ul> <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span>     a<span class="token punctuation">.</span>price_close<span class="token punctuation">,</span>    b<span class="token punctuation">.</span>price_close<span class="token keyword">from</span>    a <span class="token keyword">join</span> b  <span class="token keyword">on</span> a<span class="token punctuation">.</span>user_id <span class="token operator">=</span> cast<span class="token punctuation">(</span>b<span class="token punctuation">.</span>user_id <span class="token keyword">as</span> string<span class="token punctuation">)</span><span class="token keyword">where</span>    hit_date <span class="token operator">between</span> <span class="token string">'2018-11-01'</span> <span class="token operator">and</span> <span class="token string">'2018-11-02'</span>    <span class="token operator">and</span>     a<span class="token punctuation">.</span>symbol <span class="token operator">=</span> <span class="token string">'apple'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Hive的查询注意事项以及优化总结： 1. 尽量尽早过滤数据，减少每个阶段的数据量。对于分区表要加分区，同时只选择需要使用到的字段</p><ol><li>对历史库的计算经验</li><li>尽量原子化操作，尽量避免一个SQL包含复杂逻辑，可以使用中间表来完成复杂的逻辑</li><li>join操作 小表要注意放在join的左边，否则会引起磁盘和内存的大量消耗</li><li>如果union all的部分个数大于2，或者每个union部分数据量大，应该拆成多个insert into语句，实际测试过程中，执行时间能提升50%</li></ol><h2 id="用python脚本连接数据库"><a href="#用python脚本连接数据库" class="headerlink" title="用python脚本连接数据库"></a>用python脚本连接数据库</h2><p>作为一名数据分析师，日报、周报、月报数据一个也不能少。 相应的， 就要在数据库中提取大量的数据， 并处理大量的Excel表格。</p><p>在提取和处理数据的过程中， 对于一些重复性的劳动， 写个Python脚本来实现半自动化， 能够大幅提高自己的工作效率。 以下是自己工作中的一点总结经验。 </p><!-- 对于数据库的ip地址，用户名，密码等， 如果不清楚，或数据库连接不上， 需要和开发人员对接 --><ol><li><p>首先， 用Python连接数据库</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pyhive <span class="token keyword">import</span> hive <span class="token keyword">import</span> timeconn <span class="token operator">=</span> hive<span class="token punctuation">.</span>Connection<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'ip地址'</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">10000</span><span class="token punctuation">,</span> username<span class="token operator">=</span><span class="token string">'用户名'</span><span class="token punctuation">,</span> database <span class="token operator">=</span> <span class="token string">'default'</span><span class="token punctuation">,</span> auth<span class="token operator">=</span><span class="token string">'NOSASL'</span><span class="token punctuation">)</span>cursor <span class="token operator">=</span> conn<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 获得连接的游标</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>设置开始和结束时间 可以用python中的time函数设置时间</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">startdate <span class="token operator">=</span> <span class="token string">'2018-09-01'</span>enddate   <span class="token operator">=</span> <span class="token string">'2018-09-19'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>用Python中的format函数将日期传入{}中</p><ul><li>python中写sql脚本时， 需要用\来进行换行符的转换, \后面不能有空格。日期用两个{}来代替， 用format函数将开始日期与结束日期传入</li></ul></li></ol> <pre class="line-numbers language-python" data-language="python"><code class="language-python">sql_jifenxinxi_an <span class="token operator">=</span> <span class="token triple-quoted-string string">"""select     count(distinct user_account) as uv,     count(1) as pv from     computer_view.data where     hit_date between "{}" and "{}"     and     (btn_position like "服务-查询-积分信息%"     or     btn_home = "积分-扇形左"     ) limit 1000"""</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>startdate<span class="token punctuation">,</span>enddate<span class="token punctuation">)</span><span class="token comment"># format 插入时间</span>cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql_jifenxinxi_an<span class="token punctuation">)</span><span class="token comment"># 运行此语句</span>cursor<span class="token punctuation">.</span>fetchall<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#fetchall():接收全部的返回结果行.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><!-- 我们可以按照这个格式写工作中需要运行的多个SQL语句。 这样， 当脚本运行的时候， 我们可以腾出时间来去干其他工作， 等过一段时间，所有的SQL语句都跑完了， 我们再进行统一的整理。 --><hr><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li><a href="https://mp.weixin.qq.com/s/Xw5DOHHGh838w8YXT9lO5g">讲讲 group 的plus版-张俊红</a></li><li>《对比excel,轻松学sql数据分析》</li><li>hive入门-视频课程</li></ol><iframe width="560" height="315" src="https://www.youtube.com/embed/9otkcuic-2o" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe>]]></content>
      
      
      <categories>
          
          <category> SQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python-Pandas库学习</title>
      <link href="/2020/06/01/2020-08-12-%E6%8A%80%E8%83%BD-Python-pandas%E5%BA%93%E5%AD%A6%E4%B9%A0-2/"/>
      <url>/2020/06/01/2020-08-12-%E6%8A%80%E8%83%BD-Python-pandas%E5%BA%93%E5%AD%A6%E4%B9%A0-2/</url>
      
        <content type="html"><![CDATA[<h2 id="读取与写入Excel数据"><a href="#读取与写入Excel数据" class="headerlink" title="读取与写入Excel数据"></a>读取与写入Excel数据</h2><ul><li><a href="https://blog.csdn.net/m0_37693335/article/details/81474995">相对路径与绝对路径</a></li></ul><ol><li>读取文件夹内容<blockquote><p>r（转义符）避免路径中的\被转义。路径中不加 \ 则需要把所有的\写成/。</p></blockquote></li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">from</span> pandas <span class="token keyword">import</span> Series<span class="token punctuation">,</span> DataFrame<span class="token keyword">import</span> osfile_list <span class="token operator">=</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span><span class="token string">r'E:\工作文件\周报\周数据\测试\0902-0908'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>file_list<span class="token punctuation">,</span> <span class="token string">'\t'</span><span class="token punctuation">)</span><span class="token comment"># 读取当前文件夹地址</span>os<span class="token punctuation">.</span>getcwd<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>读取xls格式Excel表</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_excel<span class="token punctuation">(</span><span class="token string">'E:/工作文件/an-商品汇总-uv.xls'</span><span class="token punctuation">)</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_excel<span class="token punctuation">(</span><span class="token string">r'E:\工作文件\an-商品汇总-uv.xls'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="3"><li>读取csv格式Excel表</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'E:/工作文件/周报/周数据/测试/0902-0908/商品汇总.csv'</span><span class="token punctuation">)</span><span class="token comment"># 读取csv文件，并用 分隔符分割</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">r'E:\商品汇总.csv'</span><span class="token punctuation">,</span> sep <span class="token operator">=</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token comment"># 只读取文件前两行</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">r'E:\商品汇总.csv'</span><span class="token punctuation">,</span> nrows <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li> 读取显示编码错误</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 修改方式</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span>path <span class="token operator">+</span> <span class="token string">'登记用户 20191127.csv'</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">"gbk"</span> <span class="token punctuation">)</span><span class="token comment"># 当文件路径包含中文解析错误时，设置 engine 参数来消除这个错误</span><span class="token comment"># 错误原因， 当调用read_csv方法时，默认使用C语言作为解析语言，只需要将默认值c语言更改为python</span><span class="token comment"># 如果文件格式是  csv usf-8, 那么编码也改为 utf-8-sig</span><span class="token comment"># 如果文件格式是 csv格式， 则编码格式为 gbk</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'登记用户 20191127.csv'</span><span class="token punctuation">,</span> engine <span class="token operator">=</span> <span class="token string">'python'</span><span class="token punctuation">,</span> encoding <span class="token operator">=</span> <span class="token string">'utf-8-sig'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>读取txt格式数据</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_table<span class="token punctuation">(</span><span class="token string">r'C:\Users\Administrator\Desktop\haha.txt'</span><span class="token punctuation">,</span> sep <span class="token operator">=</span> <span class="token string">' '</span><span class="token punctuation">)</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">r'C:\Users\Administrator\Desktop\haha.txt'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    df <span class="token operator">=</span> f<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span> df <span class="token operator">=</span> np<span class="token punctuation">.</span>loadtxt<span class="token punctuation">(</span><span class="token string">r'C:\Users\Administrator\Desktop\haha.txt'</span><span class="token punctuation">)</span>  <span class="token comment"># 将txt文件存为numpy数组</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="5"><li>读取excel中的sheet名称</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_Excel<span class="token punctuation">(</span><span class="token string">r'E:\工作文件\an-商品汇总-uv.xlsx'</span><span class="token punctuation">,</span> sheet_name <span class="token operator">=</span> <span class="token string">'sheet1'</span><span class="token punctuation">)</span><span class="token comment"># 传入sheet的顺序，从0开始计数</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_Excel<span class="token punctuation">(</span><span class="token string">r'E:\工作文件\an-商品汇总-uv.xlsx'</span><span class="token punctuation">,</span> sheet_name <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token comment"># 读取sheet,并制定文件中的第几行做行索引</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_Excel<span class="token punctuation">(</span><span class="token string">r'E:\工作文件\an-商品汇总-uv.xlsx'</span><span class="token punctuation">,</span> sheet_name <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> index_col <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token comment"># 读取sheet文件， 并制定文件中的第几列做列索引</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_Excel<span class="token punctuation">(</span><span class="token string">r'E:\工作文件\商品汇总.xlsx'</span><span class="token punctuation">,</span> sheet_name <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> head <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token comment"># 当本地文件过多时，可以通过设定 usecols 参数来指定要导入的列</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_Excel<span class="token punctuation">(</span><span class="token string">r'E:\商品汇总.xlsx'</span><span class="token punctuation">,</span> usecols <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token comment"># uescols = [0,2]</span><span class="token comment"># 读取excel中所有sheet，并进行合并</span>rbook <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>kong_data <span class="token operator">=</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span><span class="token string">r'F:\省资源位'</span><span class="token punctuation">)</span><span class="token keyword">for</span> file_name <span class="token keyword">in</span> kong_data<span class="token punctuation">:</span>    data_excel <span class="token operator">=</span> pd<span class="token punctuation">.</span>ExcelFile<span class="token punctuation">(</span><span class="token string">r'F:\省资源位\\'</span><span class="token operator">+</span>file_name<span class="token punctuation">)</span>    sheet <span class="token operator">=</span> data_excel<span class="token punctuation">.</span>sheet_names    <span class="token keyword">for</span> i <span class="token keyword">in</span> sheet<span class="token punctuation">:</span>        data_button_rest <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_excel<span class="token punctuation">(</span><span class="token string">r'F:\省资源位\\'</span><span class="token operator">+</span>file_name<span class="token punctuation">,</span> sheet_name<span class="token operator">=</span> i <span class="token punctuation">)</span>        rbook<span class="token punctuation">.</span>append<span class="token punctuation">(</span>data_button_rest<span class="token punctuation">)</span>        result_df <span class="token operator">=</span>pd<span class="token punctuation">.</span>concat<span class="token punctuation">(</span>rbook<span class="token punctuation">)</span>datas_excel <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>result_df<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>将运行的所有数据都展现出来， 而不是只展现最后一条</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span>  IPython<span class="token punctuation">.</span>core<span class="token punctuation">.</span>interactiveshell <span class="token keyword">import</span> InteractiveShellInteractiveShell<span class="token punctuation">.</span>ast_node_interactivity <span class="token operator">=</span> <span class="token string">"all"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="6"><li>将数据写入Excel表， 并输出</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 写入数据</span>df<span class="token punctuation">.</span>to_excel<span class="token punctuation">(</span><span class="token string">'C:/Users/Administrator/Desktop/'</span><span class="token operator">+</span><span class="token string">'商品分类.xlsx'</span><span class="token punctuation">)</span>df<span class="token punctuation">.</span>to_excel<span class="token punctuation">(</span><span class="token string">r'C:\Users\Administrator\Desktop\\'</span><span class="token operator">+</span><span class="token string">'商品分类.xlsx'</span><span class="token punctuation">)</span>df<span class="token punctuation">.</span>to_excel<span class="token punctuation">(</span><span class="token string">r'C:\Users\Administrator\Desktop/'</span><span class="token operator">+</span><span class="token string">'商品分类.xlsx'</span><span class="token punctuation">)</span><span class="token comment"># 写入数据，且不带索引</span>df<span class="token punctuation">.</span>to_excel<span class="token punctuation">(</span><span class="token string">'C:/Users/商品分类.xlsx'</span><span class="token punctuation">,</span> sheet_name <span class="token operator">=</span> <span class="token string">'首页'</span><span class="token punctuation">,</span> index <span class="token operator">=</span> <span class="token boolean">False</span><span class="token punctuation">)</span><span class="token comment"># 设置要导出的列</span>df<span class="token punctuation">.</span>to_excel<span class="token punctuation">(</span><span class="token string">'C:/Users/商品分类.xlsx'</span><span class="token punctuation">,</span> sheet_name <span class="token operator">=</span> <span class="token string">'首页'</span><span class="token punctuation">,</span> index <span class="token operator">=</span> <span class="token boolean">False</span><span class="token punctuation">,</span>           columns <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'ID'</span><span class="token punctuation">,</span> '销量’<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 设置编码格式</span>df<span class="token punctuation">.</span>to_excel<span class="token punctuation">(</span><span class="token string">'C:/Users/商品分类.xlsx'</span><span class="token punctuation">,</span> sheet_name <span class="token operator">=</span> <span class="token string">'首页'</span><span class="token punctuation">,</span> index <span class="token operator">=</span> <span class="token boolean">False</span><span class="token punctuation">,</span>           encoding <span class="token operator">=</span> <span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token comment"># 缺失值、无穷值处理</span>df<span class="token punctuation">.</span>to_excel<span class="token punctuation">(</span><span class="token string">'C:/Users/商品分类.xlsx'</span><span class="token punctuation">,</span> sheet_name <span class="token operator">=</span> <span class="token string">'首页'</span><span class="token punctuation">,</span> index <span class="token operator">=</span> <span class="token boolean">False</span><span class="token punctuation">,</span>           na_rep <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token comment"># 缺失值用0填充</span>           inf_rep <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment"># 无穷之用0填充</span>           <span class="token punctuation">)</span><span class="token comment"># 导出csv文件，设置分隔符</span>df<span class="token punctuation">.</span>to_excel<span class="token punctuation">(</span><span class="token string">'C:/Users/商品分类.xlsx'</span><span class="token punctuation">,</span> sheet_name <span class="token operator">=</span> <span class="token string">'首页'</span><span class="token punctuation">,</span> index <span class="token operator">=</span> <span class="token boolean">False</span><span class="token punctuation">,</span>            sep <span class="token operator">=</span> <span class="token string">','</span>           <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>将求出的数据存储在excel中的多个sheet中</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">from</span> openpyxl <span class="token keyword">import</span> load_workbook writer <span class="token operator">=</span> pd<span class="token punctuation">.</span>ExcelWriter<span class="token punctuation">(</span><span class="token string">'F:/notebooks/zhoushuju.xlsx'</span><span class="token punctuation">)</span>btn_navigation<span class="token punctuation">.</span>to_excel<span class="token punctuation">(</span>writer<span class="token punctuation">,</span> sheet_name <span class="token operator">=</span> <span class="token string">'底部导航'</span><span class="token punctuation">)</span>shouye_top20<span class="token punctuation">.</span>to_excel<span class="token punctuation">(</span>writer<span class="token punctuation">,</span> sheet_name <span class="token operator">=</span> <span class="token string">'首页top20'</span><span class="token punctuation">)</span>writer<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span>writer<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="7"><li>其他数据格式</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 从SQL表/库导入数据 </span><span class="token keyword">import</span> pymysqleng <span class="token operator">=</span> pymysql<span class="token punctuation">.</span>connet<span class="token punctuation">(</span>host<span class="token operator">=</span> <span class="token string">'100.129'</span><span class="token punctuation">,</span> user <span class="token operator">=</span> <span class="token string">'root'</span><span class="token punctuation">,</span> password <span class="token operator">=</span> <span class="token string">'1234'</span><span class="token punctuation">,</span> df <span class="token operator">=</span> <span class="token string">'db'</span><span class="token punctuation">,</span> charset <span class="token operator">=</span> <span class="token string">'ugf8'</span><span class="token punctuation">)</span>query <span class="token operator">=</span> <span class="token triple-quoted-string string">"""select * from android_log """</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_sql<span class="token punctuation">(</span>query<span class="token punctuation">,</span> eng<span class="token punctuation">)</span><span class="token comment"># 导出数据到SQL表 </span>df<span class="token punctuation">.</span>to_sql<span class="token punctuation">(</span>table_name<span class="token punctuation">,</span> eng<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="8"><li>常见问题</li></ol><ul><li>当文件有中文时， 可能会出现错误：Initializing from file failed 有中文， 可以用此方法解决</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span>‘我的文件<span class="token punctuation">.</span>csv’<span class="token punctuation">)</span>res <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span>f<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>查看大文件有多少列</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">data <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'E:/用户明细.csv'</span><span class="token punctuation">)</span>data1 <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span>data<span class="token punctuation">,</span> iterator<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>data2 <span class="token operator">=</span> data1<span class="token punctuation">.</span>get_chunk<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>data2<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><a href="http://wiki.jikexueyuan.com/project/explore-python/Advanced-Features/iterator.html">迭代器</a></p><h1 id="对输出数据进行处理"><a href="#对输出数据进行处理" class="headerlink" title="对输出数据进行处理"></a>对输出数据进行处理</h1><p><a href="https://www.jianshu.com/p/5c0aa1fa19af">pandas的数据输出显示设置</a></p><ol><li>对表中某一列元素进行相同操作</li></ol><pre class="line-numbers language-none"><code class="language-none">df['金额'].apply(lambda x:x+1)df['金额'] +2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="2"><li>对表中每一个元素进行相同操作</li></ol><pre class="line-numbers language-none"><code class="language-none">df.applymap(lambda x:x+1)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pddf <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">150</span><span class="token punctuation">,</span> <span class="token number">150</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># pd.set_option('expand_frame_repr', False) #数据超过总宽度后，是否折叠显示</span>pd<span class="token punctuation">.</span>set_option<span class="token punctuation">(</span><span class="token string">'display.width'</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token comment">#数据显示总宽度</span>pd<span class="token punctuation">.</span>set_option<span class="token punctuation">(</span><span class="token string">'max_rows'</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token comment">#显示最多行数，超出该数以省略号表示</span>pd<span class="token punctuation">.</span>set_option<span class="token punctuation">(</span><span class="token string">'max_columns'</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token comment">#显示最多列数，超出该数以省略号表示</span>pd<span class="token punctuation">.</span>set_option<span class="token punctuation">(</span><span class="token string">'max_colwidth'</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token comment">#设置单列的宽度，用字符个数表示，单个数据长度超出该数时以省略号表示</span>pd<span class="token punctuation">.</span>set_option<span class="token punctuation">(</span><span class="token string">'large_repr'</span><span class="token punctuation">,</span> <span class="token string">'truncate'</span><span class="token punctuation">)</span> <span class="token comment">#数据超过设置显示最大行列数时，带省略号显示/若是info则是统计信息显示</span>pd<span class="token punctuation">.</span>set_option<span class="token punctuation">(</span><span class="token string">'show_dimensions'</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">)</span> <span class="token comment">#当数据带省略号显示时，是否在最后显示数据的维度</span><span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">)</span>pd<span class="token punctuation">.</span>set_option<span class="token punctuation">(</span><span class="token string">'max_info_columns'</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token comment">#当列数超过这个值时，调用df.info()函数时不会统计每列的非空值。</span><span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>将数据变成小数形式<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd inputfile <span class="token operator">=</span> <span class="token string">'../data/electricity_data.xls'</span>outputfile <span class="token operator">=</span> <span class="token string">'./electricity_data_analyze1.xls'</span> data <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_excel<span class="token punctuation">(</span>inputfile<span class="token punctuation">)</span>data<span class="token punctuation">[</span><span class="token string">u'线损率'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token string">u'供入电量'</span><span class="token punctuation">]</span><span class="token operator">-</span>data<span class="token punctuation">[</span><span class="token string">u'供出电量'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">/</span>data<span class="token punctuation">[</span><span class="token string">u'供入电量'</span><span class="token punctuation">]</span>    <span class="token comment">#data[u'线损率']的类型为series； data[u'线损率']为小数</span>data<span class="token punctuation">[</span><span class="token string">u'线损率'</span><span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">u'线损率'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> <span class="token builtin">format</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token string">'.2%'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">#Series.apply()让序列的值依次在lambda函数中执行； data['线损率']由小数转化为百分数</span> data<span class="token punctuation">.</span>to_excel<span class="token punctuation">(</span>outputfile<span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>``` <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token comment">## 描述数据</span><span class="token number">1</span><span class="token punctuation">.</span> 表信息```pythondf<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><ol start="2"><li>显示数据的行列数</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">df<span class="token punctuation">.</span>shape<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>查看数据格式dtpyes</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">df<span class="token punctuation">.</span>dtypes<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="4"><li>显示列名、元素</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">df<span class="token punctuation">.</span>columnsdf<span class="token punctuation">.</span>values<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="5"><li> 添加默认列名</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 如果数据没有标题行，可用pandas添加默认的列名</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_excel<span class="token punctuation">(</span><span class="token string">'x.xlsx'</span><span class="token punctuation">,</span> header <span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="6"><li> 显示前数据前5行</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">df<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>df<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'标题'</span><span class="token punctuation">,</span> <span class="token string">'客户端uv'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="7"><li>显示数据后5行</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">df<span class="token punctuation">.</span>tail<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="8"><li>值</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">df<span class="token punctuation">.</span>values<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="9"><li>读取a列</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">df<span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="10"><li>找到重复值</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">df<span class="token punctuation">.</span>duplicated<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="11"><li> 显示数据唯一值（unique函数）</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 数据有0， 是因对缺失值进行了填充</span>df<span class="token punctuation">[</span><span class="token string">'经纪人级别'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>unique<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="12"><li>对第几行数据不读取</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#不读取哪里数据，可用skiprows=[i]，跳过文件的第i行不读取</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_excel<span class="token punctuation">(</span><span class="token string">'x.xlsx'</span><span class="token punctuation">,</span>skiprows<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="13"><li> 对缺失值进行识别</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 所有缺失值显示为True</span>pd<span class="token punctuation">.</span>insull<span class="token punctuation">(</span>df<span class="token punctuation">)</span>  <span class="token comment"># df.isnull()</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="14"><li>计算</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#计算此data的数量</span>df<span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value_counts<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 升序计数</span>df<span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value_counts<span class="token punctuation">(</span>ascending <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment"># 升序计数并分组</span>df<span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value_counts<span class="token punctuation">(</span>ascending <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">,</span> bins <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token comment"># 计数</span>df<span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="15"><li>字符和数值之间的转化</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 转化成整数</span><span class="token builtin">float</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 转化成整数</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 转化成整数</span><span class="token builtin">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 转化成整数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="16"><li> 获取数据分布情况</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">data<span class="token punctuation">.</span>describe<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="数据清洗"><a href="#数据清洗" class="headerlink" title="数据清洗"></a>数据清洗</h2><ol><li><p>删除空值 （dropna函数）</p><p>  <a href="https://blog.csdn.net/yuanxiang01/article/details/78738812">DataFrame中的空值处理</a></p></li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">df<span class="token punctuation">.</span>dropna<span class="token punctuation">(</span>how<span class="token operator">=</span><span class="token string">'any'</span><span class="token punctuation">)</span>df<span class="token punctuation">.</span>dropna<span class="token punctuation">(</span>how <span class="token operator">=</span> <span class="token string">'all'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">用法：DataFrame.drop(labels=None,axis=0, index=None, columns=None, inplace=False)参数说明：labels 就是要删除的行列的名字，用列表给定axis 默认为0，指删除行，因此删除columns时要指定axis=1；index 直接指定要删除的行columns 直接指定要删除的列inplace=False，默认该删除操作不改变原数据，而是返回一个执行删除操作后的新dataframe；inplace=True，则会直接在原数据上进行删除操作，删除后无法返回。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none"># 删除包含 集团 二字 的行read_data = df[- df['所属省份名称'].isin(['集团'])] <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="2"><li>数值删除</li></ol><ul><li>删除列</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 删除列, axis=1表示删除列</span>df<span class="token punctuation">.</span>drop<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"销售额"</span><span class="token punctuation">,</span> <span class="token string">"ID"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> axis <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span>df<span class="token punctuation">.</span>drop<span class="token punctuation">(</span>columns <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"销售额"</span><span class="token punctuation">,</span> <span class="token string">"ID"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 传入列位置</span>df<span class="token punctuation">.</span>drop<span class="token punctuation">(</span>df<span class="token punctuation">.</span>columns<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> axis <span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>删除行</li></ul><pre class="line-numbers language-none"><code class="language-none"># 删除行，筛选行名df.drop(['一','二'], axis = 0)df.drop(index = ['一', '二'])# 删除行，筛选行索引df.drop(df.index[[0,1]], axis = 0)# 只要年龄小于40的用户df[df['ID'] &lt; 40]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li> 填充（fillna函数）</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 空值用0填充</span>df<span class="token punctuation">.</span>fillna<span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>df<span class="token punctuation">.</span>replace<span class="token punctuation">(</span>np<span class="token punctuation">.</span>NaN<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token comment"># 用均值对空值进行填充</span>df<span class="token punctuation">[</span><span class="token string">'时长'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token string">'时长'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 按照不同列进行填充</span>df<span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'性别'</span> <span class="token punctuation">:</span> <span class="token string">'男'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>更改数据格式，更改数据类型</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 将数据格式int64,改为float格式</span>df<span class="token punctuation">[</span><span class="token string">'大区'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token string">'float64'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="5"><li>更改列名称, 修改列名。 </li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">df<span class="token punctuation">.</span>columns <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'导航'</span><span class="token punctuation">,</span><span class="token string">'uv'</span><span class="token punctuation">,</span> <span class="token string">'pv'</span><span class="token punctuation">,</span><span class="token string">'户均点击'</span><span class="token punctuation">]</span><span class="token punctuation">]</span>df<span class="token punctuation">.</span>rename<span class="token punctuation">(</span>columns<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'IM渠道'</span><span class="token punctuation">:</span> <span class="token string">'渠道'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="6"><li>添加修改索引</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 添加索引</span>df<span class="token punctuation">.</span>index <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token comment"># 修改索引,重新设置</span>df <span class="token operator">=</span> df<span class="token punctuation">.</span>set_index<span class="token punctuation">[</span><span class="token string">'标题'</span><span class="token punctuation">]</span><span class="token comment"># 重命名索引</span>df<span class="token punctuation">.</span>rename <span class="token punctuation">(</span>index <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">:</span> <span class="token string">'一'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li> 重置索引</li></ul><p><img src="https://i.loli.net/2019/12/21/C7cxnGMVfFDeLEX.jpg" alt="图1"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">DataFrame<span class="token punctuation">.</span>reset_index<span class="token punctuation">(</span>level<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> drop<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> inplace<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token comment"># 默认将所有index转化成columns</span>df<span class="token punctuation">.</span>reset_index<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#将第0级索引转化为 columns</span>df<span class="token punctuation">.</span>reset_index<span class="token punctuation">(</span>level<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment"># 将原索引删除，不加入columns</span>df<span class="token punctuation">.</span>reset_index<span class="token punctuation">(</span>drop <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="7"><li><p>删除重复值</p><p> <a href="https://www.cnblogs.com/cocowool/p/8421997.html">Pandas删除数据的几种情况</a></p></li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 默认第一次出现的保留，其余删除</span>df<span class="token punctuation">[</span><span class="token string">'门店'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>drop_duplicates<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 最后一次出现的保留，其余删除</span>df<span class="token punctuation">[</span><span class="token string">'门店'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>drop_duplicates<span class="token punctuation">(</span>keep <span class="token operator">=</span> <span class="token string">'last'</span><span class="token punctuation">)</span><span class="token comment"># 多列去重</span>df<span class="token punctuation">.</span>drop_duplicates<span class="token punctuation">(</span>subset <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'姓名'</span><span class="token punctuation">,</span> <span class="token string">'唯一识别码'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="8"><li>对列表内的值进行替换</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 一对一替换</span>df<span class="token punctuation">[</span><span class="token string">'ID'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'1053'</span><span class="token punctuation">,</span> <span class="token string">'110'</span><span class="token punctuation">)</span><span class="token comment"># 多对一替换</span>df<span class="token punctuation">[</span><span class="token string">'ID'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'1053'</span><span class="token punctuation">:</span> <span class="token string">'110'</span><span class="token punctuation">,</span> <span class="token string">'230'</span><span class="token punctuation">:</span> <span class="token string">'33'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>df<span class="token punctuation">.</span>columns<span class="token punctuation">.</span><span class="token builtin">str</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">,</span> <span class="token string">'_'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="对数据进行处理"><a href="#对数据进行处理" class="headerlink" title="对数据进行处理"></a>对数据进行处理</h2><ol><li>对两个数据进行合并- merge, join, concat函数</li></ol><ul><li>merge</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 按照轴把多个对象拼接起来</span>pd<span class="token punctuation">.</span>concat<span class="token punctuation">(</span>df1<span class="token punctuation">,</span> df2<span class="token punctuation">)</span><span class="token comment"># join函数适合根据索引进行合并，合并索引相同但列不同的对象</span><span class="token comment"># merge函数，根据一个或多个键连接多行, 相当于excel中的vlookup</span><span class="token comment"># 将left和right进行合并</span>pd<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token comment"># 指定以key为键进行合并</span>pd<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">,</span> on <span class="token operator">=</span> <span class="token string">'key'</span><span class="token punctuation">)</span> pd<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>name_3<span class="token punctuation">,</span> name_1<span class="token punctuation">,</span> left_on <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'ming'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> right_on <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'标记'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># key2列不相同的部分会直接舍弃掉</span>pd<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">,</span> on <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'key'</span><span class="token punctuation">,</span> <span class="token string">'key2'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 保留key2列不相同的部分</span>pd<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">,</span> on <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'key'</span><span class="token punctuation">,</span> <span class="token string">'key2'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> how <span class="token operator">=</span> <span class="token string">'outer'</span><span class="token punctuation">)</span><span class="token comment"># 不相同的部分指定以左表为基准</span>pd<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">,</span> on <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'key'</span><span class="token punctuation">,</span> <span class="token string">'key2'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> how <span class="token operator">=</span> <span class="token string">'left'</span><span class="token punctuation">)</span><span class="token comment"># 重复列名处理</span><span class="token comment"># pd.merge()会自动给这些重复名添加后缀_x、_y，也可以自己命名。</span>pd<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>df1<span class="token punctuation">,</span>df2<span class="token punctuation">,</span> on <span class="token operator">=</span> <span class="token string">'id'</span><span class="token punctuation">,</span> suffixes<span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'_L'</span><span class="token punctuation">,</span> <span class="token string">'_R'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">#按照索引进行合并</span>pd<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>df1<span class="token punctuation">,</span>df2<span class="token punctuation">,</span>left_index<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>right_index<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li> concat函数, 按照标题进行拼接</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 普通合并</span>pd<span class="token punctuation">.</span>concat<span class="token punctuation">(</span><span class="token punctuation">[</span>df1<span class="token punctuation">,</span> df2<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 索引设置</span>pd<span class="token punctuation">.</span>concat<span class="token punctuation">(</span><span class="token punctuation">[</span>df1<span class="token punctuation">,</span> df2<span class="token punctuation">]</span><span class="token punctuation">,</span> ignore_index<span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment"># 合并后删除重复值</span>pd<span class="token punctuation">.</span>concat<span class="token punctuation">(</span><span class="token punctuation">[</span>df1<span class="token punctuation">,</span> df2<span class="token punctuation">]</span><span class="token punctuation">,</span> ignore_index <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">.</span>drop_duplicates<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>对数据进行排序</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 按照ID进行升序排列</span><span class="token comment"># 按照ID进行降序排列</span>df<span class="token punctuation">.</span>sort_values<span class="token punctuation">(</span>by <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'ID'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ascending <span class="token operator">=</span> <span class="token boolean">False</span><span class="token punctuation">)</span><span class="token comment"># 在保证销售额列降序的情况下，对ID列进行升序处理</span>data<span class="token punctuation">.</span>sort_values<span class="token punctuation">(</span>by <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'销售额'</span><span class="token punctuation">,</span> <span class="token string">'ID'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>ascending <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">]</span><span class="token punctuation">,</span> inplace <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment"># 默认将ID是缺失值的列显示在最后面</span>df<span class="token punctuation">.</span>sort_values<span class="token punctuation">(</span>by <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'ID'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 将ID是缺失值的列显示在最前面</span>df<span class="token punctuation">.</span>sort_values<span class="token punctuation">(</span>by <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'ID'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> na_position <span class="token operator">=</span> <span class="token string">'first'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>对数值进行排名</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 对应Excel中的 rank.avg函数</span>df<span class="token punctuation">[</span><span class="token string">'ID'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>rank<span class="token punctuation">(</span>method<span class="token operator">=</span> <span class="token string">'average'</span><span class="token punctuation">)</span><span class="token comment"># 按值在所有的排列数据中出现的先后顺序排名</span>df<span class="token punctuation">[</span><span class="token string">'ID'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>rank<span class="token punctuation">(</span>method <span class="token operator">=</span> <span class="token string">'first'</span><span class="token punctuation">)</span><span class="token comment">#  与Excel中rank.eq 函数的功能一样</span>df<span class="token punctuation">[</span><span class="token string">'ID'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>rank<span class="token punctuation">(</span>method <span class="token operator">=</span> <span class="token string">'min'</span><span class="token punctuation">)</span><span class="token comment"># 与min相反，取重复值对应的最大排名</span>df<span class="token punctuation">[</span><span class="token string">'ID'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>rank<span class="token punctuation">(</span>method <span class="token operator">=</span> <span class="token string">'max'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>对数据进行分组</li></ol><pre class="line-numbers language-none"><code class="language-none"># 如果price列的值&gt;3000，group列显示high，否则显示lowdf['group'] = np.where(df['客户当天发送消息数'] &gt; 5,'high','low')# 对符合多个条件进行分组# 符合经纪人级别为A1且经纪人响应时长&gt;24的在sign列显示为1df.loc[(df['经纪人级别'] == 'A1') &amp; (df['经纪人响应时长']&gt;= 24.0), 'sign']=1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>对数据进行分列</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'网'</span><span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> df<span class="token punctuation">[</span><span class="token string">'客户注册渠道'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                index<span class="token operator">=</span>df<span class="token punctuation">.</span>index<span class="token punctuation">,</span>columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'客户注册渠道'</span><span class="token punctuation">,</span><span class="token string">'size'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>!<span class="token operator">-</span><span class="token operator">-</span> df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> 首页jhrj_1<span class="token punctuation">[</span><span class="token string">'所属省份编码'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                index<span class="token operator">=</span>df<span class="token punctuation">.</span>index<span class="token punctuation">,</span>columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'客户注册渠道'</span><span class="token punctuation">,</span><span class="token string">'size'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token comment"># 分列完对数据进行合并</span>df1 <span class="token operator">=</span> pd<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>首页jhrj_1<span class="token punctuation">,</span> df<span class="token punctuation">,</span> left_index <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">,</span> right_index <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="5"><li>新增一列</li></ol><pre class="line-numbers language-none"><code class="language-none">data = data.assign(ration = [4, 2, 5, 6, 7, 8, 2, 9, 4])data['rations'] = [5, 2, 5, 6, 7, 8, 2, 9, 4]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="6"><li>对数据进行切分</li></ol><pre class="line-numbers language-none"><code class="language-none"># 指明切分区间pd.cut(df['年龄'], bins = [0,3,6,10])# 将数据切成3份pd.qcut(df['年龄'],3 )<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="7"><li>取出的数据， 指定取到小数点几位数？</li></ol><pre class="line-numbers language-none"><code class="language-none"># 取到小数点后3位for i in a :    print("%.3f"%c)# 设置小数点位数，四舍五入df['cnts'].round( decimals = 2)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="8"><li>将 list 格式转化成 DataFrame 格式</li></ol><pre class="line-numbers language-none"><code class="language-none">df = pd.DataFrame(data, columns = ['省份', '按钮名称', 'uv', 'pv'] )<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="数据选择"><a href="#数据选择" class="headerlink" title="数据选择"></a>数据选择</h2><ol><li>选择某一列/ 某几列</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 普通索引- 根据名称进行选择</span>df<span class="token punctuation">[</span><span class="token string">'客户端uv'</span><span class="token punctuation">]</span>df<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'标题'</span><span class="token punctuation">,</span> <span class="token string">'客户端uv'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token comment"># 位置索引 / 切片索引， 根据所在第几列进行选择</span><span class="token comment"># : 表示选择所有的行， 逗号后面表示要选择列的位置区域</span>df<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token comment"># 获取第1列和第3列的数值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>选择某一行/某几行</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 普通索引-loc</span>df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token string">'第一行'</span><span class="token punctuation">]</span>df<span class="token punctuation">.</span>log<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'第一行'</span><span class="token punctuation">,</span> <span class="token string">'第二行'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token comment"># 位置索引，切片索引</span> <span class="token comment"># 选择第一行</span>df<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token comment"># 选择第一行和第二行</span>df<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>根据指定条件进行筛选</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 选择年龄小于200的数据</span>df<span class="token punctuation">[</span>df<span class="token punctuation">[</span><span class="token string">'年龄'</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">200</span><span class="token punctuation">]</span>  <span class="token comment">#年龄小于200，且id小于300</span>df<span class="token punctuation">[</span><span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token string">'年龄'</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>   <span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">]</span>df<span class="token punctuation">[</span>np<span class="token punctuation">.</span>logical_and<span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token string">'年龄'</span><span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token number">10</span><span class="token punctuation">,</span> df<span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token comment"># A列值大于10，或 B列值大于5</span>df<span class="token punctuation">[</span><span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token string">'C'</span><span class="token punctuation">]</span> <span class="token operator">&gt;</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">]</span>df<span class="token punctuation">[</span>np<span class="token punctuation">.</span>logical_or<span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token number">10</span><span class="token punctuation">,</span> df<span class="token punctuation">[</span><span class="token string">'C'</span><span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token comment"># 当 A列的值大于13时， 显示B，c列的值</span>df<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'B'</span><span class="token punctuation">,</span><span class="token string">'C'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>df<span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token number">13</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>行列同时选择</li></ol><ul><li>普通索引+普通索引选择指定的行和列</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'第一行'</span><span class="token punctuation">,</span> <span class="token string">'第三行'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'订单号’, '</span>ID'<span class="token punctuation">]</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>位置索引 + 位置索引选择指定的行和列</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">df<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span>df<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>布尔索引+ 普通索引</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">df<span class="token punctuation">[</span>df<span class="token punctuation">[</span><span class="token string">'年龄'</span><span class="token punctuation">]</span><span class="token operator">&lt;</span> <span class="token number">200</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'订单编号'</span><span class="token punctuation">,</span> <span class="token string">'ID'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>切片索引+ 普通索引</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">df<span class="token punctuation">.</span>ix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'订单变化'</span><span class="token punctuation">,</span> <span class="token string">'ID'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="5"><li>按条件进行提取</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 用isin函数进行判断</span><span class="token comment"># 使用isin函数根据特定值筛选记录。筛选A值等于10或者13的记录</span>df<span class="token punctuation">[</span>df<span class="token punctuation">.</span>A<span class="token punctuation">.</span>isin<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token comment"># 查看这一列是否包含某个值</span>df<span class="token punctuation">[</span><span class="token string">'级别'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>isin<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'A3'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># 先判断是否包含，然后将符合条件的数据提取出来。</span>df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>df<span class="token punctuation">[</span><span class="token string">'级别'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>isin<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'A3'</span><span class="token punctuation">,</span><span class="token string">'M4'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="数据汇总"><a href="#数据汇总" class="headerlink" title="数据汇总"></a>数据汇总</h2><ol><li>对数据进行分类 - group by函数</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 按照某列分组求和</span>df<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token string">'渠道'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 按照多列分组求和</span>df<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'渠道'</span><span class="token punctuation">,</span> <span class="token string">'ID'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 对分组后的结果进行重新索引</span>df<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token string">'渠道'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reset_index<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li> aggregate方法</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 对同一列 先做计数汇总运算，再做汇总运算</span>df<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token string">'渠道'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>aggregate<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'count'</span><span class="token punctuation">,</span> <span class="token string">'sum'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 针对不同的列做不同的汇总运算</span>df<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token string">'渠道'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>aggregate<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'ID'</span> <span class="token punctuation">:</span> <span class="token string">'count'</span><span class="token punctuation">,</span>                              <span class="token string">'销量'</span> <span class="token punctuation">:</span> <span class="token string">'sum'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>pivot_table-数据透视表</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 为方便处理， 一般需要对结果进行重置索引</span>pd<span class="token punctuation">.</span>pivot_table<span class="token punctuation">(</span>df<span class="token punctuation">,</span> values <span class="token operator">=</span> <span class="token string">'ID'</span><span class="token punctuation">,</span> columns <span class="token operator">=</span> <span class="token string">'渠道'</span><span class="token punctuation">,</span>                index <span class="token operator">=</span> <span class="token string">'客户分类'</span><span class="token punctuation">,</span> aggfun <span class="token operator">=</span> <span class="token string">'count'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reset_index<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p> pd.pivot_table(data, values, index, columns, aggfunc, fill_value, margins, dropna, margins_name = ‘All’)</p><blockquote><p>data: 数据<br>values: 对应的值<br>index: 对应的行<br>columns: 对应的列<br>aggfunc : 对values的计算类型<br>fill_value : 对空值的填充值<br>margins: 是否显示合计列<br>dropna: 是否删除缺失值，如果为真，则一整行全删除<br>margins_name: 合计列的列名</p></blockquote><ol start="4"><li>对数据进行映射</li></ol><pre class="line-numbers language-none"><code class="language-none"># 用map函数对字典进行映射， 新加一列data['upper'] = data['group'].map(dataUpper)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="5"><li>数据采样</li></ol><pre class="line-numbers language-none"><code class="language-none"># 简单随机抽取sampledf.sample(n=3)# 设置采样权重# 需要对每一行进行权重设置，列表行数少可行，过多不可行# 假设有4行数据，设置采样权重weights = [0, 0, 0.5, 0.5]df.sample(n=4, weights=weights)## 确定采样后是否放回# 采样后放回，Truedf.sample(n=6, replace=True)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="6"><li>统计计算</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 计算每一列的个数</span>df<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 计算每一行的个数</span>df<span class="token punctuation">.</span>count<span class="token punctuation">(</span>axis <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token comment"># 求和</span>df<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span>df<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span>axis <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token comment"># 中位数</span>df<span class="token punctuation">.</span>median<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 求和</span>df<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 求最大值</span>df<span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 求最小值</span>df<span class="token punctuation">.</span><span class="token builtin">min</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 求众数</span>df<span class="token punctuation">.</span>mode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 求方差</span>df<span class="token punctuation">.</span>var<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 求标准差</span>df<span class="token punctuation">.</span>std<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 求分位数</span>df<span class="token punctuation">.</span>quantile<span class="token punctuation">(</span><span class="token number">0.75</span><span class="token punctuation">,</span> axis <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token comment"># 描述统计 describe函数</span><span class="token comment">#自动生成数据的数量，均值，标准差等数据</span><span class="token comment">#round（2）,显示小数点后面2位数，T转置</span>df<span class="token punctuation">.</span>describe<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">round</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span>T<span class="token comment"># 标准差std()</span>df<span class="token punctuation">[</span><span class="token string">'经纪人响应时长'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>std<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 协方差cov</span>df<span class="token punctuation">[</span><span class="token string">'经纪人当天发送消息数'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cov<span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token string">'客户当天发送消息数'</span><span class="token punctuation">]</span><span class="token comment"># 相关性分析corr</span>df<span class="token punctuation">[</span><span class="token string">'客户当天发送消息数'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>corr<span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token string">'经纪人当天发送消息数'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="7"><li>数值计数</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 查看不同值出现的次数， #默认进行排列</span>df<span class="token punctuation">[</span><span class="token string">'ID'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value_counts<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 查看不同值出现的占比, #默认进行排列</span>df<span class="token punctuation">[</span><span class="token string">'ID'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value_counts<span class="token punctuation">(</span>normalize <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment"># 查看不同值出现的占比， 不进行排列</span>df<span class="token punctuation">[</span><span class="token string">'ID'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value_counts<span class="token punctuation">(</span>normalize <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">,</span> sort <span class="token operator">=</span> <span class="token boolean">False</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="8"><li>插入数据</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 在 insert方法中，指明要插入的位置、插入新列的列名，以及要插入的数据</span>df<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'销售品id'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'01'</span><span class="token punctuation">,</span> <span class="token string">'02'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="9"><li>对数据进行转置</li></ol><pre class="line-numbers language-none"><code class="language-none">df.T<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="10"><li>索引重塑</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 将表格型数据转化成树形数据</span>df<span class="token punctuation">.</span>stack<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 将树形数据转化成表格型数据</span>df<span class="token punctuation">.</span>stack<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>unstack<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2019/12/22/8dJwIqrSRTLYvnK.jpg" alt="索引重塑"></p><ol start="11"><li>长宽表转换</li></ol><ul><li>宽表<br><img src="https://i.loli.net/2019/12/22/plz94hj3vIuHA2B.jpg" alt="宽表"></li><li>长表<br><img src="https://i.loli.net/2019/12/22/6XKpcg2RMoTaPmW.jpg" alt="长表"></li></ul><ul><li>将长表转化成宽表,对数据进行透视, 相当于Excel中的数据透视表功能。</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">df<span class="token punctuation">.</span>pivot_table<span class="token punctuation">(</span>index <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'computer'</span><span class="token punctuation">,</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> columns <span class="token operator">=</span> <span class="token string">'year'</span><span class="token punctuation">,</span> values <span class="token operator">=</span> <span class="token string">'sale'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>将宽表转换成长表</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 方法1： melt()</span>df<span class="token punctuation">.</span>melt<span class="token punctuation">(</span>id_vars <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'company'</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> var_name <span class="token operator">=</span> <span class="token string">'year'</span><span class="token punctuation">,</span> value_name <span class="token operator">=</span> <span class="token string">'sale'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 方法1： stack()</span><span class="token comment"># 在保持行索引不变的前提下，将列索引转化成行索引 </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2019/12/22/4pKoUMivFNIqzXu.jpg" alt="宽表转换成长表"></p><hr><h2 id="对字符串进行操作"><a href="#对字符串进行操作" class="headerlink" title="对字符串进行操作"></a>对字符串进行操作</h2><ol><li> 大小写</li></ol><pre class="line-numbers language-none"><code class="language-none">a.lower()a.upper()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="2"><li>长度</li></ol><pre class="line-numbers language-none"><code class="language-none"># 长度a.len()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="3"><li> 去除空格</li></ol><pre class="line-numbers language-none"><code class="language-none">a.strip()a.lstrip()alrstrip()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="5"><li>切分与分列、 合并</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#切分</span>a<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'_'</span><span class="token punctuation">)</span><span class="token comment"># 切分， 且成为新列</span>a<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'_'</span><span class="token punctuation">,</span> expand <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment"># 对切分进行限制, 只切1次</span>a<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'_'</span><span class="token punctuation">,</span> expand <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">,</span> n<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment"># 查看是否包含</span>a<span class="token punctuation">.</span><span class="token builtin">str</span><span class="token punctuation">.</span>contains<span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">)</span><span class="token comment"># 分列</span>s<span class="token punctuation">.</span><span class="token builtin">str</span><span class="token punctuation">.</span>get_dummies<span class="token punctuation">(</span>sep<span class="token operator">=</span> <span class="token string">'|'</span><span class="token punctuation">)</span>df <span class="token operator">=</span> 首页jhrj_1<span class="token punctuation">[</span><span class="token string">'所属省份编码'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">str</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span>  <span class="token comment"># expand=True  可以把用分割的内容直接分列</span>首页jhrj_1<span class="token punctuation">[</span><span class="token string">"所属省份编码1"</span><span class="token punctuation">]</span><span class="token operator">=</span>df<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token comment"># 切分并在原表中进行合并</span>首页jhrj_2 <span class="token operator">=</span> pd<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>首页jhrj_1<span class="token punctuation">,</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>首页jhrj_1<span class="token punctuation">[</span><span class="token string">'所属省份编码'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">str</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">,</span> expand <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>               how <span class="token operator">=</span> <span class="token string">'left'</span><span class="token punctuation">,</span> left_index <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">,</span> right_index <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment"># pandas对dataframe中的某一列使用split做字符串切割：</span><span class="token comment"># words = df['col'].split()</span><span class="token comment"># 报错：</span><span class="token comment"># AttributeError: 'Series' object has no attribute 'split'</span><span class="token comment"># 原因是df['col']返回的是一个Series对象，需要先把Series对象转换为字符串：pandas.Series.str.split</span><span class="token comment"># words = df['col'].str.split()</span>对两列数据进行合并df<span class="token punctuation">[</span><span class="token string">'省份_名称'</span><span class="token punctuation">]</span> <span class="token operator">=</span> df<span class="token punctuation">[</span><span class="token string">'省份'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">str</span><span class="token punctuation">.</span>cat<span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token string">'名称'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>sep <span class="token operator">=</span> <span class="token string">'_'</span><span class="token punctuation">)</span>首页jdt_1<span class="token punctuation">[</span><span class="token string">'省份_标题'</span><span class="token punctuation">]</span> <span class="token operator">=</span> 首页jdt_1<span class="token punctuation">[</span><span class="token string">'所属省份编码'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">str</span><span class="token punctuation">.</span>cat<span class="token punctuation">(</span>首页jdt_1<span class="token punctuation">[</span><span class="token string">'标题'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>sep <span class="token operator">=</span> <span class="token string">'_'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="日期-时间"><a href="#日期-时间" class="headerlink" title="日期-时间"></a>日期-时间</h2><ul><li> 当前日期</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> time<span class="token keyword">from</span> datetime <span class="token keyword">import</span> datetime<span class="token punctuation">,</span> time<span class="token punctuation">,</span> timedelta<span class="token comment"># 返回当前日期和时间</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 返回当前时间的年</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>year<span class="token comment"># 返回当前时间的月份</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>month<span class="token comment"># 返回当前日期的日期</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>day<span class="token comment"># 返回当前时刻在周几</span><span class="token comment"># python周几默认是从0开始的</span>datatime<span class="token punctuation">.</span>now<span class="token punctuation">.</span>weekeday<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token comment"># 返回当前时间所在周的周数</span>datatime<span class="token punctuation">.</span>now<span class="token punctuation">.</span>isocalendar<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>返回指定日期</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 只展现日期</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">.</span>date<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 只展示时间</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 显示当前日期</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">'%Y-%m-%d'</span><span class="token punctuation">)</span><span class="token comment">#2018-12-22</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span>'<span class="token operator">%</span>Y<span class="token operator">-</span><span class="token operator">%</span>m<span class="token operator">-</span><span class="token operator">%</span>d <span class="token operator">%</span>H<span class="token punctuation">:</span><span class="token operator">%</span>M<span class="token punctuation">:</span><span class="token operator">%</span>S"<span class="token punctuation">)</span><span class="token comment"># 将时间格式转化成字符串格式</span>now<span class="token operator">=</span><span class="token builtin">str</span><span class="token punctuation">(</span> datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 将字符串格式转化为时间格式</span>parse<span class="token punctuation">(</span>str_now<span class="token punctuation">)</span> <span class="token comment"># 往后推一天</span>date<span class="token operator">+</span> Day<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment"># 往后推一个小时</span>date <span class="token operator">+</span> Hour<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment"># 往前推一天</span>date <span class="token operator">-</span> Day<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment"># 昨天</span>ysd <span class="token operator">=</span> now <span class="token operator">-</span> timedelta<span class="token punctuation">(</span>days <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">#本月第一天</span>ysd <span class="token operator">=</span> now<span class="token punctuation">.</span>replace<span class="token punctuation">(</span>day <span class="token operator">=</span> now<span class="token punctuation">.</span>day<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">#  上月最后一天</span>lastmonth_end <span class="token operator">=</span> now<span class="token punctuation">.</span>replace<span class="token punctuation">(</span>day <span class="token operator">=</span> now<span class="token punctuation">.</span>day<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">-</span> timedelta<span class="token punctuation">(</span>days<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment"># 上月第一天</span>lastmonth_first <span class="token operator">=</span> now<span class="token punctuation">.</span>replace<span class="token punctuation">(</span>month <span class="token operator">=</span> now<span class="token punctuation">.</span>month<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> day <span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>lastmonth_first <span class="token operator">=</span> lastmonth_end<span class="token punctuation">.</span>replace<span class="token punctuation">(</span>day<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">#提取2016年11月2号的数据</span>df<span class="token punctuation">[</span><span class="token string">'2016-11-02'</span> <span class="token punctuation">:</span> <span class="token string">'2016-11-02'</span><span class="token punctuation">]</span>dt_time <span class="token operator">=</span> dt<span class="token punctuation">.</span>datetime<span class="token punctuation">(</span>year <span class="token operator">=</span> <span class="token number">2018</span><span class="token punctuation">,</span> month<span class="token operator">=</span><span class="token number">9</span><span class="token punctuation">,</span> day <span class="token operator">=</span> <span class="token number">17</span><span class="token punctuation">,</span> hour <span class="token operator">=</span> <span class="token number">22</span><span class="token punctuation">,</span> minute <span class="token operator">=</span> <span class="token number">43</span><span class="token punctuation">)</span><span class="token comment"># 构造时间序列， 构造十个日期， 每12分钟一次</span>pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span>pd<span class="token punctuation">.</span>date_range<span class="token punctuation">(</span>start <span class="token operator">=</span> <span class="token string">'2018-09-17 22:43:00'</span><span class="token punctuation">,</span> periods <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span> freq <span class="token operator">=</span> <span class="token string">'12min'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 取所有8点到12点之间的数据, 不包含8点和12点</span>data<span class="token punctuation">[</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>index<span class="token punctuation">.</span>hour <span class="token operator">&gt;</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span>index<span class="token punctuation">.</span>hour <span class="token operator">&lt;</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token comment"># 包含8点到12点</span>data<span class="token punctuation">.</span>between_time<span class="token punctuation">(</span><span class="token string">'08:00'</span><span class="token punctuation">,</span> <span class="token string">'12:00'</span><span class="token punctuation">)</span><span class="token keyword">import</span> datetime<span class="token keyword">from</span> dateutil<span class="token punctuation">.</span>relativedelta <span class="token keyword">import</span> relativedelta  begin <span class="token operator">=</span> datetime<span class="token punctuation">.</span>date<span class="token punctuation">(</span><span class="token number">2019</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>end <span class="token operator">=</span> datetime<span class="token punctuation">.</span>date<span class="token punctuation">(</span><span class="token number">2019</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    first <span class="token operator">=</span> d <span class="token operator">+</span> relativedelta<span class="token punctuation">(</span>months<span class="token operator">=</span>i<span class="token punctuation">)</span>    last <span class="token operator">=</span> end <span class="token operator">+</span> relativedelta<span class="token punctuation">(</span>months<span class="token operator">=</span>i<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>处理月与月之间时间不连续问题</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> time <span class="token keyword">from</span> datetime <span class="token keyword">import</span> datetime<span class="token punctuation">,</span> time<span class="token punctuation">,</span>timedelta<span class="token comment"># 指定昨天</span>df <span class="token operator">=</span> datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> timedelta<span class="token punctuation">(</span>days <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token comment"># 月初第一天</span>startdates <span class="token operator">=</span> <span class="token punctuation">(</span>df<span class="token punctuation">.</span>replace<span class="token punctuation">(</span>day <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">'%Y-%m-%d'</span><span class="token punctuation">)</span><span class="token comment"># 昨天</span>enddates <span class="token operator">=</span> <span class="token punctuation">(</span>df <span class="token operator">-</span> timedelta<span class="token punctuation">(</span>days <span class="token operator">=</span> num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">'%Y-%m-%d'</span><span class="token punctuation">)</span><span class="token comment"># 上月第一天</span>last_moth_f <span class="token operator">=</span> df<span class="token punctuation">.</span>replace<span class="token punctuation">(</span>month <span class="token operator">=</span>df<span class="token punctuation">.</span>month<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> day<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__format__<span class="token punctuation">(</span><span class="token string">"%Y-%m-%d"</span><span class="token punctuation">)</span><span class="token comment"># 上月最后一天</span>last_moth_e <span class="token operator">=</span> df<span class="token punctuation">.</span>replace<span class="token punctuation">(</span>month <span class="token operator">=</span> df<span class="token punctuation">.</span>month<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> day <span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">'%Y-%m-31'</span><span class="token punctuation">)</span><span class="token comment"># 目标值月份</span>mubiao_dates <span class="token operator">=</span> startdates<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token comment"># 将字符串转换为日期</span>df <span class="token operator">=</span> datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> timedelta<span class="token punctuation">(</span>days <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span>day1 <span class="token operator">=</span> <span class="token punctuation">(</span>df<span class="token punctuation">.</span>replace<span class="token punctuation">(</span>day <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">'2019-11-%d'</span><span class="token punctuation">)</span>first <span class="token operator">=</span> datetime<span class="token punctuation">.</span>strptime<span class="token punctuation">(</span>day1<span class="token punctuation">,</span> <span class="token string">"%Y-%m-%d"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="自动发送邮件"><a href="#自动发送邮件" class="headerlink" title="自动发送邮件"></a>自动发送邮件</h1><pre class="line-numbers language-none"><code class="language-none">import smtplibfrom email import encoders<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2019/12/23/uqFn819yGEjWRPQ.jpg" alt="123.jpg"><br><img src="https://i.loli.net/2019/12/23/Druqb2zyHi6ESQV.jpg" alt="456.jpg"> </p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>双拼输入法</title>
      <link href="/2017/09/17/2020-02-22-%E7%94%9F%E6%B4%BB-%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93-%E5%8F%8C%E6%8B%BC%E8%BE%93%E5%85%A5%E6%B3%95-4/"/>
      <url>/2017/09/17/2020-02-22-%E7%94%9F%E6%B4%BB-%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93-%E5%8F%8C%E6%8B%BC%E8%BE%93%E5%85%A5%E6%B3%95-4/</url>
      
        <content type="html"><![CDATA[<h1 id="1-怎么接触到双拼的？"><a href="#1-怎么接触到双拼的？" class="headerlink" title="1. 怎么接触到双拼的？"></a>1. 怎么接触到双拼的？</h1><p>自己第一次接触双拼，是看到李笑来老师的《把时间当朋友》第二章中的“盲打究竟是否值得学会”,里面提到了盲打与双拼帮助他快速进行记录笔记和文字。 于是自己就试着在网上找双拼的学习方法。</p><h1 id="2-什么是双拼？"><a href="#2-什么是双拼？" class="headerlink" title="2. 什么是双拼？"></a>2. 什么是双拼？</h1><blockquote><p>维基百科：双拼是汉语拼音输入法的一种编码方案。相对于全拼而言，使用双拼输入汉字时只需输入一个代表声母的字母，一个代表韵母的字母，就可以打出任意一个中文单字了。</p></blockquote><p>理解起来也很简单，比如你要拼写 <code>张</code> <code>红</code> 这两个字， 用全拼的话可能你得输入 <code>zhang</code> <code> hong</code>， 而用小鹤双拼的话， 你只需要输入<code>vh</code> <code>hs</code> 就可以显示。 <code>v</code> 代表<code>zh</code> , <code>h</code> 代表<code>ang</code> , <code>s</code>代表<code>ong</code></p><p>双拼的语法也有很多种，比如小鹤双拼、自然码双拼、紫光拼音双拼、<br>搜狗拼音双拼、微软拼音双拼、智能ABC双拼。 每种双拼对应的语法也都不一样。</p><p>自己学习的是小鹤双拼，语法图是这样的：<br><img src="http://static.zybuluo.com/zhangyu756897669/ge8055q1u83xn00n84korx3y/%E5%B0%8F%E9%B9%A4%E5%8F%8C%E6%8B%BC.png" alt="小鹤双拼.png-156kB"></p><p>在搜狗输入法上点击 <code>设置</code>—— <code>属性设置</code> —— <code>常用</code> —— <code>特殊习惯</code>—— <code>双拼</code>  就可以使用了。 </p><h1 id="3-学习的过程"><a href="#3-学习的过程" class="headerlink" title="3. 学习的过程"></a>3. 学习的过程</h1><p>刚开始学习小鹤双拼的时候， 自己是完全不习惯的， 因为想要使用小鹤双拼进行文字输入，就得记住每个字母对应的韵母， 自己每输入一个字， 就得想一下这个字的韵母是什么， 对应到按键上的那个字母又是什么。 再去输入，说实话当时输入字的效率低下到令人发指，而且往往记不住，自己只好打印了一张语法表贴在自己的电脑旁， 忘了就在表上找。 好几次忍不住偷偷换成了全拼， 特别是在工作着急的情况下。 </p><p>就这样别别扭扭用了一周之后， 才发现自己已经能够慢慢不看语法表了。 （这让我都有点怀疑自己的智商，因为网上说基本一周就可以很熟练了）<br>一个月过后自己才做到了输入基本不卡壳，但如果旁边有人一紧张还是会忘掉如何输入了。 现在用了一年多， 自己已经能够无意识的使用双拼了。 如果你现在问我键盘上的字母在双拼中代表哪个韵母，自己可能真的答不上来，但只要自己在键盘上打字，自己就能够无意识的打出来。 </p><h1 id="4-学习双拼的优点与缺点"><a href="#4-学习双拼的优点与缺点" class="headerlink" title="4. 学习双拼的优点与缺点"></a>4. 学习双拼的优点与缺点</h1><p>( 1 ). 优点</p><ul><li><p>简洁，同样一个词全拼要五六下，双拼只需要两下</p></li><li><p>感觉节省了时间，更喜欢在键盘上敲字了。 （至于是否真正节省了时间，自己没有做过对比）</p></li></ul><p>( 2 ). 缺点</p><ul><li>全拼不会用了， 有时在别人的电脑上输入文字总是很别扭，老出错，总想着把输入法改成双拼</li><li>有时大脑短路会想不起来双拼的语法</li></ul><h1 id="5-感悟"><a href="#5-感悟" class="headerlink" title="5. 感悟"></a>5. 感悟</h1><ul><li><p>任何学习都是不可逆的，当你学了到了一项技能，你就不可能再像从前没学过一样生活。 </p></li><li><p>最可怕的不是自己知道自己不知道，而是不知道自己不知道。 </p><blockquote><p>比如自己学习双拼，自己以前根本不知道还有双拼这么一种输入法，就更不会产生要学习这种输入法的冲动。</p><p><strong>如何解决自己不知道自己不知道的知识</strong>，自己目前能够想到的方法是：多读书，多关注大牛，多了解别人是怎么工作、生活。</p></blockquote></li><li><p>有些东西只有自己亲身经历过后才能有所体会，哪怕是坏的体验。</p><blockquote><p>如果只是看别人推荐而不去坚持使用双拼， 我就不能体会到大脑下意识使用双拼输入的快感。当然，也许会出现这种情况， 你付出了时间，付出了精力，而这项技能对你的生活影响并不大。这就需要你前期做一些搜索调查。</p></blockquote><p>延伸到生活上，要是我不来北京生活，不来北京工作，我就没有机会知道来北京到底会面临什么困难，到底对自己的职业发展是否有益。也许最后自己会失败，可那又怎么样，自己的人生自己做主。</p><blockquote><p>2020年2月26：现在在北京已经呆了马上快3年了，自己虽然已经转行做数据分析了，但是现在自己的职业发展并不好，甚至犹豫自己是否还应呆在北京。</p></blockquote></li><li><p>学会一项技能，不是只是了解它，而是能够在生活中无意识的使用它</p><blockquote><p> 一项技能，只是了解是远远不够的， 你要去不断的磨练，打磨，直到它成为你大脑的一部分。 学会的标准就是：你能否不需要专门思考就能够调用它。 </p></blockquote></li><li><p>要学习那些你通过短时间学会,就能够一辈子用的上的知识。</p><h1 id="6-延伸"><a href="#6-延伸" class="headerlink" title="6. 延伸"></a>6. 延伸</h1><blockquote><ul><li><p>总是听很多的牛人说，写作是非常重要的一项技能，对一个人清晰思考问题是非常有帮助的，然而自己却迟迟没有行动，主要还是觉得自己语言词汇匮乏， 缺乏独立思考，怕自己语无伦次。</p></li><li><p>其实又想想，写作这东西这就和自己刚开始学习双拼时一样，开始你觉得自己没有可能学会，也许过一段时间你就能够发现自己的进步， 你不去坚持写又怎么能够证明自己一定学不会呢？</p></li><li><p>自己认为学习是一个自我验证的过程：你认为自己不可能学会，你就不会坚持去学；你不坚持去学，你就不会有进步， 从而你就不会看到到自己能够学会的结果，也就证明了自己确实学不会。<strong>相反</strong>， 你认为自己能学会，你就坚持去学，看到自己的进步，最终的确学会了，也证明了自己确实能够学会。</p></li></ul></blockquote></li></ul><h1 id="7-未解决问题"><a href="#7-未解决问题" class="headerlink" title="7. 未解决问题"></a>7. 未解决问题</h1><ul><li>如何运用心智的力量在还没有机会亲身体验的情况下，仅凭心智就可以像真实经历过一样深刻体会？</li><li>如何解决 害怕自己付出了时间，付出了精力，而没有一个好的结果</li></ul><hr><p>参考资料： <a href="https://book.douban.com/subject/3609132/">《把时间当朋友》</a></p>]]></content>
      
      
      <categories>
          
          <category> 技能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 双拼 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>给自己培育一个“环境场”</title>
      <link href="/2017/09/17/2020-03-22-%E7%94%9F%E6%B4%BB-%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93-%E5%88%A9%E7%94%A8%E7%8E%AF%E5%A2%83%E6%9D%A5%E8%BE%85%E5%8A%A9%E8%87%AA%E5%B7%B1%E7%9A%84%E8%BF%9B%E6%AD%A5-5/"/>
      <url>/2017/09/17/2020-03-22-%E7%94%9F%E6%B4%BB-%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93-%E5%88%A9%E7%94%A8%E7%8E%AF%E5%A2%83%E6%9D%A5%E8%BE%85%E5%8A%A9%E8%87%AA%E5%B7%B1%E7%9A%84%E8%BF%9B%E6%AD%A5-5/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是环境场"><a href="#什么是环境场" class="headerlink" title="什么是环境场"></a>什么是环境场</h1><p>它是你在一个空间里做事的习惯，习惯会形成稳定的心理预期，进而又会巩固习惯的行为，你在这个场里做的事情越纯粹、越持久，这个环境场的力量就越大</p><h1 id="实际应用"><a href="#实际应用" class="headerlink" title="实际应用"></a>实际应用</h1><p>自己下班或者周末在房间，总是把大量的时间用来刷微博或者刷剧。虽然一直刷一直爽，但自己总是有一种虚度时间的空虚感，如何改变自己下班和周末的状态，成了自己最近在思考的问题。 </p><p>最近在学习陈海贤的《自我发展心理学》，刚好说到了自己的这种现象，并给出了一种利用环境来促使改变的方法，对自己启发很大，今天就来介绍一下这种方法。</p><p>首先是融入到积极的环境中去。要想学习就去图书馆、自习室，要想锻炼就去体育场、健身房。我们心中其实都有一个关于“特定空间”的假设，在假设中，对于公司、图书馆这样的空间就是用来工作学习，对于自己寝室的假设肯定是用来休息娱乐的。如果你要让自己在宿舍这样的空间中好好学习工作，就得付出比在图书馆多几倍的努力才行，还不一定能学进去。所以，周末能去图书馆上自习就绝不在家办公， 让自己融入到特定的环境中去。</p><p>当然，如果要学习就要去图书馆，那也不现实。如何在自己的房间中也能被环境所带动呢，文中介绍了第二种方法，那就是在某个特定的环境中只做一件事情。</p><p>比如：你可以要求自己在这张书桌上只作跟工作学习有关的事情， 如果想刷微博，看电视，那就换个地方，可以坐沙发上。</p><p>背后其实也是利用了我们心中对“特定空间”的假设，如果你在这个书桌上进行娱乐活动，那么这个书桌作为你心中假设的环境就会破坏掉。平常在一个特定的空间里只做这一件事情， 慢慢这个习惯会形成稳定的心理预期，会给自己一种强烈的心理暗示，从而帮助自己进行改变。</p><p>这促使了我对之前行为的理解，当自己上完班回家之后，本身意志力就消磨的七七八八了，再要用所剩无几的意志力抵抗娱乐去学习，自己的大脑肯定不干。周末在房子里大脑肯定也是怎么舒服怎么来。</p><p>我自己针对性的采取了以下几种方法：</p><ol><li>最近下班回家之后，先休息一个小时左右，恢复一下意志力，再起来学习工作，感觉效率到提升了不少。</li><li>指定特定的桌子只用来办公和学习， 如果自己想刷微博或者刷剧， 不要在这张桌子上进行。 （还在努力实践中）</li><li>周末能去图书馆就尽量不要在房子呆着。</li></ol><h1 id="成果"><a href="#成果" class="headerlink" title="成果"></a>成果</h1><p>2021年，自己终于养成了一个环境场，在书房里自己就会很自然的去学习</p>]]></content>
      
      
      <categories>
          
          <category> 心理学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 心理学 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
