<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/11/13/hello-world/"/>
      <url>/2021/11/13/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>git学习</title>
      <link href="/2021/09/05/2021-09-12-git%E5%AD%A6%E4%B9%A0/"/>
      <url>/2021/09/05/2021-09-12-git%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="基本流程"><a href="#基本流程" class="headerlink" title="基本流程"></a>基本流程</h1><p><a href="https://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html">https://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html</a></p><p><img src="https://www.ruanyifeng.com/blogimg/asset/2015/bg2015120901.png"></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Workspace：工作区</span><br><span class="line">Index / Stage：暂存区</span><br><span class="line">Repository：仓库区（或本地仓库）</span><br><span class="line">Remote：远程仓库</span><br></pre></td></tr></tbody></table></figure><h1 id="创建版本库"><a href="#创建版本库" class="headerlink" title="创建版本库"></a>创建版本库</h1><ol><li> 通过命令<code>git int</code>把这个目录变成git可以管理的仓库，执行后会生成.git目录，在这个目录里会存所有编辑的历史快照。如果要查看之前修改前版本，可以从仓库中调取之前的快照。</li></ol>   <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在当前目录新建一个Git代码库</span></span><br><span class="line">$ git <span class="built_in">int</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个目录，将其初始化为Git代码库</span></span><br><span class="line">$ git init [project-name]</span><br></pre></td></tr></tbody></table></figure><ol start="2"><li><p><code>git config --global</code> 参数，有了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置，当然你也可以对某个仓库指定的不同的用户名和邮箱。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 显示当前的Git配置</span></span><br><span class="line">$ git config --<span class="built_in">list</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 编辑Git配置文件</span></span><br><span class="line">$ git config -e [--<span class="keyword">global</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置提交代码时的用户信息</span></span><br><span class="line">$ git config [--<span class="keyword">global</span>] user.name <span class="string">"[name]"</span></span><br><span class="line">$ git config [--<span class="keyword">global</span>] user.email <span class="string">"[email address]"</span></span><br></pre></td></tr></tbody></table></figure></li></ol><p><code>git status</code>-快速查看仓库的状态</p><blockquote><p>工作树和仓库在被操作的过程中，状态会不断发生变化。在Git操作过程中时常用git status命令查看当前状态，可谓基本中的基本。</p></blockquote><p><code>git add 文件名</code> -将文件加入暂存区</p><blockquote><p>要想让文件成为Git仓库的管理对象，就需要用git add命令将其加入暂存区（Stage或者Index）中。将文件加入暂存区后，git status命令的显示结果为：<code>Changes to be committed</code></p></blockquote><p><code>git commit</code>-保存仓库的历史记录</p><blockquote><p>git commit命令可以将当前暂存区中的文件实际保存到仓库的历史记录中。通过这些记录，我们就可以在工作树中复原文件。</p></blockquote><p><code>git log</code>-查看提交日志</p><blockquote><p>git log命令可以查看以往仓库中提交的日志。包括可以查看什么人在什么时候进行了提交或合并，以及操作前后有怎样的差别。</p></blockquote><p><code>git log --pretty=short</code>-只显示提交信息的第一行</p><blockquote><p>能够更轻松地把握多个提交</p></blockquote><p><code>git log 目录/文件名</code></p><blockquote><p>只显示该目录下/文件相关的日志</p></blockquote><p><code>git log -p 目录/文件名</code></p><blockquote><p>可以只查看文件的提交日志以及提交前后的差别。</p></blockquote><p><code>git reflog</code> - 查看当前仓库执行过的操作日志</p><p><code>git diff</code>-查看更改前后的区别</p><blockquote><p>可以只查看README.md文件的提交日志以及提交前后的差别。</p><p>“+”号标出的是新添加的行，被删除的行则用“-”号标出。</p><p>养成这样一个好习惯：在执行git commit命令之前先执行git diff HEAD命令，查看本次提交与上次提交之间有什么差别，等确认完毕后再进行提交。</p></blockquote><h1 id="分支操作"><a href="#分支操作" class="headerlink" title="分支操作"></a>分支操作</h1><p><code>git branch</code>-显示所有分支</p><blockquote><p>git branch命令可以将分支名列表显示，同时可以确认当前所在分支。</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git branch</span><br><span class="line">* master</span><br></pre></td></tr></tbody></table></figure><p>有“*”（星号），表示这是我们当前所在的分支。也就是说，我们正在master分支下进行开发。</p></blockquote><p><code>git checdkout -b</code> -创建、切换分支</p><blockquote><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b feature-A</span><br></pre></td></tr></tbody></table></figure><p>创建名为<code>feature-A</code>的分支</p></blockquote><p><code> git checkout分支名称</code>-切换到master分支</p><blockquote><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout master</span><br></pre></td></tr></tbody></table></figure></blockquote><p><code>git checkout -</code> 切回上一个分支</p><blockquote><p>用“-”（连字符）代替分支名，就可以切换至上一个分支。当然，将“-”替换成feature-A同样可以切换到feature-A分支。</p></blockquote><p><code>git merge</code>-合并分支</p><blockquote><p>假设feature-A已经实现完毕，想要将它合并到主干分支master中。</p><ol><li><p>切换到master分支</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout master</span><br></pre></td></tr></tbody></table></figure></li><li><p>然后合并feature-A分支。为了在历史记录中明确记录下本次分支合并，我们需要创建合并提交。因此，在合并时加上–no-ff参数。</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge --no-ff feature-A</span><br></pre></td></tr></tbody></table></figure></li></ol></blockquote><p><code>git log --graph</code> -以图表形式查看分支</p><blockquote><p><code>git log --graph</code>命令可以用图表形式输出提交日志，非常直观。</p></blockquote><p><code>git reset</code>-回溯历史版本</p><blockquote><p>要让仓库的HEAD、暂存区、当前工作树回溯到指定状态，需要用到git reset –hard命令。只要提供目标时间点的哈希值，就可以完全恢复至该时间点的状态</p><p>首先执行：<code>git reflog</code>查看当前仓库执行的所有日志</p><p>然后根据查到的哈希值回溯历史版本</p></blockquote><blockquote><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard fd0cbf.......</span><br></pre></td></tr></tbody></table></figure></blockquote><p><code>git commit --amend</code>-修改提交信息</p><p><code>git rebase -i</code>-压缩历史</p><h1 id="远程仓库操作"><a href="#远程仓库操作" class="headerlink" title="远程仓库操作"></a>远程仓库操作</h1><p><code>git remote add</code>-添加远程仓库</p><blockquote><p>用git remote add命令将它设置成本地仓库的远程仓库</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote <span class="keyword">add</span> origin git<span class="variable">@github</span>.com:zhangyu756897669<span class="operator">/</span>zhangyu756897669.github.</span><br></pre></td></tr></tbody></table></figure></blockquote><p><code>git push</code>-推送至远程仓库</p><blockquote><p>-u参数可以在推送的同时，将origin仓库的master分支设置为本地仓库当前分支的upstream（上游）。添加了这个参数，将来运行git pull命令从远程仓库获取内容时，本地仓库的这个分支就可以直接从origin的master分支获取内容，省去了另外添加参数的麻烦。</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -u origin master</span><br></pre></td></tr></tbody></table></figure></blockquote><p><code>git clone</code>-获取远程仓库</p><blockquote><p>执行git clone命令后我们会默认处于master分支下，同时系统会自动将origin设置成该远程仓库的标识符</p></blockquote><p><code>git pull</code>-获取最新的远程仓库分支</p><p>git 资料：</p><p><a href="http://git-scm.com/book/zh/v2">http://git-scm.com/book/zh/v2</a></p>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小程序学习教程</title>
      <link href="/2021/08/22/2021-09-05-%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AD%A6%E4%B9%A0%E6%95%99%E7%A8%8B/"/>
      <url>/2021/08/22/2021-09-05-%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AD%A6%E4%B9%A0%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="小程序学习教程"><a href="#小程序学习教程" class="headerlink" title="小程序学习教程"></a>小程序学习教程</h1><h2 id="1-打开小程序"><a href="#1-打开小程序" class="headerlink" title="1. 打开小程序"></a>1. 打开小程序</h2><p><img src="C:\Users\zy\AppData\Roaming\Typora\typora-user-images\image-20210801164001688.png" alt="image-20210801164001688"></p><p><img src="C:\Users\zy\AppData\Roaming\Typora\typora-user-images\image-20210801164041257.png" alt="image-20210801164041257"></p><h2 id="2-小程序基本语法结构"><a href="#2-小程序基本语法结构" class="headerlink" title="2. 小程序基本语法结构"></a>2. 小程序基本语法结构</h2><p><img src="C:\Users\zy\AppData\Roaming\Typora\typora-user-images\image-20210801180130683.png" alt="image-20210801180130683"></p><p>app.js、app.json和app.wxss。一个小程序项目必须有这3个描述App的文件，它们必须放在应用程序的根目录下</p><p><img src="C:\Users\zy\AppData\Roaming\Typora\typora-user-images\image-20210822094543217.png" alt="image-20210822094543217"></p><p>一个小程序由若干个页面文件构成，每个页面可以由4个文件构成，分别是：.js、.wxml、.wxss和.json文件</p><p><img src="C:\Users\zy\AppData\Roaming\Typora\typora-user-images\image-20210822094415438.png" alt="image-20210822094415438"></p><p>utils文件夹，这个文件夹用来存放一些公共的js文件，比如utils下面的util.js。我们可以任意定义类似于utils文件夹的目录，并放在小程序的任意位置，小程序对此并没有任何限制。</p><p><img src="C:\Users\zy\AppData\Roaming\Typora\typora-user-images\image-20210801235710703.png" alt="image-20210801235710703"></p><p><img src="C:\Users\zy\AppData\Roaming\Typora\typora-user-images\image-20210801164624666.png" alt="image-20210801164624666"></p><p><img src="C:\Users\zy\AppData\Roaming\Typora\typora-user-images\image-20210801180130683.png" alt="image-20210801180130683"></p><h4 id="小程序的目录结构"><a href="#小程序的目录结构" class="headerlink" title="小程序的目录结构"></a>小程序的目录结构</h4><ul><li><p>js： 交互逻辑</p></li><li><p>json：配置文件</p></li><li><p>wxml：展现什么文字</p></li><li><p>wxss：文字什么颜色</p></li><li><p>pages：包含哪些页面</p></li><li><p>utils：一些写的小工具函数等</p></li></ul><h3 id="3-添加小程序各导航页"><a href="#3-添加小程序各导航页" class="headerlink" title="3. 添加小程序各导航页"></a>3. 添加小程序各导航页</h3><p><img src="C:\Users\zy\AppData\Roaming\Typora\typora-user-images\image-20210801232405588.png" alt="image-20210801232405588"></p><h6 id=""><a href="#" class="headerlink" title=""></a></h6><h3 id="4-全局配置–app-json"><a href="#4-全局配置–app-json" class="headerlink" title="4. 全局配置–app.json"></a>4. 全局配置–<a href="https://developers.weixin.qq.com/miniprogram/dev/reference/configuration/app.html#%E5%85%A8%E5%B1%80%E9%85%8D%E7%BD%AE">app.json</a></h3><table><thead><tr><th>属性</th><th>描述</th><th>注意内容</th></tr></thead><tbody><tr><td><a href="https://developers.weixin.qq.com/miniprogram/dev/reference/configuration/app.html#pages">pages</a></td><td>页面路径列表</td><td>1. 未指定 entryPagePath  时，数组的第一项代表小程序的初始页面（首页）     2. 小程序中新增/减少页面，都需要对 pages 数组进行修改。</td></tr><tr><td><a href="https://developers.weixin.qq.com/miniprogram/dev/reference/configuration/app.html#window">window</a></td><td>全局的默认窗口表现</td><td>用于设置小程序的状态栏、导航条、标题、窗口背景色。</td></tr><tr><td><a href="https://developers.weixin.qq.com/miniprogram/dev/reference/configuration/app.html#tabBar">tabBar</a></td><td>底部 tab 栏的表现</td><td>通过 tabBar 配置项指定 tab 栏的表现，以及 tab  切换时显示的对应页面。</td></tr><tr><td><a href="https://developers.weixin.qq.com/miniprogram/dev/reference/configuration/app.html#sitemapLocation">sitemapLocation</a></td><td>指明 sitemap.json 的位置</td><td>必须有</td></tr><tr><td><a href="https://developers.weixin.qq.com/miniprogram/dev/reference/configuration/app.html#entryPagePath">entryPagePath</a></td><td>小程序默认启动首页</td><td>指定小程序的默认启动路径（首页），常见情景是从微信聊天列表页下拉启动、小程序列表启动等。如果不填，将默认为 pages 列表的第一项</td></tr><tr><td><a href="https://developers.weixin.qq.com/miniprogram/dev/reference/configuration/app.html#useextendedlib">useExtendedLib</a></td><td>指定需要引用的扩展库</td><td>指定需要引用的扩展库。目前支持以下项目：     kbone: 多端开发框架     <a href="https://weui.io/">weui: WeUI 组件库</a></td></tr><tr><td><a href="https://developers.weixin.qq.com/miniprogram/dev/reference/configuration/app.html#usingComponents">usingComponents</a></td><td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/custom-component/">全局自定义组件配置</a></td><td>“usingComponents”: {       “mp-icon”:  “weui-miniprogram/icon/icon”      }</td></tr></tbody></table><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">  <span class="attr">"pages"</span>:[</span><br><span class="line">    <span class="string">"pages/homeinfo/homepage/homepage"</span>,</span><br><span class="line">    <span class="string">"pages/index/index"</span>,</span><br><span class="line">    <span class="string">"pages/logs/logs"</span>,</span><br><span class="line">    <span class="string">"pages/messageinfo/message/message"</span>,</span><br><span class="line">    <span class="string">"pages/myinfo/my/my"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"window"</span>:{</span><br><span class="line">    <span class="attr">"backgroundTextStyle"</span>:<span class="string">"light"</span>,</span><br><span class="line">    <span class="attr">"navigationBarBackgroundColor"</span>: <span class="string">"#fff"</span>,</span><br><span class="line">    <span class="attr">"navigationBarTitleText"</span>: <span class="string">"Weixin"</span>,</span><br><span class="line">    <span class="attr">"navigationBarTextStyle"</span>:<span class="string">"black"</span></span><br><span class="line">  },</span><br><span class="line">  <span class="attr">"style"</span>: <span class="string">"v2"</span>,</span><br><span class="line">  <span class="attr">"sitemapLocation"</span>: <span class="string">"sitemap.json"</span>,</span><br><span class="line">  <span class="attr">"tabBar"</span>: {</span><br><span class="line">    <span class="attr">"color"</span>: <span class="string">"#000000"</span>,</span><br><span class="line">    <span class="attr">"selectedkColor"</span>:<span class="string">"#ffa500"</span>,</span><br><span class="line">    <span class="attr">"backgroundColor"</span>: <span class="string">"green"</span>,</span><br><span class="line">    <span class="attr">"list"</span>:[</span><br><span class="line">      {</span><br><span class="line">        <span class="attr">"pagePath"</span>: <span class="string">"pages/homeinfo/homepage/homepage"</span>,</span><br><span class="line">        <span class="attr">"iconPath"</span>: <span class="string">"icons/icon_tabbar_cat_un.png"</span>,</span><br><span class="line">        <span class="attr">"selectedIconPath"</span>: <span class="string">"icons/icon_tabbar_cat_se.png"</span>,</span><br><span class="line">        <span class="attr">"text"</span>: <span class="string">"首页"</span></span><br><span class="line">      },</span><br><span class="line">      {</span><br><span class="line">        <span class="attr">"pagePath"</span>: <span class="string">"pages/messageinfo/message/message"</span>,</span><br><span class="line">        <span class="attr">"iconPath"</span>: <span class="string">"icons/icon_tabbar_msg_un.png"</span>,</span><br><span class="line">        <span class="attr">"selectedIconPath"</span>: <span class="string">"icons/icon_tabbar_msg_se.png"</span>,</span><br><span class="line">        <span class="attr">"text"</span>: <span class="string">"消息"</span></span><br><span class="line">      },</span><br><span class="line">      {</span><br><span class="line">        <span class="attr">"pagePath"</span>: <span class="string">"pages/myinfo/my/my"</span>,</span><br><span class="line">        <span class="attr">"iconPath"</span>: <span class="string">"icons/icon_tabbar_mi_un.png"</span>,</span><br><span class="line">        <span class="attr">"selectedIconPath"</span>: <span class="string">"icons/icon_tabbar_mi_se.png"</span>,</span><br><span class="line">        <span class="attr">"text"</span>: <span class="string">"我的"</span></span><br><span class="line">      }</span><br><span class="line">    ]</span><br><span class="line">  },</span><br><span class="line">  <span class="attr">"useExtendedLib"</span>: {</span><br><span class="line">    <span class="attr">"weui"</span>:<span class="literal">true</span></span><br><span class="line">  },</span><br><span class="line">  <span class="attr">"usingComponents"</span>: {</span><br><span class="line">    <span class="attr">"mp-icon"</span>:</span><br><span class="line">    <span class="string">"weui-miniprogram/icon/icon"</span></span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="5-设置页面样式"><a href="#5-设置页面样式" class="headerlink" title="5. 设置页面样式"></a>5. 设置页面样式</h3><p><a href="https://www.ruanyifeng.com/blog/2020/10/wechat-miniprogram-tutorial-part-two.html">https://www.ruanyifeng.com/blog/2020/10/wechat-miniprogram-tutorial-part-two.html</a></p><p>实际开发中，直接对<code>&lt;text&gt;</code>标签设置样式，会影响到所有的文本。一般不这样用，而是通过<code>class</code>属性区分不同类型的文本，然后再对每种<code>class</code>设置样式。</p><blockquote><p>我们为<code>&lt;text&gt;</code>标签加上了一个<code>class</code>属性，值为<code>title</code>。</p></blockquote><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">text</span> <span class="attr">class</span>=<span class="string">"title"</span>&gt;</span>hello world<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>然后在 wxss文件中对<code>class</code>设置样式</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">page {</span><br><span class="line">  <span class="attribute">background-color</span>: pink;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.title</span> {</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">24pt</span>;</span><br><span class="line">  <span class="attribute">color</span>: blue;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="Flex布局"><a href="#Flex布局" class="headerlink" title="Flex布局"></a>Flex布局</h4><blockquote><p><a href="https://www.ruanyifeng.com/blog/2015/07/flex-grammar.html">Flex布局教程</a></p></blockquote><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">page{</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">100%</span>;   <span class="comment">/* 页面高度为整个屏幕高度 */</span></span><br><span class="line">    <span class="attribute">width</span>:<span class="number">750</span>rpx;  <span class="comment">/* 页面宽度为整个屏幕宽度*/</span></span><br><span class="line">    <span class="attribute">display</span>:flex;  <span class="comment">/* 页面采用Flex布局*/</span></span><br><span class="line">    <span class="attribute">justify-content</span>:center; <span class="comment">/*页面元素水平居中*/</span></span><br><span class="line">    <span class="attribute">align-items</span>:center; <span class="comment">/*页面元素垂直居中*/</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="weui"><a href="#weui" class="headerlink" title="weui"></a>weui</h4><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"weui-btn weui-btn_primary"</span>&gt;</span></span><br><span class="line">    主操作</span><br><span class="line">  <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"weui-btn weui-btn_primary weui-btn_loading"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"weui-loading"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>正在加载</span><br><span class="line">  <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"weui-btn weui-btn_primary weui-btn_disabled"</span>&gt;</span></span><br><span class="line">    禁止点击</span><br><span class="line">  <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><img src="C:\Users\zy\AppData\Roaming\Typora\typora-user-images\image-20210804002031507.png" alt="image-20210804002031507"></p><p>加入 WeUI 框架以后，只要为按钮添加不同的 class，就能自动出现框架提供的样式。你可以根据需要，为页面选择不同的按钮。</p><p><a href="https://github.com/Tencent/weui-wxss">weui元素样式</a></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">weui-btn：按钮样式的基类</span><br><span class="line">weui-btn_primary：主按钮的样式。如果是次要按钮，就使用weui-btn_default。</span><br><span class="line">weui-btn_loading：按钮点击后，操作正在进行中的样式。该类内部需要用&lt;i&gt;元素，加上表示正在加载的图标。</span><br><span class="line">weui-btn_disabled：按钮禁止点击的样式。</span><br></pre></td></tr></tbody></table></figure><h4 id="加入图片"><a href="#加入图片" class="headerlink" title="加入图片"></a>加入图片</h4><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;view&gt;</span><br><span class="line">  &lt;image</span><br><span class="line">    <span class="attribute">src</span>="https://picsum.photos/<span class="number">200</span><span class="string">"</span></span><br><span class="line"><span class="string">    style="</span>height: <span class="number">375</span>rpx; <span class="attribute">width</span>: <span class="number">375</span>rpx;"</span><br><span class="line">  &gt;&lt;/image&gt;</span><br><span class="line">&lt;/view&gt;</span><br></pre></td></tr></tbody></table></figure><h4 id="图片轮播"><a href="#图片轮播" class="headerlink" title="图片轮播"></a>图片轮播</h4><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;view&gt;</span><br><span class="line">  &lt;swiper</span><br><span class="line">    indicator-dots="{{true}}"  </span><br><span class="line">    autoplay="{{true}}"</span><br><span class="line">    style="<span class="attribute">width</span>: <span class="number">750</span>rpx;"&gt;</span><br><span class="line">    &lt;swiper-item&gt;</span><br><span class="line">      &lt;image <span class="attribute">src</span>="https://picsum.photos/<span class="number">200</span><span class="string">"&gt;&lt;/image&gt;</span></span><br><span class="line"><span class="string">    &lt;/swiper-item&gt;</span></span><br><span class="line"><span class="string">    &lt;swiper-item&gt;</span></span><br><span class="line"><span class="string">      &lt;image src="</span>https://picsum.photos/<span class="number">250</span><span class="string">"&gt;&lt;/image&gt;</span></span><br><span class="line"><span class="string">    &lt;/swiper-item&gt;</span></span><br><span class="line"><span class="string">    &lt;swiper-item&gt;</span></span><br><span class="line"><span class="string">      &lt;image src="</span>https://picsum.photos/<span class="number">300</span><span class="string">"&gt;&lt;/image&gt;</span></span><br><span class="line"><span class="string">    &lt;/swiper-item&gt;</span></span><br><span class="line"><span class="string">  &lt;/swiper&gt;</span></span><br><span class="line"><span class="string">&lt;/view&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="6-数据绑定"><a href="#6-数据绑定" class="headerlink" title="6.数据绑定"></a>6.数据绑定</h3><p>脚本里面的某些数据，会自动成为页面可以读取的全局变量，两者会同步变动。也就是说，脚本里面修改这个变量的值，页面会随之变化；反过来，页面上修改了这段内容，对应的脚本变量也会随之变化。这也叫做 MVVM 模式。</p><p>在<code>home.js</code>文件中，写入：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Page({</span><br><span class="line">  <span class="attr">data</span>: {</span><br><span class="line">    <span class="attr">name</span>: <span class="string">'张三'</span></span><br><span class="line">  }</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><p>在<code>home.wxml</code>文件中，加入<code>name</code>变量</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">text</span> <span class="attr">class</span>=<span class="string">"title"</span>&gt;</span>hello {{name}}<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="7-全局数据"><a href="#7-全局数据" class="headerlink" title="7.全局数据"></a>7.全局数据</h3><p>数据绑定只对当前页面有效，如果某些数据要在多个页面共享，就需要写到全局配置对象里面。</p><p>在<code>aap.js</code>中，写入：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">App({</span><br><span class="line">    <span class="attr">globalData</span>:{</span><br><span class="line">        <span class="attr">now</span>:(<span class="keyword">new</span> <span class="built_in">Date</span>()).toLocaleString()</span><br><span class="line">    }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><blockquote><p><code>App()</code>方法的参数配置对象有一个<code>globalData</code>属性，这个属性就是我们要在多个页面之间分享的值</p></blockquote><p>在<code>home.js</code>中，写入以下内容，在页面中获取全局对象</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> app = getApp()</span><br><span class="line">Page({</span><br><span class="line">    <span class="attr">data</span>:{</span><br><span class="line">        <span class="attr">now</span>:app.globalData.now</span><br><span class="line">    }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><blockquote><p><code>getApp()</code>函数是小程序原生提供的函数方法，用于从页面获取 App 实例对象。拿到实例对象以后，就能从它上面拿到全局配置对象的<code>globalData</code>属性，从而把<code>app.globalData.now</code>赋值给页面脚本的<code>now</code>属性，进而通过数据绑定机制，变成页面的全局变量<code>now</code>。</p></blockquote><p>修改<code>home.wxml</code>页面</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">text</span> <span class="attr">class</span>=<span class="string">"title"</span>&gt;</span> 现在是{{now}}<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="8-事件"><a href="#8-事件" class="headerlink" title="8.事件"></a>8.事件</h3><p>事件是小程序跟用户互动的主要手段。小程序通过接收各种用户事件，执行回调函数，做出反应。</p><p><strong>先是捕获阶段（由上层元素向下层元素传播），然后是冒泡阶段（由下层元素向上层元素传播）。所以，同一个事件在同一个元素上面其实会触发两次：捕获阶段一次，冒泡阶段一次。</strong></p><p>小程序允许页面元素，通过属性指定各种事件的回调函数，并且还能够指定是哪个阶段触发回调函数。具体方法是为事件属性名加上不同的前缀。小程序提供四种前缀。</p><blockquote><ul><li><code>capture-bind</code>：捕获阶段触发。</li><li><code>capture-catch</code>：捕获阶段触发，并中断事件，不再向下传播，即中断捕获阶段，并取消随后的冒泡阶段。</li><li><code>bind</code>：冒泡阶段触发。</li><li><code>catch</code>：冒泡阶段触发，并取消事件进一步向上冒泡。</li></ul></blockquote><p>在<code>home.wxml</code>文件中，写入代码：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">text</span> <span class="attr">class</span>=<span class="string">"title"</span>&gt;</span>hello {{name}}<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">bind:tap</span>=<span class="string">"buttonHandler"</span>&gt;</span></span><br><span class="line">        点击</span><br><span class="line">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>我们为页面加上了一个按钮，并为这个按钮指定了触摸事件（<code>tap</code>）的回调函数<code>buttonHandler</code>，<code>bind:</code>前缀表示这个回调函数会在冒泡阶段触发（前缀里面的冒号可以省略，即写成<code>bindtap</code>也可以）</p></blockquote><p>回调函数必须在页面脚本中定义，打开<code>home.js</code></p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Page({</span><br><span class="line">    <span class="attr">data</span>:{</span><br><span class="line">        <span class="attr">name</span> : <span class="string">'张宇'</span></span><br><span class="line">    },</span><br><span class="line">    <span class="function"><span class="title">buttonHandler</span>(<span class="params">event</span>)</span>{</span><br><span class="line">        <span class="built_in">this</span>.setData({</span><br><span class="line">            <span class="attr">name</span>:<span class="string">'李四'</span></span><br><span class="line">        })</span><br><span class="line">    }</span><br><span class="line">})</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><blockquote><p><code>Page()</code>方法的参数配置对象里面，定义了<code>buttonHandler()</code>，这就是<code>&lt;button&gt;</code>元素的回调函数。它有几个地方需要注意。</p><p>（1）事件回调函数的参数是事件对象<code>event</code>，可以从它上面获取<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/view/wxml/event.html">事件信息</a>，比如事件类型、发生时间、发生节点、当前节点等等。</p><p>（2）事件回调函数内部的<code>this</code>，指向页面实例。</p><p>（3）页面实例的<code>this.setData()</code>方法，可以更改配置对象的<code>data</code>属性，进而通过数据绑定机制，导致页面上的全局变量发生变化。</p></blockquote><p>修改页面配置对象的<code>data</code>属性时，不要直接修改<code>this.data</code>，这不仅无法触发事件绑定机制去变更页面，还会造成数据不一致，所以一定要通过<code>this.setData()</code>去修改。<code>this.setData()</code>是一个很重要的方法，有很多细节，详细介绍可以读一下<a href="https://developers.weixin.qq.com/miniprogram/dev/reference/api/Page.html#Page-prototype-setData-Object-data-Function-callback">官方文档</a>。</p><h3 id="9-动态提示Toast"><a href="#9-动态提示Toast" class="headerlink" title="9.动态提示Toast"></a>9.动态提示Toast</h3><p>小程序提供了很多组件和方法，用来增强互动效果。比如，每次操作后，都显示一个动态提示，告诉用户操作的结果，这种效果叫做 Toast。</p><p>在<code>home.js</code>中，为<code>this.setData()</code>加上第二个参数</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Page({</span><br><span class="line">    <span class="attr">data</span>:{</span><br><span class="line">        <span class="attr">name</span>:<span class="string">'张三'</span></span><br><span class="line">    },</span><br><span class="line">    <span class="function"><span class="title">buttonHandler</span>(<span class="params">event</span>)</span>{</span><br><span class="line">        <span class="built_in">this</span>.setData({</span><br><span class="line">            <span class="attr">name</span>:<span class="string">'李四'</span></span><br><span class="line">        }, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">            wx.showToast({</span><br><span class="line">                <span class="attr">title</span>:<span class="string">'操作完成'</span>,</span><br><span class="line">                <span class="attr">duration</span>:<span class="number">700</span></span><br><span class="line">            })</span><br><span class="line">        })</span><br><span class="line">    }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><blockquote><p><code>this.setData()</code>方法加入了第二个参数，这是一个函数，它会在页面变更完毕后（即<code>this.setData()</code>执行完）自动调用。</p><p>这个参数函数内部，调用了<code>wx.showToast()</code>方法，<code>wx</code>是小程序提供的原生对象，所有客户端 API 都定义在这个对象上面，<code>wx.showToast()</code>会展示微信内置的动态提示框，它的参数对象的<code>title</code>属性指定提示内容，<code>duration</code>属性指定提示框的展示时间，单位为毫秒。</p></blockquote><h3 id="10-对话框Modal"><a href="#10-对话框Modal" class="headerlink" title="10.对话框Modal"></a>10.对话框Modal</h3><p>用<code>wx.showModal()</code>方法添加对话框，打开<code>home.js</code>文件，修改如下：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Page({</span><br><span class="line">    <span class="attr">data</span>:{</span><br><span class="line">        <span class="attr">name</span>:<span class="string">'张三'</span></span><br><span class="line">    },</span><br><span class="line">    <span class="function"><span class="title">buttonHandler</span>(<span class="params">event</span>)</span>{</span><br><span class="line">        <span class="keyword">const</span> that = <span class="built_in">this</span>:</span><br><span class="line">        wx.showModal({</span><br><span class="line">            <span class="attr">title</span>:<span class="string">'操作确认'</span>,</span><br><span class="line">            <span class="attr">content</span>:<span class="string">'你要确认修改吗？'</span></span><br><span class="line">            <span class="function"><span class="title">success</span>(<span class="params">res</span>)</span>{</span><br><span class="line">            <span class="keyword">of</span> (res.confirm){</span><br><span class="line">                that.setData({</span><br><span class="line">                    <span class="attr">name</span>:<span class="string">'李四'</span></span><br><span class="line">                },<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">                    <span class="attr">title</span>:<span class="string">'操作完成'</span>,</span><br><span class="line">                        <span class="attr">duration</span>:<span class="number">700</span></span><br><span class="line">                });</span><br><span class="line">                });</span><br><span class="line">                } <span class="keyword">else</span> <span class="keyword">if</span> (res.cancel) {</span><br><span class="line">                 <span class="built_in">console</span>.log(<span class="string">'用户点击取消'</span>);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        })</span><br><span class="line">    }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><h3 id="11-wxml渲染语法"><a href="#11-wxml渲染语法" class="headerlink" title="11.wxml渲染语法"></a>11.wxml渲染语法</h3><p>WXML不仅有功能标签，还可以设置页面渲染的生效条件，以及进行循环处理。</p><p>在<code>home.js</code>里写入一个数组</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Page({</span><br><span class="line">    <span class="attr">data</span>:{</span><br><span class="line">        <span class="attr">items</span>:[<span class="string">'事项 A'</span>,<span class="string">'事项 B'</span>, <span class="string">'事项 C'</span>]</span><br><span class="line">    }</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><blockquote><p><code>Page()</code>的参数配置对象的<code>data.items</code>属性是一个数组。通过数据绑定机制，页面可以读取全局变量<code>items</code>，拿到这个数组。</p></blockquote><p>如何将每一个数据成员都 展现到页面上？</p><p>打开<code>home.wxml</code>，写入</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">text</span> <span class="attr">class</span>=<span class="string">"title"</span> <span class="attr">wx:for</span>=<span class="string">"{{items}}"</span>&gt;</span></span><br><span class="line">    {{index}}，{{item}}</span><br><span class="line">    <span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>上面代码中，<code>&lt;text&gt;</code>标签的<code>wx:for</code>属性，表示当前标签（<code>&lt;text&gt;</code>）启用数组循环，处理<code>items</code>数组。数组有多少个成员，就会生成多少个<code>&lt;text&gt;</code>。</p></blockquote><h3 id="12-客户端数据存储-如何使用客户端数据存储"><a href="#12-客户端数据存储-如何使用客户端数据存储" class="headerlink" title="12.客户端数据存储-如何使用客户端数据存储"></a>12.客户端数据存储-如何使用客户端数据存储</h3><p>小程序允许将一部分数据保存在微信APP的本地存储里（缓存）。下次需要用到数据，则直接从本地读取，大大加快渲染。</p><p>打开<code>home.wxml</code></p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">text</span> <span class="attr">class</span>=<span class="string">"title"</span> <span class="attr">wx:for</span>=<span class="string">"{{items}}"</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> 小程序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>英语学习</title>
      <link href="/2020/07/12/2021-09-05-%E8%8B%B1%E8%AF%AD%E5%AD%A6%E4%B9%A0/"/>
      <url>/2020/07/12/2021-09-05-%E8%8B%B1%E8%AF%AD%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p>老雷博客：<a href="https://thelongestway.com/2016/08/08/apologies-to-the-caboose/">https://thelongestway.com/2016/08/08/apologies-to-the-caboose/</a></p><p>阅读全世界：<a href="https://ayearofreadingtheworld.com/2020/07/30/book-of-the-month-gael-faye/">https://ayearofreadingtheworld.com/2020/07/30/book-of-the-month-gael-faye/</a></p><p>英文书籍下载网址：<br><a href="https://book4you.org/howtodonate.php">https://book4you.org/howtodonate.php</a></p><p>书籍转换网址： <a href="https://cloudconvert.com/">https://cloudconvert.com/</a></p><!-- 1. 如果你忽略了女友傳來的簡訊...(This Is What Happens When You Ignore Your Girlfriend's Texts)<iframe width="560" height="525" src="https://tw.voicetube.com/embed/18979?username=130734994086840&apilang=zh_tw" frameborder="0" allowfullscreen></iframe>2. 什麼都改變不了我對你的愛 (Nothing Gonna Change My Love For You (Lyric)-TRUE LOVE<iframe width="560" height="525" src="https://tw.voicetube.com/embed/34268?username=130734994086840&apilang=zh_tw" frameborder="0" allowfullscreen></iframe>3. 來談談人生吧：小男孩與老爺爺的觀點有什麼不同？ (57 Years Apart - A Boy And a Man Talk About Life)<iframe width="560" height="525" src="https://tw.voicetube.com/embed/44159?username=130734994086840&apilang=zh_tw" frameborder="0" allowfullscreen></iframe>5. 阿甘正傳 (Forrest Gump) 電影片段<iframe width="560" height="525" src="https://tw.voicetube.com/embed/273?username=130734994086840&apilang=zh_tw" frameborder="0" allowfullscreen></iframe>1. 【TEDx】別再自欺欺人了！你其實還沒踏出舒適圈 (TEDxSF - Mel Robbins - F--- YOU - How To Stop Screwing Yourself Over)<iframe width="560" height="525" src="https://tw.voicetube.com/embed/11025?username=130734994086840&apilang=zh_tw" frameborder="0" allowfullscreen></iframe>6. 重新定義「像個女孩一樣」 (Always #LikeAGirl)<iframe width="560" height="525" src="https://tw.voicetube.com/embed/14416?username=130734994086840&apilang=zh_tw" frameborder="0" allowfullscreen></iframe>8. 怎麼用英文寒暄呢 (Greeting People in English)<iframe width="560" height="525" src="https://tw.voicetube.com/embed/43825?username=130734994086840&apilang=zh_tw" frameborder="0" allowfullscreen></iframe>9. 來自第十一個博士的電話《超時空博士》(A Phonecall From The Eleventh Doctor - Doctor Who Series 8 - BBC)<iframe width="560" height="525" src="https://tw.voicetube.com/embed/26213?username=130734994086840&apilang=zh_tw" frameborder="0" allowfullscreen></iframe>10. 【TEDx】你如何定義你自己？ (How do you define yourself? Lizzie Velasquez at TEDxAustinWomen)<iframe width="560" height="525" src="https://tw.voicetube.com/embed/12867?username=130734994086840&apilang=zh_tw" frameborder="0" allowfullscreen></iframe>11. 想放棄！？告訴你為什麼你不能放棄！ (JUST KEEP STUDYING! - Study Motivation)<iframe width="560" height="525" src="https://tw.voicetube.com/embed/124625?username=130734994086840&apilang=zh_tw" frameborder="0" allowfullscreen></iframe>12. 【Ted-Ed】沒自信？試試「自信加速三撇步」吧！(3 tips to boost your confidence)<iframe width="560" height="525" src="https://tw.voicetube.com/embed/29821?username=130734994086840&apilang=zh_tw" frameborder="0" allowfullscreen></iframe>13.睡覺可以讓你變得更自律？能讓今天的你比昨天更好的秘密是什麼？(How I Disciplined Myself)<iframe width="560" height="525" src="https://tw.voicetube.com/embed/75521?username=130734994086840&apilang=zh_tw" frameborder="0" allowfullscreen></iframe>14. 成功人士必備：高度自律人的 6 種好習慣！ (How to be Organized for School, College or Life | The 6 Habits of Highly Organized People)<iframe width="560" height="525" src="https://tw.voicetube.com/embed/51970?username=130734994086840&apilang=zh_tw" frameborder="0" allowfullscreen></iframe>15. 不要再浪費你的時間了！ (STOP WASTING TIME | Motivational Video for Success & Studying)<iframe width="560" height="525" src="https://tw.voicetube.com/embed/65608?username=130734994086840&apilang=zh_tw" frameborder="0" allowfullscreen></iframe>16. 你不能不知道：面試成功的五大秘訣 (English Language Learning Tips - Job Interviews in English)<iframe width="560" height="525" src="https://tw.voicetube.com/embed/14476?username=130734994086840&apilang=zh_tw" frameborder="0" allowfullscreen></iframe>17. 【TED-Ed】成功者的 8 個特質 (8 traits of successful people - Richard St. John)<iframe width="560" height="525" src="https://tw.voicetube.com/embed/2862?username=130734994086840&apilang=zh_tw" frameborder="0" allowfullscreen></iframe>18. 你的人生，真的就這麼短 (This Is How Short Your Life Is.)<iframe width="560" height="525" src="https://tw.voicetube.com/embed/55095?username=130734994086840&apilang=zh_tw" frameborder="0" allowfullscreen></iframe>19. 【實用英文】5 個不能不知的電子郵件用語 (5 useful email expressions)<iframe width="560" height="525" src="https://tw.voicetube.com/embed/22270?username=130734994086840&apilang=zh_tw" frameborder="0" allowfullscreen></iframe>20. 【職場的進擊】千萬要掌握，面試十大經典必問題！( Top 10 Job Interview Questions)<iframe width="560" height="525" src="https://tw.voicetube.com/embed/6054?username=130734994086840&apilang=zh_tw" frameborder="0" allowfullscreen></iframe>21. 【TED】關於 TEDTalks 的謊言與統計數據 (Lies, damned lies and statistics (about TEDTalks))<iframe width="560" height="525" src="https://tw.voicetube.com/embed/62590?username=130734994086840&apilang=zh_tw" frameborder="0" allowfullscreen></iframe>22. 【TEDx】先問為什麼 (Start with why - how great leaders inspire action: Simon Sinek at TEDxPugetSound)<iframe width="560" height="525" src="https://tw.voicetube.com/embed/13831?username=130734994086840&apilang=zh_tw" frameborder="0" allowfullscreen></iframe>23. 【TED】Meg Jay: 二十歲的人生不能等到三十才開始 (Why 30 is not the new 20 | Meg Jay)<iframe width="560" height="525" src="https://tw.voicetube.com/embed/16212?username=130734994086840&apilang=zh_tw" frameborder="0" allowfullscreen></iframe>24. 【TED】如何只花 20 小時學習任何東西？ (Josh Kaufman | 20 Hours to Learn Anything (Key Points Talk))<iframe width="560" height="525" src="https://tw.voicetube.com/embed/36338?username=130734994086840&apilang=zh_tw" frameborder="0" allowfullscreen></iframe>25. 【TED-Ed】克服障礙，證明自我 (Overcoming obstacles - Steven Claunch)<iframe width="560" height="525" src="https://tw.voicetube.com/embed/12823?username=130734994086840&apilang=zh_tw" frameborder="0" allowfullscreen></iframe>26. 【TED】Kelly McGonigal: 如何讓壓力成為你的朋友 (How to make stress your friend | Kelly McGonigal)<iframe width="560" height="525" src="https://tw.voicetube.com/embed/8236?username=130734994086840&apilang=zh_tw" frameborder="0" allowfullscreen></iframe>27. 【TED】班傑明‧華勒斯 (Benjamin Wallace) 談快樂的價值 (Benjamin Wallace: The price of happiness)<iframe width="560" height="525" src="https://tw.voicetube.com/embed/15931?username=130734994086840&apilang=zh_tw" frameborder="0" allowfullscreen></iframe>28. 【六人行精彩片段】新年新希望半途而廢的瑞秋 (Friends:The One With All The Resolutions)<iframe width="560" height="525" src="https://tw.voicetube.com/embed/10869?username=130734994086840&apilang=zh_tw" frameborder="0" allowfullscreen></iframe>29. 【TED-Ed】你愛睡覺嗎？睡好覺的好處 (The benefits of a good night's sleep)<iframe width="560" height="525" src="https://tw.voicetube.com/embed/20332?username=130734994086840&apilang=zh_tw" frameborder="0" allowfullscreen></iframe>30. 【TED】伊莎貝·阿言德: 如何對生活充滿熱情—無論你幾歲 (Isabel Allende: How to live passionately—no matter your age)<iframe width="560" height="525" src="https://tw.voicetube.com/embed/17856?username=130734994086840&apilang=zh_tw" frameborder="0" allowfullscreen></iframe> -->]]></content>
      
      
      <categories>
          
          <category> English </category>
          
      </categories>
      
      
        <tags>
            
            <tag> English </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL面试题</title>
      <link href="/2020/07/10/2020-09-05-%E5%B8%B8%E8%A7%81%E7%9A%84SQL%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
      <url>/2020/07/10/2020-09-05-%E5%B8%B8%E8%A7%81%E7%9A%84SQL%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h3 id="1-sql的运行顺序"><a href="#1-sql的运行顺序" class="headerlink" title="1. sql的运行顺序"></a>1. sql的运行顺序</h3><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">from - where - group by - having - select - order by - limit</span><br></pre></td></tr></tbody></table></figure><blockquote><p>先执行from部分，知道从哪个表提取数据，然后执行where对条件进行限，然后通过groupby进行聚合，然后通过having对聚合后的结果进行过滤,再利用select把数据查询出来， 然后通过order by 对数据进行排序，通过limit找出前几位。<br><strong>如果有子查询，先执行子查询的部分，然后再执行其他部分。</strong></p></blockquote><h3 id="2-创建数据表"><a href="#2-创建数据表" class="headerlink" title="2. 创建数据表"></a>2. 创建数据表</h3><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE 表名</span><br><span class="line">(</span><br><span class="line">    列名1 数据类型 约束 comment 注释</span><br><span class="line">    列名2 数据类型 约束 comment 注释</span><br><span class="line">    设置主键</span><br><span class="line">)设置储存引擎 设置编码</span><br></pre></td></tr></tbody></table></figure><ul><li>实例<figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `test`</span><br><span class="line">(</span><br><span class="line">    `id` int(11) NOT NULL AUTO_INCREMENT comment "id"</span><br><span class="line">    ,`name` varchar(255) comment "用户名"</span><br><span class="line">    ,`uv` varchar(255) comment "uv"</span><br><span class="line">    PRIMARY KEY (`id`)</span><br><span class="line">)ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT=utf8</span><br></pre></td></tr></tbody></table></figure></li></ul><h3 id="3-mysql中如何插入一条数据"><a href="#3-mysql中如何插入一条数据" class="headerlink" title="3. mysql中如何插入一条数据"></a>3. mysql中如何插入一条数据</h3><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">insert into 表名（字段名1，字段名2...) values(值1，值2...)</span><br></pre></td></tr></tbody></table></figure><h3 id="4-where和having的区别"><a href="#4-where和having的区别" class="headerlink" title="4. where和having的区别"></a>4. where和having的区别</h3><blockquote><ul><li>Where是一个约束声明，使用Where来约束来从数据库查询的范围，Where是在结果返回之前起作用的，且Where中不能使用聚合函数。</li><li>Having是一个过滤声明，是在查询返回结果集以后对查询结果进行的过滤操作，在Having中可以使用聚合函数</li></ul></blockquote><h3 id="5-为什么使用having可以用聚合函数，但是where不可以"><a href="#5-为什么使用having可以用聚合函数，但是where不可以" class="headerlink" title="5. 为什么使用having可以用聚合函数，但是where不可以?"></a>5. 为什么使用having可以用聚合函数，但是where不可以?</h3><blockquote><p>主要是因为sql的执行顺序不同导致， sql先需要执行where来查询出数据，然后才可以用having对结果进行聚合。</p></blockquote><h3 id="6-union-和union-all-的区别"><a href="#6-union-和union-all-的区别" class="headerlink" title="6. union 和union all 的区别"></a>6. union 和union all 的区别</h3><blockquote><p>从使用上来说：</p><p>1、对重复结果的处理：UNION在进行表链接后会筛选掉重复的记录，Union All不会去除重复记录。<br>2、对排序的处理：Union将会按照字段的顺序进行排序；UNION ALL只是简单的将两个结果合并后就返回。</p><p>从效率上来说：</p><p>UNION ALL 要比UNION快很多，所以，如果可以确认合并的两个结果集中不包含重复数据且不需要排序时的话，那么就使用UNION ALL。</p></blockquote><h3 id="7-hive和mysql的区别"><a href="#7-hive和mysql的区别" class="headerlink" title="7.  hive和mysql的区别"></a>7.  hive和mysql的区别</h3><blockquote><ul><li>hive中无法通过更新语句对数据进行更新， mysql中可以。</li><li>hive中数据以文件的形式进行存储，文件存储格式为：orc压缩文件、序列化文件；mysql中数据存储在自己的系统中。</li><li>hive中创建表必须指定 分隔符，mysql中不需要指定。</li><li>hive中没有索引，mysql中有索引</li><li>hive可以存储千万级往上的数据，mysql只可存少量业务数据。</li></ul></blockquote><h3 id="8-drop与delete的区别"><a href="#8-drop与delete的区别" class="headerlink" title="8. drop与delete的区别"></a>8. drop与delete的区别</h3><blockquote><ul><li> delete只删除记录，不删除表空间；</li><li> drop从表空间中删除该表，使该表结构不再存在。</li></ul></blockquote><h3 id="9-SQL如何优化与避免倾斜v"><a href="#9-SQL如何优化与避免倾斜v" class="headerlink" title="9. SQL如何优化与避免倾斜v"></a>9. SQL如何优化与避免倾斜v</h3><blockquote><ul><li><p>当小表join大表时，将小表放在左边。通常小表应小于25m.</p></li><li><p>当join操作关联字段存在大量空值时， 可以在join操作过程中忽略空值，然后再通过union操作加上空值</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line"><span class="operator">*</span> </span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">log a  <span class="keyword">join</span> users b <span class="keyword">on</span> a.id <span class="operator">=</span> b.id </span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">a.id <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span> </span><br><span class="line"><span class="keyword">union</span> <span class="keyword">all</span> </span><br><span class="line"><span class="keyword">select</span></span><br><span class="line"><span class="operator">*</span> </span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">log a </span><br><span class="line"><span class="keyword">where</span> a.id <span class="keyword">is</span> <span class="keyword">null</span>;</span><br></pre></td></tr></tbody></table></figure></li><li><p>当数据量非常大， count(distinct v) 会造成数据倾斜， 可以用 sum….group by  来代替</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">a,</span><br><span class="line"><span class="built_in">sum</span>(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">(<span class="keyword">select</span></span><br><span class="line">    a,b</span><br><span class="line">    <span class="keyword">from</span> </span><br><span class="line">    <span class="keyword">table</span></span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line">    a,b)</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line">a</span><br></pre></td></tr></tbody></table></figure></li></ul></blockquote><h3 id="10-常用的窗口函数都有哪些？"><a href="#10-常用的窗口函数都有哪些？" class="headerlink" title="10. 常用的窗口函数都有哪些？"></a>10. 常用的窗口函数都有哪些？</h3><blockquote><ul><li>序号函数：row_number(),  rank(), dense_rank(),</li><li>前后函数：lag(),lead()</li><li>头尾函数：first_value()，last_value()</li><li>分布函数：percent_rank(),cume_dist()</li><li>其他函数：nth_value(),ntlile()</li></ul></blockquote><h3 id="11-排序的函数：rank、dense-rank、row-number-函数的区别"><a href="#11-排序的函数：rank、dense-rank、row-number-函数的区别" class="headerlink" title="11.排序的函数：rank、dense_rank、row_number 函数的区别"></a>11.排序的函数：rank、dense_rank、row_number 函数的区别</h3><blockquote><ul><li>rank排序结果为：1、1、3</li><li>dense_rank排序结果为：1、1、2</li><li>row_number排序结果为：1、2、3</li></ul></blockquote><h3 id="12-字符串分段函数"><a href="#12-字符串分段函数" class="headerlink" title="12.  字符串分段函数"></a>12.  字符串分段函数</h3><blockquote><ul><li>.(string, 4) ; substring(string, 1, 4)</li><li>substring(string, 1, 4)</li><li>substring_index(string, ‘-‘, 3)</li><li>split(string, ‘-‘)</li></ul></blockquote><h3 id="13-concat-与-concat-ws-函数的用法"><a href="#13-concat-与-concat-ws-函数的用法" class="headerlink" title="13. concat 与 concat_ws 函数的用法"></a>13. concat 与 concat_ws 函数的用法</h3><blockquote><ul><li>concat(str1, str2….)， 将字符串连接，合并成一个字符串。</li><li>collect_ws(‘分隔符’,str1, str2…), 将字符串用分隔符进行连接</li></ul></blockquote><h3 id="14-collect-list-与-collect-set函数的用法"><a href="#14-collect-list-与-collect-set函数的用法" class="headerlink" title="14. collect_list 与 collect_set函数的用法"></a>14. collect_list 与 collect_set函数的用法</h3><blockquote><ul><li><p>collect_list(列名)， 将某列返回成一个数组， 不去重。</p></li><li><p>collect_set(列名)， 将某列返回成一个数据，并进行去重。</p></li></ul><p> <img src="https://i.loli.net/2021/02/24/RGEBwnyrq5zld9F.png" alt="2.png"></p></blockquote><h3 id="15-左连接、右连接、内连接、外连接的区别"><a href="#15-左连接、右连接、内连接、外连接的区别" class="headerlink" title="15. 左连接、右连接、内连接、外连接的区别"></a>15. 左连接、右连接、内连接、外连接的区别</h3><blockquote><ul><li>左连接，返回左表中的所有记录和右表中连接字段相等的记录。</li><li>右连接，返回右表中的所有记录和左表中连接字段相等的记录。</li><li>内连接， 只返回两表中相连字段相等的行。</li><li>外连接，返回左右表中所有记录和左右表中连接字段相等的记录。</li></ul></blockquote><h3 id="16-50道SQL题"><a href="#16-50道SQL题" class="headerlink" title="16. 50道SQL题"></a>16. <a href="https://www.bilibili.com/video/BV1q4411G7Lw">50道SQL题</a></h3><p><img src="https://i.loli.net/2021/02/24/4a3BmGQsUCeXFnq.png" alt="1.png"></p><p><img src="C:\Users\zy\AppData\Roaming\Typora\typora-user-images\image-20210302105835917.png" alt="image-20210302105835917" style="zoom:100%;"><img src="C:\Users\zy\AppData\Roaming\Typora\typora-user-images\image-20210302105939588.png" alt="image-20210302105939588"><img src="C:\Users\zy\AppData\Roaming\Typora\typora-user-images\image-20210302110107494.png" alt="image-20210302110107494"><img src="C:\Users\zy\AppData\Roaming\Typora\typora-user-images\image-20210302105917768.png" alt="image-20210302105917768"></p><p>student     score        course  teacher</p><ol><li><p>查询课程编号为“01”的课程比“02”的课程成绩高的所有学生的学号 x</p> <figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">   <span class="keyword">select</span>  a.s_id <span class="keyword">from</span>(</span><br><span class="line">   (<span class="keyword">select</span>  s_id, s_score <span class="keyword">from</span>  score <span class="keyword">where</span> c_id <span class="operator">=</span> <span class="string">'01'</span>) <span class="keyword">as</span> a</span><br><span class="line">   <span class="keyword">inner</span> <span class="keyword">join</span> </span><br><span class="line">   (<span class="keyword">select</span> s_id, s_score <span class="keyword">from</span> score <span class="keyword">where</span> c_id <span class="operator">=</span> <span class="string">'02'</span>) <span class="keyword">as</span> b </span><br><span class="line">   <span class="keyword">on</span> a.s_id <span class="operator">=</span> b.s_id)</span><br><span class="line">   <span class="keyword">where</span></span><br><span class="line">a.s_score  <span class="operator">&gt;</span> b.s_score</span><br></pre></td></tr></tbody></table></figure></li><li><p>查询平均成绩大于60分的学生的学号和平均成绩 x</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">s_id,</span><br><span class="line"><span class="built_in">avg</span>(s_score)</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">score</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line">s_id </span><br><span class="line"><span class="keyword">having</span></span><br><span class="line"><span class="built_in">avg</span>(s_score) <span class="operator">&gt;</span> <span class="number">60</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>查询所有学生的学号、姓名、选课数、总成绩</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">a.s_id, a.s_name, <span class="built_in">count</span>(c_id), <span class="built_in">sum</span>(<span class="keyword">case</span> <span class="keyword">when</span> b.s_score <span class="keyword">is</span> <span class="keyword">null</span> <span class="keyword">then</span> <span class="string">'0'</span> <span class="keyword">else</span> b.s_score <span class="keyword">end</span>) <span class="keyword">as</span> sum_score</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">((<span class="keyword">select</span> s_id, s_name <span class="keyword">from</span> student) <span class="keyword">as</span> a</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> </span><br><span class="line">(<span class="keyword">select</span> s_id, c_id, s_score <span class="keyword">from</span> score) <span class="keyword">as</span> b </span><br><span class="line"><span class="keyword">on</span> a.s_id <span class="operator">=</span> b.s_id)</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line"><span class="number">1</span>,<span class="number">2</span> </span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></li><li><p>查询姓“猴”的老师的个数</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line"><span class="built_in">count</span>(t_id)</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">teacher</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">t_name <span class="keyword">like</span> "猴%"</span><br></pre></td></tr></tbody></table></figure></li><li><p>查询没学过“张三”老师课的学生的学号、姓名</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> s_name, s_id <span class="keyword">from</span>  student <span class="keyword">where</span>  s_id  <span class="keyword">not</span> <span class="keyword">in</span> </span><br><span class="line"></span><br><span class="line">(<span class="keyword">select</span> s_id <span class="keyword">from</span> score <span class="keyword">where</span> c_id <span class="operator">=</span>  ( </span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> c_id <span class="keyword">from</span> course <span class="keyword">where</span> t_id <span class="operator">=</span> </span><br><span class="line"></span><br><span class="line">(<span class="keyword">select</span> t_id <span class="keyword">from</span> teacher <span class="keyword">where</span>  t_name <span class="operator">=</span><span class="string">'张三'</span>  )))</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></li><li><p>查询学过“张三”老师所教的所有课的同学的学号、姓名</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> s_name, s_id <span class="keyword">from</span>  student <span class="keyword">where</span>  s_id   <span class="keyword">in</span> </span><br><span class="line"></span><br><span class="line">(<span class="keyword">select</span> s_id <span class="keyword">from</span> score <span class="keyword">where</span> c_id <span class="operator">=</span>  ( </span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> c_id <span class="keyword">from</span> course <span class="keyword">where</span> t_id <span class="operator">=</span> </span><br><span class="line"></span><br><span class="line">(<span class="keyword">select</span> t_id <span class="keyword">from</span> teacher <span class="keyword">where</span>  t_name <span class="operator">=</span><span class="string">'张三'</span>  )))</span><br></pre></td></tr></tbody></table></figure></li><li><p>查询学过编号为“01”的课程并且也学过编号为“02”的课程的学生的学号、姓名</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">c.s_id, c.s_name</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">((<span class="keyword">select</span>  s_id <span class="keyword">from</span>  score <span class="keyword">where</span> c_id <span class="operator">=</span><span class="string">'01'</span>) <span class="keyword">as</span> a</span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span> </span><br><span class="line">(<span class="keyword">select</span> s_id <span class="keyword">from</span> score <span class="keyword">where</span> c_id <span class="operator">=</span> <span class="string">'02'</span>) <span class="keyword">as</span> b</span><br><span class="line"><span class="keyword">on</span> a.s_id  <span class="operator">=</span> b.s_id</span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span> student c <span class="keyword">on</span> a.s_id <span class="operator">=</span> c.s_id)</span><br></pre></td></tr></tbody></table></figure></li><li><p>查询课程编号为“02”的总成绩</p></li></ol><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line"><span class="built_in">sum</span>(s_score)</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">score </span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">c_id <span class="operator">=</span> <span class="string">'02'</span></span><br></pre></td></tr></tbody></table></figure><p> 9.查询所有课程成绩小于60分的学生的学号、姓名</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> b.s_id, b.s_name</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">((<span class="keyword">select</span> s_id <span class="keyword">from</span> score <span class="keyword">where</span> s_score <span class="operator">&lt;</span> <span class="number">60</span>) <span class="keyword">as</span> a</span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span>  student  <span class="keyword">as</span>  b</span><br><span class="line"><span class="keyword">on</span> a.s_id <span class="operator">=</span> b.s_id)</span><br></pre></td></tr></tbody></table></figure><ol start="10"><li><p>查询没有学全所有课的学生的学号、姓名</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">b.s_id, b.s_name</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">((<span class="keyword">select</span> s_id, <span class="built_in">count</span>(<span class="keyword">distinct</span> c_id) <span class="keyword">as</span> uv </span><br><span class="line"><span class="keyword">from</span> score </span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> s_id <span class="keyword">having</span> uv <span class="operator">=</span> (<span class="keyword">select</span> <span class="built_in">count</span>(<span class="keyword">distinct</span> c_name) <span class="keyword">from</span> course)) <span class="keyword">as</span> a</span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span>  student <span class="keyword">as</span> b <span class="keyword">on</span> a.s_id <span class="operator">=</span> b.s_id)</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></li><li><p>查询至少有一门课与学号为“01”的学生所学课程相同的学生的学号和姓名</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line"><span class="keyword">distinct</span> b.s_id, b.s_name <span class="keyword">from</span> </span><br><span class="line">((<span class="keyword">select</span> s_id <span class="keyword">from</span> score <span class="keyword">where</span> c_id  <span class="keyword">in</span> (</span><br><span class="line"><span class="keyword">select</span> c_id <span class="keyword">from</span> score <span class="keyword">where</span> s_id <span class="operator">=</span> <span class="string">'01'</span>)) <span class="keyword">as</span> a </span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span> student b <span class="keyword">on</span> a.s_id  <span class="operator">=</span> b.s_id)</span><br></pre></td></tr></tbody></table></figure></li><li><p><u>查询和“01”号同学所学课程完全相同的其他同学的学号-</u>—xxxxxxxxxxxxx</p></li></ol><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">select s_id, count(distinct c_id) as uv from score where s_id !='01'</span><br><span class="line">group by s_id </span><br><span class="line">having count(distinct c_id) = (select count(distinct c_id) from score where s_id = '01')</span><br><span class="line"> and s_id not in  (select  s_id from score where c_id not in  </span><br><span class="line">(select c_id from score where s_id = '01'))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><ol start="13"><li><p>查询没学过”张三”老师讲授的任一门课程的学生姓名</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">     </span><br></pre></td></tr></tbody></table></figure></li><li><p>查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">     </span><br></pre></td></tr></tbody></table></figure></li><li><p>检索”01”课程分数小于60，按分数降序排列的学生信息</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">     </span><br></pre></td></tr></tbody></table></figure></li><li><p>按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩</p></li><li><p>查询各科成绩最高分、最低分和平均分：以如下形式显示：课程ID，课程name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率</p></li><li><p>按各科成绩进行排序，并显示排名</p></li><li><p>查询学生的总成绩并进行排名</p></li><li><p>查询不同老师所教不同课程平均分从高到低显示</p></li><li><p>查询所有课程的成绩第2名到第3名的学生信息及该课程成绩</p></li><li><p>使用分段[100-85],[85-70],[70-60],[&lt;60]来统计各科成绩，分别统计各分数段人数：课程ID和课程名称</p></li><li><p>查询学生平均成绩及其名次</p></li><li><p>查询各科成绩前三名的记录（不考虑成绩并列情况）</p></li><li><p>查询每门课程被选修的学生数</p></li><li><p>查询出只有两门课程的全部学生的学号和姓名</p></li><li><p>查询男生、女生人数</p></li><li><p>查询名字中含有”风”字的学生信息</p></li><li><p>查询1990年出生的学生名单</p></li><li><p>查询平均成绩大于等于85的所有学生的学号、姓名和平均成绩</p></li><li><p>查询每门课程的平均成绩，结果按平均成绩升序排序，平均成绩相同时，按课程号降序排列</p></li><li><p>查询课程名称为”数学”，且分数低于60的学生姓名和分数</p></li><li><p>查询所有学生的课程及分数情况</p></li><li><p>查询任何一门课程成绩在70分以上的姓名、课程名称和分数</p></li><li><p>查询不及格的课程并按课程号从大到小排列</p></li><li><p>查询课程编号为03且课程成绩在80分以上的学生的学号和姓名</p></li><li><p>求每门课程的学生人数</p></li><li><p>查询选修“张三”老师所授课程的学生中成绩最高的学生姓名及其成绩</p></li><li><p>查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩</p></li><li><p>查询每门功成绩最好的前两名</p></li><li><p>统计每门课程的学生选修人数（超过5人的课程才统计）。要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列</p></li><li><p>检索至少选修两门课程的学生学号</p></li><li><p>查询选修了全部课程的学生信息</p></li><li><p>查询各学生的年龄</p></li><li><p>查询没学过“张三”老师讲授的任一门课程的学生姓名</p></li><li><p>查询下周过生日的学生</p></li><li><p>查询本月过生日的人</p></li><li><p>查询下月过生日的人</p></li></ol><h3 id="17-有两个数据表，通过sql实现下面题目"><a href="#17-有两个数据表，通过sql实现下面题目" class="headerlink" title="17. 有两个数据表，通过sql实现下面题目"></a>17. 有两个数据表，通过sql实现下面题目</h3><p><img src="https://i.loli.net/2020/07/10/HbFNojcuB2x4197.jpg" alt="sql面试1.jpg"></p><!-- 问题1答案： 1<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">  name,id,class,age</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">  tb_student</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">  in_time <span class="operator">=</span> <span class="string">&#x27;2017&#x27;</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line">  age</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> </span><br><span class="line">age  </span><br><span class="line"></span><br><span class="line">limit <span class="number">10</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>问题2答案：</p><ol><li>双表进行联合</li><li>求平均分</li><li>筛选出平均分大于80的人数和占比</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">tb_student.id,</span><br><span class="line">tb_score.course,</span><br><span class="line">tb_score.scre</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">tb_student a1 <span class="keyword">join</span> tb.score a2 <span class="keyword">on</span> a1.id <span class="operator">=</span> a2.id</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">​``` <span class="comment">--&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Sql<a href="https://www.nowcoder.com/jump/super-jump/word?word=%E7%AE%97%E6%B3%95">算法</a>两道题：学生表，选课表，老师上课表，1.没选xxx老师课的学生，2.挂科两次的学生平均分</p><h1 id="自我介绍"><a href="#自我介绍" class="headerlink" title="自我介绍"></a>自我介绍</h1><h1 id="如何做运营分析"><a href="#如何做运营分析" class="headerlink" title="如何做运营分析"></a>如何做运营分析</h1><h1 id="最有成就感的项目"><a href="#最有成就感的项目" class="headerlink" title="最有成就感的项目"></a>最有成就感的项目</h1><h1 id="如何搭建产品指标体系"><a href="#如何搭建产品指标体系" class="headerlink" title="如何搭建产品指标体系"></a>如何搭建产品指标体系</h1>-->]]></content>
      
      
      <categories>
          
          <category> SQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用的分析思维模型与方法</title>
      <link href="/2020/06/03/2020-09-13-%E5%B8%B8%E8%A7%81%E7%9A%84%E5%88%86%E6%9E%90%E6%A8%A1%E5%9E%8B/"/>
      <url>/2020/06/03/2020-09-13-%E5%B8%B8%E8%A7%81%E7%9A%84%E5%88%86%E6%9E%90%E6%A8%A1%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="分析思维模型"><a href="#分析思维模型" class="headerlink" title="分析思维模型"></a>分析思维模型</h2><h3 id="AARRR模型"><a href="#AARRR模型" class="headerlink" title="AARRR模型"></a>AARRR模型</h3><p>经典的漏斗结构，获取、激活、留存、收入、传播的循环模型。</p><!-- 以用户为中心，以完整的用户生命周期为线索，把控产品整个的成本/收入关系，用户生命周期价值（LTV）远大于用户获取成本（CAC)与用户经营成本（COC)之和就意味着产品的成功。 --><!-- 用户获取-用户转化-用户留存-产生收入-用户传播渠道运营分析-冷启动运营分析-留存率提升分析-商业化效率分析-产品列表运营分析 --><p><img src="https://i.loli.net/2020/09/13/qovasuKFck7PQnX.png" alt="AARRR,模型.png"></p><!-- ![AARRR 模型](https://i.loli.net/2019/02/26/5c75582b87a7c.png)![AARRR 模型](https://i.loli.net/2019/03/23/5c95c95929a40.jpg) --><h3 id="RFM模型"><a href="#RFM模型" class="headerlink" title="RFM模型"></a>RFM模型</h3><p>最近一次消费时间-消费频率-消费金额</p><!-- ![RFM模型](https://pic3.zhimg.com/v2-9e63f98ebdb73af3eae7dc99d195eb42_r.jpg) --><p><img src="https://i.loli.net/2019/02/23/5c70f7f128f4c.png" alt="RFM用户分群"><br><img src="https://i.loli.net/2020/09/13/pybzDeOTGBmISJx.png" alt="针对性运营"></p><p>注意事项：</p><blockquote><ul><li><p>本质是 <strong>筛选头部客户重点运营。</strong></p></li><li><p>通过数据标准化和权重设置，可从分类模型变成打分模型。<strong>权重设置,M最重要，F次之，R最弱。</strong></p></li><li><p>分值定界有多种方法，往往是用 <strong>中位数法</strong></p></li><li><p>最近一次消费时间一般是周/双周，F和M往往统计周期是月。</p></li></ul></blockquote><h3 id="5W2H模型"><a href="#5W2H模型" class="headerlink" title="5W2H模型"></a>5W2H模型</h3><p><img src="https://i.loli.net/2020/07/05/32hJ4seBOQv596w.png" alt="5W2H"></p><p>运用5W2H模型时需灵活运用，针对具体问题灵活运用。</p><p>比如，<strong>公司4月29-30日销量数据下跌，具体原因是什么？</strong></p><ol><li>what: 明确问题， 29号销量是否真的下跌，是28号上升吗？</li><li>who：哪类用户下降最明显</li><li>why：为什么下跌，下跌的核心原因是什么，人数下降还是转化率下降？</li><li>when：29-30日这个时间点是否特殊？因为是五一前吗？</li><li>where：哪个渠道下跌，哪个地区下跌？</li><li>how much：影响范围有多大，预估会造成多少收入波动？</li><li>how：定位下跌原因后，是否有对策？应急策略有哪些，能否立马改善，下次预案可以做什么？</li></ol><h3 id="AB测试"><a href="#AB测试" class="headerlink" title="AB测试"></a>AB测试</h3><p>AB测试是在用户界面上制作多个版本，在<strong>同一时间维度</strong>，分别让<strong>组成成分相同</strong>的目标人群随机访问这些版本，收集各人群的用户体验数据和业务数据，最后分析评估出最好的版本，正式采用。</p><p>如何做AB测试？</p><ol><li>明确测试目标<ul><li>测试内容</li><li>衡量标准</li></ul></li><li>制作A/B两个版本投放<ul><li>根据测试目标，制作不同（多个）的版本进行投放</li></ul></li><li>比较分析目标结果<ul><li>延长数据时间来增加可靠性</li></ul></li></ol><p>应用场景：</p><ol><li>体验优化</li><li>转化率优化</li></ol><!-- what-why-where-when-who-how-how much何事-何因-何地-何时-何人-如何做-何价 --><!-- ![思维导图](https://i.loli.net/2019/02/26/5c7418d10b4c8.png) --><!-- ![6W2H](https://i.loli.net/2019/08/19/lIgkeLbfNXtDHOu.jpg) --><!-- http://www.woshipm.com/pmd/604401.html --><h3 id="用户生命周期模型"><a href="#用户生命周期模型" class="headerlink" title="用户生命周期模型"></a>用户生命周期模型</h3><p><img src="https://i.loli.net/2019/03/23/5c95c9d2e937c.jpg" alt="用户生命周期模型"></p><!-- ![对应的关键指标](https://i.loli.net/2019/03/23/5c95ca1b5fdc9.jpg) --><ol><li><p><strong>引入期： 获客阶段。</strong></p><p> 拉新、获客及促进新用户活跃。</p></li><li><p><strong>成长期+成熟期：升值阶段，用户在产品中活跃、为产品贡献、持续留在产品内。</strong><br>促进用户活跃、转化、付费、制造留存。</p></li><li><p><strong>促进用户活跃、转化、付费、制造留存。</strong><br>对沉默流失用户做好留存及新产品导入。</p></li></ol><h3 id="产品生命周期"><a href="#产品生命周期" class="headerlink" title="产品生命周期"></a>产品生命周期</h3><p><img src="https://i.loli.net/2020/09/13/Ze4d3sjkqrlEcWt.jpg" alt="产品生命周期.jpg"></p><h3 id="企业战略模型"><a href="#企业战略模型" class="headerlink" title="企业战略模型"></a>企业战略模型</h3><h4 id="SWOT模型"><a href="#SWOT模型" class="headerlink" title="SWOT模型"></a>SWOT模型</h4><p>优势-劣势-机会-威胁</p><p><img src="https://i.loli.net/2019/02/26/5c754bb2536a0.jpg" alt="对自己进行解析"><br><img src="https://i.loli.net/2019/02/26/5c754bc095f85.jpg" alt="指定相应的对策"></p><h4 id="PEST模型"><a href="#PEST模型" class="headerlink" title="PEST模型"></a>PEST模型</h4><ol><li>政治<ul><li>国家出台哪些政策，制约还是促进</li><li>相关法律有哪些，有何影响</li></ul></li><li>经济<ul><li>GDP增长率、消费价格指数、失业率、居民可支配收入</li></ul></li><li>社会<ul><li>人口规模、年龄结构、教育状况、宗教信仰</li></ul></li><li>技术<ul><li>技术发明、传播、更新及商品话的速度，技术发展的趋势。</li></ul></li></ol><h4 id="波特五力模型"><a href="#波特五力模型" class="headerlink" title="波特五力模型"></a>波特五力模型</h4><ol><li>供应商讨价还价能力</li><li>购买者讨价还价能力</li><li>潜在竞争者的威胁</li><li>替代品的威胁</li><li>同行业竞争者的竞争程度</li></ol><h2 id="分析方法"><a href="#分析方法" class="headerlink" title="分析方法"></a>分析方法</h2><h3 id="描述分析"><a href="#描述分析" class="headerlink" title="描述分析"></a>描述分析</h3><p>描述数据状况与特征</p><ol><li><strong>集中趋势</strong><ul><li>平均数-受极端值影响</li><li>中位数-避免极端值影响</li><li>众数</li></ul></li><li>**离散程度-**越小越稳定<ul><li>方差与标准差-受平均值及计量单位影响？</li><li>极差-受平均值及计量单位影响？</li><li>变异系数—去除平均值或计量单位不同影响</li><li>四分位差</li></ul></li><li><strong>分布形态</strong><ul><li>偏度</li><li>峰度</li></ul></li></ol><p>4， <strong>标准化与归一化？</strong></p><ul><li>标准化-应用于数据不稳定，存在异常值和噪音。或者数据不符合正态分布时。</li><li>归一化-应用于输出结果范围有限定、数据稳定、数据符合正态分布的时候。</li></ul><h3 id="对比分析"><a href="#对比分析" class="headerlink" title="对比分析"></a>对比分析</h3><ol><li>时间标准<ul><li>时间趋势对比</li><li>动作前后对比</li><li>去年同期对比</li><li>前一时期对比</li></ul></li><li>空间标准<ul><li>A/B 测试</li><li>与城市、公司等空间对比</li><li>与行业领头羊对比</li></ul></li><li>特定标准<ul><li>与计划值对比</li><li>与平均值对比</li><li>与理论值对比（无历史数据）</li></ul></li></ol><h3 id="分类分析"><a href="#分类分析" class="headerlink" title="分类分析"></a>分类分析</h3><p>把对象分为不同类别进行研究，探索内在联系与规律</p><ol><li><p>一维标签分类</p><ul><li>年龄、性别、年龄分类</li><li>用户价值、活跃状态分类</li></ul></li><li><p>二维分类</p><ul><li><p>二维标签分类</p><p>  用户按照两个标签进行行列分类，如年龄与活跃状态</p></li><li><p>二维矩阵分类</p><p>  波士顿矩阵</p></li></ul></li></ol><h3 id="结构分析（占比分析）"><a href="#结构分析（占比分析）" class="headerlink" title="结构分析（占比分析）"></a>结构分析（占比分析）</h3><p>结构指标 = （部分 / 总体） x 100%, 看总体内各部分组成情况。</p><h3 id="相关分析"><a href="#相关分析" class="headerlink" title="相关分析"></a>相关分析</h3><p>研究某现象两种变量之前是否有相关性，相关程度如何。</p><ol><li>简单相关分析<ul><li>Pearson相关系数（最常用）？</li><li>Kendall 相关系数？</li><li>Spearman相关系数？</li></ul></li><li>判断方式<ul><li>先用散点图看是否有相关关系，如果有则计算相关系数。</li></ul></li></ol><h3 id="预测分析"><a href="#预测分析" class="headerlink" title="预测分析"></a>预测分析</h3><p>通过处理目前数据来预测未来发展</p><ol><li><p>预测方法</p><ul><li><p>简单平均法：利用平均数来进行预测</p><p>  计算便捷但无法反应预测对象的变化趋势。适合比较稳定的预测对象。</p></li><li><p>移动平均法？</p></li><li><p>线性回归预测法？</p></li><li><p>非线性回归预测法？</p></li><li><p>趋势外推法？</p></li><li><p>指数平滑法？</p></li><li><p>平稳时间序列预测法？</p></li><li><p>景气预测法？</p></li><li><p>灰色预测法？</p></li></ul></li><li><p>预测步骤</p><p> 确定目的——收集资料——选择方法——建立模型——测定误差——得出结论</p><hr></li></ol>]]></content>
      
      
      <categories>
          
          <category> 分析思维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分析思维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>技能-Hive-SQL学习</title>
      <link href="/2020/06/02/2021-02-24-%E6%8A%80%E8%83%BD-Hive-SQL%E5%AD%A6%E4%B9%A0/"/>
      <url>/2020/06/02/2021-02-24-%E6%8A%80%E8%83%BD-Hive-SQL%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="SQL中的简单查询"><a href="#SQL中的简单查询" class="headerlink" title="SQL中的简单查询"></a>SQL中的简单查询</h2><p>表：score_student</p><table><thead><tr><th>id</th><th>name</th><th>class</th><th>age</th><th>score</th></tr></thead><tbody><tr><td>01</td><td>甲</td><td>一班</td><td>18</td><td>{“语文”:89,”数学”:98,”英语”:76}</td></tr><tr><td>02</td><td>乙</td><td>一班</td><td>19</td><td>{“语文”:96,”数学”:52,”英语”:78}</td></tr><tr><td>03</td><td>丙</td><td>二班</td><td>21</td><td>{“语文”:76,”数学”:69,”英语”:89}</td></tr><tr><td>04</td><td>丁</td><td>二班</td><td>23</td><td>{“语文”:92,”数学”:91,”英语”:96}</td></tr><tr><td>05</td><td>张</td><td>三班</td><td>25</td><td>{“语文”:85,”数学”:90,”英语”:73}</td></tr></tbody></table><ol><li><p>获取指定的数据</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">    id,</span><br><span class="line">    name</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    score_student</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">    class <span class="operator">=</span> <span class="string">'一班'</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>插入一列固定值</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">    id,</span><br><span class="line">    name,</span><br><span class="line">    "age &lt; 20 " <span class="keyword">as</span> label</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    score_student</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">    age <span class="operator">&lt;</span> <span class="number">20</span></span><br></pre></td></tr></tbody></table></figure><table><thead><tr><th>id</th><th>name</th><th>label</th></tr></thead><tbody><tr><td>01</td><td>甲</td><td>age &lt; 20</td></tr><tr><td>02</td><td>乙</td><td>age &lt; 20</td></tr></tbody></table></li><li><p>json解析-获取对应的value值</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">    name,</span><br><span class="line">    json_extract(score, <span class="string">'$.英语'</span>) <span class="keyword">as</span> <span class="string">'英语成绩'</span></span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    score_student</span><br></pre></td></tr></tbody></table></figure><table><thead><tr><th>name</th><th>英语成绩</th></tr></thead><tbody><tr><td>甲</td><td>76</td></tr><tr><td>乙</td><td>78</td></tr><tr><td>丙</td><td>89</td></tr><tr><td>张</td><td>73</td></tr></tbody></table></li><li><p>json解析-查看key值</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">    name,</span><br><span class="line">    json_keys(score) <span class="keyword">as</span> <span class="string">'科目'</span></span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    score_student</span><br></pre></td></tr></tbody></table></figure><table><thead><tr><th>name</th><th>科目</th></tr></thead><tbody><tr><td>甲</td><td>[“语文”,”数学”,”英语”]</td></tr><tr><td>乙</td><td>[“语文”,”数学”,”英语”]</td></tr><tr><td>丙</td><td>[“语文”,”数学”,”英语”]</td></tr><tr><td>张</td><td>[“语文”,”数学”,”英语”]</td></tr></tbody></table></li></ol><ol start="5"><li>加入表中一列含有多个元素， 我们可以只查找此列的第一个元素<figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">    name[<span class="number">0</span>] </span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    employees</span><br></pre></td></tr></tbody></table></figure></li></ol><ol start="6"><li>可以使用 “点” 符号， 如：表的别名.列名<figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span>  </span><br><span class="line">    name, </span><br><span class="line">    address.city  </span><br><span class="line"><span class="keyword">from</span>  </span><br><span class="line">    employees</span><br></pre></td></tr></tbody></table></figure></li></ol><ol start="7"><li><p>使用正则表达式，可以选出所有列名以 price 作为前缀的列</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">    <span class="string">'price.*'</span>  </span><br><span class="line"><span class="keyword">from</span>  </span><br><span class="line">    stocks</span><br></pre></td></tr></tbody></table></figure></li><li><p>where中关系型运算符优先级高到低为：not - and - or</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">    <span class="operator">*</span> </span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    employees </span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">    country  <span class="keyword">not</span> <span class="keyword">in</span> (<span class="string">'us'</span>, <span class="string">'china'</span>)</span><br></pre></td></tr></tbody></table></figure></li><li><p>where中用like、rlike进行数据筛选</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">    name, </span><br><span class="line">    address.street </span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    employees </span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">    address.street rlike <span class="string">'.*(beijing|shanghai).*'</span></span><br><span class="line">    <span class="comment">--address.street like '%beijing%' </span></span><br></pre></td></tr></tbody></table></figure></li></ol><ul><li>like与rlike中常见的通配符</li></ul><table><thead><tr><th>like通配符</th><th>含义</th></tr></thead><tbody><tr><td>%</td><td>匹配0个或任意多个字符</td></tr><tr><td>_</td><td>匹配任意一个字符</td></tr><tr><td>escape</td><td>转义字符，可匹配%和_。如SELECT * FROM table_name WHERE column_name LIKE ‘/%/<em>%</em>‘ ESCAPE’/‘</td></tr><tr><td>——</td><td>————————————————————</td></tr><tr><td></td><td></td></tr></tbody></table><table><thead><tr><th>rlike通配符</th><th>含义</th></tr></thead><tbody><tr><td>.</td><td>匹配任意单个字 符</td></tr><tr><td>*</td><td>匹配0个或多个前一个得到的字符</td></tr><tr><td>[]</td><td>含有任意一个[]内的字符，[ab]*可匹配空串、a、b、或者由任意个a和b组成的字符串</td></tr><tr><td>^</td><td>匹配开头，如^s匹配以s或者S开头的字符串</td></tr><tr><td>$</td><td>匹配结尾，如s$匹配以s结尾的字符串</td></tr><tr><td>{n}</td><td>匹配前一个字符反复n次</td></tr></tbody></table><ol start="10"><li>对数据进行排序——order by<figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">    <span class="operator">*</span></span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    a </span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> </span><br><span class="line">    code <span class="keyword">asc</span>, name <span class="keyword">desc</span></span><br></pre></td></tr></tbody></table></figure></li></ol><ul><li>排序说明</li></ul><table><thead><tr><th>字段</th><th>说明</th></tr></thead><tbody><tr><td>order by a,b</td><td>a和b都是升序</td></tr><tr><td>order by a,b desc</td><td>a升序，b降序</td></tr><tr><td>order by a desc，b</td><td>a降序，b升序</td></tr><tr><td>order by a desc，b desc</td><td>a，b都是降序</td></tr></tbody></table><ol start="11"><li><p>对数据进行限制-limit</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">    account</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    employees</span><br><span class="line">limit <span class="number">10</span> <span class="comment">---使用limit语句限制返回的行数，只显示 10 行</span></span><br><span class="line">limit <span class="number">2</span>,<span class="number">3</span><span class="comment">--获取第2行（不包含第2行），以后的3行数据</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>注释</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">大段文字注释</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">select</span></span><br><span class="line"><span class="comment">    account</span></span><br><span class="line"><span class="comment">from </span></span><br><span class="line"><span class="comment">    employees</span></span><br><span class="line"><span class="comment">limit 10 ---使用limit语句限制返回的行数，只显示 10 行， 对某一行进行注释</span></span><br><span class="line"><span class="comment">limit 2,3--获取第2行（不包含第2行），以后的3行数据</span></span><br></pre></td></tr></tbody></table></figure></li></ol><h2 id="数据预处理"><a href="#数据预处理" class="headerlink" title="数据预处理"></a>数据预处理</h2><ol><li>排除缺失值<figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">    <span class="operator">*</span></span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    score_student</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">    score <span class="operator">!=</span> "" <span class="keyword">or</span> </span><br><span class="line">    score <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">or</span> </span><br><span class="line">    score <span class="operator">!=</span> " "</span><br></pre></td></tr></tbody></table></figure></li><li>缺失值填充<figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">    id,</span><br><span class="line">    <span class="built_in">coalesce</span>(score, <span class="number">1</span>),<span class="comment">--当score为null值时，将返回1，否则返回score真实值</span></span><br><span class="line">    <span class="built_in">coalesce</span>( name, score,<span class="number">1</span>)<span class="comment">--当name不为null，那么无论score是否为null，都返回name的真实值。当name为null,而score不为null时，返回score的真实值。当name和score都为null时，返回1</span></span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    score_student</span><br></pre></td></tr></tbody></table></figure></li></ol> <figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">    id,</span><br><span class="line">    if(score<span class="operator">!=</span> "", score, <span class="number">1</span>)</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    score_student</span><br></pre></td></tr></tbody></table></figure><ol start="3"><li>重复值处理<figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span>  </span><br><span class="line">    <span class="keyword">distinct</span> user_account,<span class="comment">--如果用 distinct, select 后面必须直接跟 distinct</span></span><br><span class="line">    province </span><br><span class="line"><span class="keyword">from</span>    </span><br><span class="line">    computer</span><br></pre></td></tr></tbody></table></figure></li></ol> <figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">    user_account,</span><br><span class="line">    province</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    computer</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line">    user_account,</span><br><span class="line">    province</span><br></pre></td></tr></tbody></table></figure><ol start="4"><li>数据格式转换-cast与convert函数<figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">    age,</span><br><span class="line">    <span class="built_in">cast</span>(age <span class="keyword">as</span> <span class="type">decimal</span>) <span class="keyword">as</span> decimal_age,</span><br><span class="line">    <span class="keyword">convert</span>(age <span class="keyword">as</span> <span class="type">char</span>) <span class="keyword">as</span> char_age</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    score</span><br></pre></td></tr></tbody></table></figure></li></ol><ul><li>数据类型</li></ul><table><thead><tr><th>类型</th><th>符号</th></tr></thead><tbody><tr><td>浮点型</td><td>decimal</td></tr><tr><td>整形</td><td>signed</td></tr><tr><td>字符型</td><td>char</td></tr><tr><td>二进制</td><td>binary</td></tr><tr><td>日期</td><td>date</td></tr><tr><td>时间</td><td>time</td></tr><tr><td>日期时间</td><td>datetime</td></tr></tbody></table><h2 id="数据运算"><a href="#数据运算" class="headerlink" title="数据运算"></a>数据运算</h2><ol><li>算数运算<figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">    id,</span><br><span class="line">    (score_a <span class="operator">+</span> score_b) <span class="keyword">as</span> all_score</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    score_student</span><br></pre></td></tr></tbody></table></figure></li></ol><ul><li>算数运算符</li></ul><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td>+</td><td>加法</td></tr><tr><td>-</td><td>减法</td></tr><tr><td>*</td><td>乘法</td></tr><tr><td>/</td><td>除法</td></tr><tr><td>% , mod</td><td>取余</td></tr><tr><td>div</td><td>整除</td></tr></tbody></table><ol start="2"><li>比较运算<figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">    id,</span><br><span class="line">    score_a,</span><br><span class="line">    score_b,</span><br><span class="line">    score_a <span class="operator">&gt;</span> score_b <span class="keyword">as</span> <span class="string">'大于'</span> <span class="comment">--返回1或0</span></span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    score_student</span><br></pre></td></tr></tbody></table></figure></li></ol><ul><li>比较运算符</li></ul><table><thead><tr><th><strong>操作符</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>=</td><td>等于</td></tr><tr><td>&lt;&gt; , !=</td><td>不等于</td></tr><tr><td>&lt;</td><td>小于</td></tr><tr><td>&gt;</td><td>大于</td></tr><tr><td>&lt;=</td><td>小于或等于</td></tr><tr><td>&gt;=</td><td>大于或等于</td></tr><tr><td>[not] between</td><td>介于</td></tr><tr><td>in</td><td>包含</td></tr><tr><td>is [not] null</td><td>空值</td></tr></tbody></table><ol start="3"><li>逻辑运算<figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">    id,</span><br><span class="line">    score_a,</span><br><span class="line">    score_b,</span><br><span class="line">    ((score_a <span class="operator">&gt;</span><span class="number">85</span>) <span class="keyword">and</span> ( score_b <span class="operator">&gt;</span> <span class="number">85</span>)) <span class="keyword">as</span> "双优",</span><br><span class="line">    ((score_a <span class="operator">&gt;</span><span class="number">85</span>) <span class="keyword">or</span> ( score_b <span class="operator">&gt;</span> <span class="number">85</span>)) <span class="keyword">as</span> "单优"</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    score_student</span><br></pre></td></tr></tbody></table></figure></li></ol><ul><li>逻辑运算符</li></ul><table><thead><tr><th><strong>逻辑符</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>and</td><td>和</td></tr><tr><td>or</td><td>或</td></tr><tr><td>not</td><td>非</td></tr></tbody></table><ol start="4"><li>数学运算<figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">    id,</span><br><span class="line">    score_a,</span><br><span class="line">    score_b,</span><br><span class="line">    <span class="built_in">abs</span>(score_a <span class="operator">-</span>core_b ) <span class="keyword">as</span> "绝对差值",</span><br><span class="line">    sign(score_a <span class="operator">-</span>core_b ) <span class="keyword">as</span> "正负"</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    score_student</span><br></pre></td></tr></tbody></table></figure></li></ol><ul><li>数学运算符</li></ul><table><thead><tr><th><strong>数学函数</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>abs(x)</td><td>返回x的绝对值</td></tr><tr><td>ceil(x)</td><td>返回不小于x的最小整数值</td></tr><tr><td>floor(x)</td><td>返回不大于x的最大整数值</td></tr><tr><td>rand()</td><td>返回一个随机浮点值</td></tr><tr><td>round(d,x)</td><td>返回d精确度的x</td></tr><tr><td>sign(x)</td><td>返回x的正负，如果为正返回1，为负返回-1</td></tr></tbody></table><ol start="5"><li>聚合运算<figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">    <span class="built_in">sum</span>(score_a) <span class="keyword">as</span> a_sum,</span><br><span class="line">    <span class="built_in">sum</span>(score_b) <span class="keyword">as</span> b_sum,</span><br><span class="line">    <span class="built_in">sum</span>(a_sum) <span class="operator">+</span> <span class="built_in">sum</span>(b_sum) <span class="keyword">as</span> a_b_sum</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    score_student</span><br></pre></td></tr></tbody></table></figure></li></ol><ul><li>聚合函数</li></ul><table><thead><tr><th>聚合函数</th><th>定义</th></tr></thead><tbody><tr><td>count()</td><td>个数统计函数</td></tr><tr><td>sum()</td><td>求和</td></tr><tr><td>avg()</td><td>平均值</td></tr><tr><td>min()</td><td>最小值</td></tr><tr><td>max()</td><td>最大值</td></tr><tr><td>corr(A, B)</td><td>相关系数</td></tr><tr><td>var_pop()</td><td>总体方差</td></tr><tr><td>var_samp()</td><td>样本方差</td></tr><tr><td>std()</td><td>总体标准差</td></tr><tr><td>stddev_samp</td><td>样本标准差</td></tr></tbody></table><ul><li>count(1)、count(*)、count(column) 之间的区别<blockquote><p>执行范围上： count(*) 和 count (1)  都包含了 对NULL的统计。 count(列名)统计时不包含NULL值。<br>执行速度上： 列名为主键时， count(列名) 最快。  当无主键时， count(1) 最快。  当表只有一个字段，count(*) 最快。</p></blockquote></li></ul><h2 id="字符串处理"><a href="#字符串处理" class="headerlink" title="字符串处理"></a>字符串处理</h2><ol><li>字符串函数</li></ol><table><thead><tr><th>函数名</th><th>定义</th></tr></thead><tbody><tr><td>concat(str1, str2,..strn)</td><td>将str1,str2,…strn合并成一个字符串,只要其中一个是NUll，则返回NUll</td></tr><tr><td>concat_ws(s,str1, str2,…strn)</td><td>将str1,str2,…strn用连接符s合并成一个字符串,只能接收 string或string类型的数组，只要有一个字符串</td></tr><tr><td>collect_set(col)</td><td>将某字段的值进行去重汇总，产生array类型字段</td></tr><tr><td>collect_list(col)</td><td>将某字段的值进行汇总不去重，产生array类型字段</td></tr><tr><td>explode(col)</td><td>将hive列中复杂的array或者map结构拆分成多行</td></tr><tr><td>substr / substring(str,m,n)</td><td>获取字符串str从m位置开始，长度为n的字符串</td></tr><tr><td>split(str, s)</td><td>str字符串通过s进行分割</td></tr><tr><td>substring_index(str, s,n)</td><td>str字符串通过第n个s进行分割</td></tr><tr><td>replace(str,a,b)</td><td>将str字符串中的a替换成b</td></tr><tr><td>left(str, n)</td><td>取str字符串中最左边的n个字符</td></tr><tr><td>right(str,n)</td><td>取str字符串中最右边的n个字符</td></tr><tr><td>ltrim(str)</td><td>去除str字符串左边的空格</td></tr><tr><td>rtrim(str)</td><td>去除str字符串右边的空格</td></tr><tr><td><strong>trim(str)</strong></td><td>去除str字符串开头和结尾的空格</td></tr><tr><td>length / char_length(str)</td><td>返回str字符串的字符长度，一个汉字算三个字符</td></tr><tr><td>repeat(str,n)</td><td>将str字符串重复n遍</td></tr><tr><td>lower()</td><td>将字串转化为小写</td></tr><tr><td>upper()</td><td>将字符转化为大写</td></tr><tr><td>lpad(str1，n，str2)</td><td>在str1字符串的左边第n个位置，添加str2</td></tr><tr><td>rpad(str1，n，str2)</td><td>在str1字符串的右边第n个位置，添加str2</td></tr><tr><td>instr (A ,B )</td><td>返回字符B首次在A中出现的位置,不存在返回0</td></tr></tbody></table><ol start="2"><li><p><strong>substr函数与 substring函数用法</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">substr(string,<span class="number">4</span>): 从右第<span class="number">4</span>位置截取到最后，结果为：ing</span><br><span class="line"><span class="built_in">substring</span>(string,<span class="number">1</span>,<span class="number">3</span>):取左边第<span class="number">1</span>位置起，<span class="number">3</span>字长的字符串，结果为：str</span><br><span class="line"><span class="built_in">substring</span>(string,<span class="number">-3</span>,<span class="number">3</span>):取右边第<span class="number">1</span>位置起，<span class="number">3</span>字长的字符串,右边第一位置往右不够<span class="number">3</span>字长，结果为：g</span><br><span class="line"><span class="built_in">substring</span>(string,<span class="number">-3</span>,<span class="number">3</span>):取右边第<span class="number">1</span>位置起，<span class="number">3</span>字长的字符串，结果为：ing</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>substring_index函数</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">substring_index(<span class="string">'15,151,152,16'</span>,<span class="string">','</span>,<span class="number">1</span>)：取第一个逗号前面的字符串，结果为：<span class="number">15</span></span><br><span class="line">substring_index(<span class="string">'15,151,152,16'</span>,<span class="string">','</span>,<span class="number">2</span>)：取第二个逗号前面部分，结果为：<span class="number">15</span>,<span class="number">151</span></span><br><span class="line">substring_index(<span class="string">'15,151,152,16'</span>,<span class="string">','</span>,<span class="number">-1</span>)：取目标字符串中最后一个含 “,” 位子的后的部分，结果为：<span class="number">16</span></span><br><span class="line">substring_index(substring_index(<span class="string">'15,151,152,16'</span>,<span class="string">','</span>,<span class="number">2</span>),<span class="string">','</span>,<span class="number">-1</span>):取第二个逗号前面部分,然后最后逗号的前面部分，结果为：<span class="number">151</span></span><br><span class="line">substring_index(substring_index(<span class="string">'15,151,152,16'</span>,<span class="string">','</span>,<span class="number">-2</span>),<span class="string">','</span>,<span class="number">1</span>)：取倒数第二个逗号后面部分字符串，再去这部分里第一个都号前的部分，结果为：<span class="number">152</span></span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>split函数</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">split(<span class="string">'a,b,c,d'</span>,<span class="string">','</span>):根据逗号进行分割，结果为： ["a","b","c","d"]</span><br><span class="line">split(<span class="string">'a,b,c,d'</span>,<span class="string">','</span>)[<span class="number">0</span>]： 取结果数组中的某一项，结果为： a</span><br><span class="line">split(<span class="string">'192.168.0.1'</span>,<span class="string">'\\.'</span>)： 点号这种特殊字符的时候需要做特殊的处理，结果为：["192","168","0","1"]</span><br><span class="line">"....  split('192.168.0.1','\\\\.') ... ": split包含在 "" 之中时 需要加<span class="number">4</span>个\,不然得到的值是<span class="keyword">null</span>,同样的 <span class="operator">|</span> 等特殊符号也需要做类似处理。</span><br></pre></td></tr></tbody></table></figure></li></ol><ul><li>例如： 将一些字段拆解出来进行使用<blockquote><p>比如：Syjh-sjsy-zygn-3_1字段，我们只需要Syjh-sjsy-zygn位置的所有按钮。</p></blockquote><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">    substring_index(nbtn_position, <span class="string">'-'</span>,<span class="number">3</span>) <span class="keyword">as</span> position,</span><br><span class="line">    <span class="built_in">count</span>(<span class="keyword">distinct</span> user_account) <span class="keyword">as</span> uv </span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    apache_computer_view</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">    hit_date <span class="operator">=</span> <span class="string">'2020-03-01'</span></span><br><span class="line">    <span class="keyword">and</span> </span><br><span class="line">    nbtn_position <span class="keyword">like</span> <span class="string">'%Syjh%'</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line">    substring_index(nbtn_position, <span class="string">'-'</span>,<span class="number">3</span>)</span><br></pre></td></tr></tbody></table></figure></li></ul><ol start="5"><li><strong>lpad(str1,len,str2)</strong> <figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">lpad(nbtn_name, <span class="number">7</span>, <span class="string">'xo'</span>) <span class="keyword">as</span> <span class="string">'左填充'</span>,</span><br><span class="line">rpad(nbtn_name, <span class="number">7</span>, <span class="string">'xo'</span>) <span class="keyword">as</span> <span class="string">'右填充'</span>,</span><br><span class="line">nbtn_name <span class="keyword">as</span> <span class="string">'不填充'</span></span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">table1</span><br></pre></td></tr></tbody></table></figure><table><thead><tr><th>左填充</th><th>右填充</th><th>不填充</th></tr></thead><tbody><tr><td>xoxo张晓东</td><td>张晓东xoxo</td><td>张晓东</td></tr></tbody></table></li></ol><ol start="6"><li><strong>concat_ws函数</strong> <blockquote><p>把下表中星座和血型一样的人归类到一起：</p></blockquote></li></ol><table><thead><tr><th>name</th><th>contellation</th><th>blood_type</th></tr></thead><tbody><tr><td>孙悟空</td><td>白羊座</td><td>A</td></tr><tr><td>猪八戒</td><td>射手座</td><td>A</td></tr><tr><td>宋宋</td><td>白羊座</td><td>B</td></tr><tr><td>唐僧</td><td>白羊座</td><td>A</td></tr><tr><td>张帅</td><td>射手座</td><td>A</td></tr></tbody></table> <figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">con_blood,</span><br><span class="line">concat_ws ("\", collect_set(name))</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">(<span class="keyword">SELECT</span> </span><br><span class="line">concat_ws( <span class="string">','</span>, contellation, blood_type) <span class="keyword">as</span> con_blood,</span><br><span class="line">name</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">table1) </span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line">con_blood</span><br></pre></td></tr></tbody></table></figure><blockquote><p>得到结果如下：</p></blockquote><table><thead><tr><th>con_blod</th><th>name</th></tr></thead><tbody><tr><td>射手座,A</td><td>猪八戒\张帅</td></tr><tr><td>白羊座，A</td><td>孙悟空\唐僧</td></tr><tr><td>白羊座，B</td><td>宋</td></tr></tbody></table><ol start="7"><li><strong>collect_set函数</strong> </li></ol><blockquote><p>求将每个省的城市列出来<br> </p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">province, </span><br><span class="line">collect_set(city) </span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">android </span><br><span class="line"><span class="keyword">where</span>  dt <span class="operator">=</span> <span class="string">'2020-05-01'</span> <span class="keyword">and</span> city <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span> </span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line">province <span class="comment">---辽宁省  ["营口市","大连","大连市",.....,"朝阳"]</span></span><br></pre></td></tr></tbody></table></figure><br>求出一个月内活跃天数大于20天的用户数<br> <figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line"><span class="built_in">count</span>(<span class="keyword">distinct</span> user_account) <span class="keyword">as</span> uv </span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">(<span class="keyword">select</span> </span><br><span class="line">user_account,</span><br><span class="line">collect_set(hit_date)  <span class="keyword">as</span> dt</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">an</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">hit_date <span class="keyword">between</span> <span class="string">'2020-05-01'</span> <span class="keyword">and</span> <span class="string">'2020-05-31'</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line">user_account</span><br><span class="line"><span class="keyword">having</span></span><br><span class="line">size(dt) <span class="operator">&gt;</span> <span class="number">20</span>)</span><br></pre></td></tr></tbody></table></figure><p></p></blockquote><ol start="8"><li><strong>explode函数</strong>  </li></ol><ul><li><p>函数说明</p><blockquote><ul><li>explode(col): 将hive列中复杂的array或者map结构拆分成多行</li><li><strong>lateral view</strong> 用法： lateral view UDTF(expression) adtable  as a1  说明： 用户和split,explode 等UDTF一起使用，能够将一列数据拆分成多行数据， 在此基础上可以对拆分的数据进行聚合计算. 形成一个新的表，并对原来的表进行侧写</li></ul></blockquote></li><li><p>需求1：</p><blockquote><p>将如下表进行拆分</p></blockquote></li></ul><table><thead><tr><th>movie</th><th>category</th></tr></thead><tbody><tr><td>《疑犯追踪》</td><td>悬疑,动作,科幻,剧情</td></tr><tr><td>《lie to me》</td><td>警匪,动作,心理</td></tr></tbody></table> <figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">movie. categrory_name</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">movie_info</span><br><span class="line"><span class="keyword">lateral</span>  <span class="keyword">view</span> explode ( categrory)  adtable <span class="keyword">as</span> categrory_name</span><br></pre></td></tr></tbody></table></figure><blockquote><p>得到结果如下：</p></blockquote><table><thead><tr><th>movie</th><th>category</th></tr></thead><tbody><tr><td>《疑犯追踪》</td><td>悬疑</td></tr><tr><td>《疑犯追踪》</td><td>动作</td></tr><tr><td>《疑犯追踪》</td><td>科幻</td></tr><tr><td>《疑犯追踪》</td><td>剧情</td></tr><tr><td>《lie to me》</td><td>警匪</td></tr><tr><td>《lie to me》</td><td>动作</td></tr><tr><td>《lie to me》</td><td>心理</td></tr></tbody></table><ul><li>需求2： <blockquote><p>将 表 table 中的 <code>adid_list</code> 转换为单独的行。</p></blockquote></li></ul><table><thead><tr><th>pageid</th><th>adid_list</th></tr></thead><tbody><tr><td>front_page</td><td>[1,2,3]</td></tr><tr><td>contact_page</td><td>[3,4]</td></tr></tbody></table> <figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">pageid, adid</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">talbe1</span><br><span class="line"><span class="keyword">lateral</span> <span class="keyword">view</span> explode(adid_list) adtable <span class="keyword">as</span> adid</span><br></pre></td></tr></tbody></table></figure><blockquote><p>输出结果为： </p></blockquote><table><thead><tr><th>pageid</th><th>adid_list</th></tr></thead><tbody><tr><td>front_page</td><td>1</td></tr><tr><td>front_page</td><td>2</td></tr><tr><td>front_page</td><td>3</td></tr><tr><td>contact_page</td><td>3</td></tr><tr><td>contact_page</td><td>4</td></tr></tbody></table><ul><li>需求3： <blockquote><p>多个 lateral view 查询</p></blockquote></li></ul><table><thead><tr><th>array</th><th>col2</th></tr></thead><tbody><tr><td>[1,2]</td><td>[“a”，”b”]</td></tr><tr><td>[3,4]</td><td>[“c”, “d”]</td></tr></tbody></table> <figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">mycol1,</span><br><span class="line">mycol2</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">table1</span><br><span class="line">alteral  <span class="keyword">view</span> explode(<span class="keyword">array</span>) adtable <span class="keyword">as</span> mycol1 </span><br><span class="line">alteral  <span class="keyword">view</span> explode(col2)  adtable <span class="keyword">as</span> mycol2</span><br></pre></td></tr></tbody></table></figure><blockquote><p>输出结果为： </p></blockquote><table><thead><tr><th>myCol1</th><th>myCol2</th></tr></thead><tbody><tr><td>1</td><td>“a”</td></tr><tr><td>1</td><td>“b”</td></tr><tr><td>2</td><td>“a”</td></tr><tr><td>2</td><td>“b”</td></tr><tr><td>3</td><td>“c”</td></tr><tr><td>3</td><td>“d”</td></tr><tr><td>4</td><td>“c”</td></tr><tr><td>4</td><td>“d”</td></tr></tbody></table><hr><h2 id="控制函数"><a href="#控制函数" class="headerlink" title="控制函数"></a>控制函数</h2><ol><li><p><strong>IF( expr , v1 , v2 )函数</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">    <span class="operator">*</span> </span><br><span class="line">     if(age<span class="operator">&lt;</span><span class="number">20</span>,<span class="string">'少年'</span>,<span class="string">'青年'</span>) <span class="keyword">AS</span> ifage <span class="comment">--- 查出班级所有学生，如果年龄小于20，就标准为少年，否则标记为青年。</span></span><br><span class="line"><span class="keyword">from</span>  </span><br><span class="line">    student</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>ifnull(V1,V2)函数</strong></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">    ifnull(<span class="number">1</span>,<span class="number">2</span>),<span class="comment">--如果v1不为空，则直接返回v1;如果v1为空，则返回参数v2</span></span><br><span class="line">    ifnull(<span class="keyword">null</span>,<span class="number">10</span>);</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>case when 函数</strong></p></li></ol><ul><li>对不同字母进行省份转换<figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line"><span class="keyword">case</span> </span><br><span class="line">        <span class="keyword">when</span> province <span class="keyword">like</span> <span class="string">'ah'</span> <span class="keyword">then</span> <span class="string">'安徽'</span></span><br><span class="line">        <span class="keyword">when</span> province <span class="keyword">like</span> <span class="string">'fj'</span> <span class="keyword">then</span> <span class="string">'福建'</span></span><br><span class="line">        <span class="keyword">when</span> province <span class="keyword">like</span> <span class="string">'gd'</span> <span class="keyword">then</span> <span class="string">'广东'</span></span><br><span class="line">    <span class="keyword">else</span> <span class="string">'m'</span> </span><br><span class="line">    <span class="keyword">end</span> <span class="keyword">as</span> province ,</span><br><span class="line">    <span class="built_in">count</span>(<span class="keyword">distinct</span> user_account) uv,</span><br><span class="line">    <span class="built_in">count</span>(page_name) pv</span><br><span class="line"><span class="keyword">from</span> android_log</span><br><span class="line"><span class="keyword">where</span> hit_date <span class="keyword">between</span> <span class="string">'{}'</span> <span class="keyword">and</span> <span class="string">'{}'</span></span><br><span class="line"><span class="keyword">and</span> page_name <span class="keyword">like</span> <span class="string">'%Kefujh%'</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> <span class="keyword">case</span> </span><br><span class="line">        <span class="keyword">when</span> province <span class="keyword">like</span> <span class="string">'ah'</span> <span class="keyword">then</span> <span class="string">'安徽'</span></span><br><span class="line">        <span class="keyword">when</span> province <span class="keyword">like</span> <span class="string">'fj'</span> <span class="keyword">then</span> <span class="string">'福建'</span></span><br><span class="line">        <span class="keyword">when</span> province <span class="keyword">like</span> <span class="string">'gd'</span> <span class="keyword">then</span> <span class="string">'广东'</span></span><br><span class="line">    <span class="keyword">else</span> <span class="string">'m'</span> </span><br><span class="line">    <span class="keyword">end</span> </span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">case</span> </span><br><span class="line">        <span class="keyword">when</span> province <span class="keyword">like</span> <span class="string">'ah'</span> <span class="keyword">then</span> <span class="string">'安徽'</span></span><br><span class="line">        <span class="keyword">when</span> province <span class="keyword">like</span> <span class="string">'fj'</span> <span class="keyword">then</span> <span class="string">'福建'</span></span><br><span class="line">        <span class="keyword">when</span> province <span class="keyword">like</span> <span class="string">'gd'</span> <span class="keyword">then</span> <span class="string">'广东'</span></span><br><span class="line">    <span class="keyword">else</span> <span class="string">'m'</span> </span><br><span class="line">    <span class="keyword">end</span> </span><br><span class="line">limit <span class="number">1000</span></span><br></pre></td></tr></tbody></table></figure></li></ul><ul><li>范围转换<figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line"><span class="keyword">case</span> <span class="keyword">when</span> population <span class="operator">&lt;</span> <span class="number">250</span> <span class="keyword">then</span> <span class="string">'1'</span> </span><br><span class="line"><span class="keyword">when</span> population  <span class="operator">=</span> <span class="number">250</span> <span class="keyword">and</span>  population <span class="operator">&lt;</span> <span class="number">500</span> <span class="keyword">then</span> <span class="string">'2'</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">null</span> <span class="keyword">end</span>  <span class="keyword">as</span> pop_class,</span><br><span class="line"><span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">as</span> cntfrom </span><br><span class="line"><span class="keyword">from</span> pop </span><br></pre></td></tr></tbody></table></figure></li></ul><h2 id="日期函数"><a href="#日期函数" class="headerlink" title="日期函数"></a>日期函数</h2><ol><li><strong>时间函数</strong></li></ol><table><thead><tr><th>函数名</th><th>定义</th></tr></thead><tbody><tr><td>NOW()</td><td>当前时间</td></tr><tr><td>curdate()</td><td>获取当前时刻的日期</td></tr><tr><td>curtime()</td><td>获取当前时刻的时间</td></tr><tr><td>date()</td><td>返回时间的日期部分</td></tr><tr><td>year()</td><td>返回时间的年份</td></tr><tr><td>month()</td><td>返回时间的月份</td></tr><tr><td>day()</td><td>返回日期的天</td></tr><tr><td>hour()</td><td>返回时间的小时</td></tr><tr><td>minute()</td><td>返回时间的分钟</td></tr><tr><td>second()</td><td>返回时间的秒</td></tr><tr><td>week ()</td><td>第几周</td></tr><tr><td>time()</td><td>将日期转换为时间</td></tr><tr><td>dayofweek()</td><td>返回星期几，1为星期天</td></tr><tr><td>dayofyear()</td><td>一年中的第几天</td></tr><tr><td>weekofyear(now())</td><td>获取当前时间是全年的第几周</td></tr><tr><td>quarter()</td><td>获取时间所属的季度</td></tr><tr><td>sec_to_time ( )</td><td>秒数转成时间</td></tr><tr><td>date_add(dt,interval 1 day )</td><td>时间相加</td></tr><tr><td>date_sub(date,INTERVAL expr（时间间隔） type（时间类型，天、月、年）)</td><td>时间相减</td></tr><tr><td>datediff()</td><td>时间的差值</td></tr><tr><td>extract()</td><td>抽取具体的年、月、日</td></tr><tr><td>date_format()</td><td>输出指定时间格式</td></tr></tbody></table><ol start="2"><li> <strong>extract(unit from datetime)用法</strong></li></ol><ul><li>unit的取值说明为：</li></ul><table><thead><tr><th>unit</th><th>说明</th></tr></thead><tbody><tr><td>year</td><td>年</td></tr><tr><td>month</td><td>月</td></tr><tr><td>day</td><td>日</td></tr><tr><td>hour</td><td>小时</td></tr><tr><td>minute</td><td>分钟</td></tr><tr><td>second</td><td>秒</td></tr><tr><td>week</td><td>周</td></tr></tbody></table> <figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">    <span class="built_in">extract</span>(<span class="keyword">year</span> <span class="keyword">from</span> "2020-07-29 10:31:10") <span class="keyword">as</span> y,</span><br><span class="line">    <span class="built_in">extract</span>(<span class="keyword">month</span> <span class="keyword">from</span>  "2020-07-29 10:31:10") <span class="keyword">as</span> m</span><br></pre></td></tr></tbody></table></figure><blockquote><p>输出结果为：</p></blockquote><table><thead><tr><th>y</th><th>m</th></tr></thead><tbody><tr><td>2020</td><td>07</td></tr></tbody></table><ol start="3"><li><strong>date_format() 用法</strong></li></ol><ul><li>参数可选格式：</li></ul><table><thead><tr><th>主题</th><th>格式</th><th>描述</th></tr></thead><tbody><tr><td>年</td><td>%Y</td><td>4位数字表示的年</td></tr><tr><td>月</td><td>%b</td><td>月份对应的英文缩写</td></tr><tr><td>月</td><td>%M</td><td>月份对应的英文全称</td></tr><tr><td>月</td><td>%m</td><td>以01-12的形式表示的月</td></tr><tr><td>月</td><td>%c</td><td>以1-12的形式表示的月</td></tr><tr><td>日</td><td>%d</td><td>以01-31的形式表示某月中的第几天</td></tr><tr><td>日</td><td>%e</td><td>以1-31的形式表示某月中的第几天</td></tr><tr><td>日</td><td>%D</td><td>用th后缀表示某月中的第几天</td></tr><tr><td>日</td><td>%j</td><td>以001-366的形式表示一年中的第几天</td></tr><tr><td>周</td><td>%a</td><td>星期几对应的英文缩写</td></tr><tr><td>周</td><td>%W</td><td>星期几对应的英文全称</td></tr><tr><td>时</td><td>%H</td><td>以00-23的形式表示的小时</td></tr><tr><td>时</td><td>%h</td><td>以01-12的形式表示的小时</td></tr><tr><td>分</td><td>%i</td><td>以00-59的形式表示的分钟</td></tr><tr><td>秒</td><td>%S</td><td>以00-59的形式表示的秒</td></tr><tr><td>秒</td><td>%f</td><td>微秒</td></tr><tr><td>时分秒</td><td>%T</td><td>返回当前时刻的时分秒（hh:mm:ss)</td></tr></tbody></table> <figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">    date_format("2020-07-29 10:31:10", "%Y-%m-%d")</span><br></pre></td></tr></tbody></table></figure><ol start="4"><li><strong>datediff-求留存率</strong><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> a1 <span class="keyword">as</span> (<span class="keyword">select</span> </span><br><span class="line">    hit_date,</span><br><span class="line">    user_account</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    computer_view.data</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">    hit_date <span class="keyword">between</span> <span class="string">'2019-04-25'</span> <span class="keyword">and</span> <span class="string">'2019-05-13'</span></span><br><span class="line">    <span class="keyword">and</span> </span><br><span class="line">    btn_information <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span>),</span><br><span class="line">a2 <span class="keyword">as</span> (<span class="keyword">select</span> </span><br><span class="line">    hit_date,</span><br><span class="line">    user_account</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    computer_view.data</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">    hit_date <span class="keyword">between</span> <span class="string">'2019-04-25'</span> <span class="keyword">and</span> <span class="string">'2019-05-13'</span></span><br><span class="line">    <span class="keyword">and</span> </span><br><span class="line">    btn_information <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span>)</span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">a1.hit_date,</span><br><span class="line"><span class="built_in">count</span>(<span class="keyword">distinct</span> a1.user_account) uv,<span class="comment">---一次性求次1日，次3日， 次7日留存，此方法不能计算pv，会造成笛卡尔积</span></span><br><span class="line"><span class="built_in">count</span>(<span class="keyword">distinct</span> <span class="keyword">case</span> <span class="keyword">when</span> datediff(a2.hit_date, a1.hit_date) <span class="operator">=</span> <span class="number">1</span> <span class="keyword">then</span> a1.user_account <span class="keyword">else</span> <span class="keyword">null</span> <span class="keyword">end</span> ) next_day,</span><br><span class="line"><span class="built_in">count</span>(<span class="keyword">distinct</span> <span class="keyword">case</span> <span class="keyword">when</span> datediff(a2.hit_date, a1.hit_date) <span class="operator">=</span> <span class="number">3</span> <span class="keyword">then</span> a1.user_account <span class="keyword">else</span> <span class="keyword">null</span> <span class="keyword">end</span> ) three_day,</span><br><span class="line"><span class="built_in">count</span>(<span class="keyword">distinct</span> <span class="keyword">case</span> <span class="keyword">when</span> datediff(a2.hit_date, a1.hit_date) <span class="operator">=</span> <span class="number">7</span> <span class="keyword">then</span> a1.user_account <span class="keyword">else</span> <span class="keyword">null</span> <span class="keyword">end</span> ) seven_day</span><br><span class="line"><span class="keyword">from</span> a1 <span class="keyword">join</span> a2 <span class="keyword">on</span> a1.user_account <span class="operator">=</span> a2.user_account</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> a1.hit_date</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> a1.hit_date</span><br><span class="line">limit <span class="number">100</span></span><br></pre></td></tr></tbody></table></figure></li></ol><!-- - date_add 求留存率<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">---步骤1：统计每天的uv</span></span><br><span class="line"></span><br><span class="line"><span class="comment">---步骤2： - 统计10-15号每天的次日留存数， 统计次3、7日留存只需将1换为3、7</span></span><br><span class="line"><span class="keyword">with</span> a1 <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> </span><br><span class="line">        user_account,</span><br><span class="line">        hit_date</span><br><span class="line">    <span class="keyword">from</span> </span><br><span class="line">        computer_view.data</span><br><span class="line">    <span class="keyword">where</span> </span><br><span class="line">        hit_date <span class="keyword">between</span>  <span class="string">&#x27;2018-11-10&#x27;</span> <span class="keyword">and</span> <span class="string">&#x27;2018-11-15&#x27;</span></span><br><span class="line">),</span><br><span class="line">a2 <span class="keyword">as</span> (</span><br><span class="line">        <span class="keyword">select</span> </span><br><span class="line">        user_account,</span><br><span class="line">        hit_date</span><br><span class="line">    <span class="keyword">from</span> </span><br><span class="line">        computer_view.data</span><br><span class="line">    <span class="keyword">where</span> </span><br><span class="line">        hit_date <span class="keyword">between</span> <span class="string">&#x27;2018-11-10&#x27;</span> <span class="keyword">and</span> <span class="string">&#x27;2018-11-25&#x27;</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">    a1.hit_date,</span><br><span class="line">    <span class="built_in">count</span>(<span class="keyword">distinct</span> a1.user_account) <span class="keyword">as</span> uv</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    a1 <span class="keyword">join</span> a2 <span class="keyword">on</span> a1.user_account <span class="operator">=</span> a2.user_account</span><br><span class="line"><span class="keyword">WHERE</span>   </span><br><span class="line">    a2.hit_date <span class="operator">=</span>  date_add(a1.hit_date, <span class="number">1</span>) </span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line">    a1.hit_date</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">BY</span></span><br><span class="line">    a1.hit_date <span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="operator">&lt;</span><span class="operator">!</span><span class="comment">-- --步骤3：计算留存率</span></span><br></pre></td></tr></table></figure><!-- - 计算留存率的其他写法-迷神<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 留存sql优化</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">from</span>(</span><br><span class="line">    <span class="keyword">select</span> userid, <span class="built_in">count</span>(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">from</span>(</span><br><span class="line">        <span class="keyword">select</span> t1.userid,</span><br><span class="line">                t1.statdate</span><br><span class="line">        <span class="keyword">from</span></span><br><span class="line">            table1 t1</span><br><span class="line">        <span class="keyword">where</span></span><br><span class="line">            t1.statdate <span class="operator">=</span> $&#123;上<span class="number">30</span>天日期&#125;</span><br><span class="line">            <span class="keyword">and</span> t1.statdate <span class="operator">&lt;=</span> $&#123;上一天日期&#125;</span><br><span class="line">        <span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">            t1.userid,</span><br><span class="line">            t1.statdate</span><br><span class="line">        ) s1</span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">        userid</span><br><span class="line">    <span class="keyword">having</span></span><br><span class="line">        <span class="built_in">count</span>(<span class="number">1</span>)  <span class="number">2</span></span><br><span class="line">    ) R1</span><br><span class="line"></span><br><span class="line"><span class="comment">--此sql为一个样例，计算连续跟任意都适用，至于计算第N天，只需要更改下日期过滤条件，变成=$[上N天日期]，=$&#123;上一天日期&#125;。 </span></span><br><span class="line"><span class="comment">--另外，这种方式适合跑当前周期数据，如果跑历史数据，可以写个循环。当然，最暴力还是直接用userid 关联。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--这种写法，更多是针对现在大部分分布式处理平台的特性，尽可能将数据合理均匀分片，每台服务器各自运算自己的，最后汇总。 尽可能少用 count distinct 这种写法，因为无法利用分片的特性。</span></span><br></pre></td></tr></table></figure><ul><li>留存率的另一种写法-勇哥</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> a1 <span class="keyword">as</span> (</span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">hit_date,</span><br><span class="line">user_account,</span><br><span class="line"><span class="built_in">count</span>(<span class="number">1</span>) <span class="keyword">as</span> hit_count</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">apache_computer_view.client_android_log</span><br><span class="line"><span class="keyword">WHERE</span> </span><br><span class="line">hit_date <span class="keyword">between</span> <span class="string">&#x27;2020-04-01&#x27;</span> <span class="keyword">and</span>  <span class="string">&#x27;2020-04-07&#x27;</span></span><br><span class="line"><span class="keyword">and</span></span><br><span class="line">btn_navigation  <span class="keyword">like</span> &quot;%查询办理%&quot;</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">    <span class="number">1</span>,<span class="number">2</span></span><br><span class="line">),</span><br><span class="line">a2 <span class="keyword">as</span> (</span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">hit_date,</span><br><span class="line">    user_account,</span><br><span class="line">    <span class="built_in">count</span>(<span class="number">1</span>) <span class="keyword">as</span> hit_count</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">apache_computer_view.client_android_log</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">hit_date <span class="keyword">between</span> <span class="string">&#x27;2020-04-01&#x27;</span> <span class="keyword">and</span>  <span class="string">&#x27;2020-04-07&#x27;</span></span><br><span class="line"><span class="keyword">and</span></span><br><span class="line">btn_navigation  <span class="keyword">like</span> &quot;%查询办理%&quot;</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">    <span class="number">1</span>,<span class="number">2</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">a1.hit_date <span class="keyword">as</span> <span class="keyword">one</span>,</span><br><span class="line">a2.hit_date <span class="keyword">as</span> two,</span><br><span class="line">datediff(a2.hit_date, a1.hit_date) <span class="keyword">as</span> cha,</span><br><span class="line"><span class="built_in">count</span>(<span class="keyword">distinct</span> a2.user_account),</span><br><span class="line"><span class="built_in">sum</span>(a2.hit_count)</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    a1 <span class="keyword">left</span> <span class="keyword">join</span> a2 <span class="keyword">on</span> a1.user_account <span class="operator">=</span> a2.user_account</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">    <span class="number">1</span>,<span class="number">2</span></span><br><span class="line"><span class="keyword">having</span></span><br><span class="line">    cha <span class="operator">&gt;</span> <span class="number">0</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span></span><br><span class="line">    <span class="number">1</span>,<span class="number">2</span></span><br><span class="line">​``` <span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="operator">-</span> 计算月留存率的简单写法：筛选出在两个月份出现的用户</span><br><span class="line">​```<span class="keyword">sql</span></span><br><span class="line"><span class="keyword">with</span> a1 <span class="keyword">as</span> (<span class="keyword">select</span> </span><br><span class="line">    user_account,</span><br><span class="line">    <span class="built_in">count</span>(<span class="keyword">distinct</span> <span class="keyword">month</span> (hit_date)) <span class="keyword">as</span> c</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">   android_log </span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">     hit_date <span class="keyword">between</span> <span class="string">&#x27;2019-03-01&#x27;</span> <span class="keyword">and</span> <span class="string">&#x27;2019-04-31&#x27;</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line"> user_account</span><br><span class="line"><span class="keyword">having</span> </span><br><span class="line">  c <span class="operator">=</span> <span class="number">2</span></span><br><span class="line"><span class="keyword">union</span> </span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">    user_account,</span><br><span class="line">    <span class="built_in">count</span>(<span class="keyword">distinct</span> <span class="keyword">month</span> (hit_date)) <span class="keyword">as</span> c</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    ios_log </span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">     hit_date <span class="keyword">between</span> <span class="string">&#x27;2019-03-01&#x27;</span> <span class="keyword">and</span> <span class="string">&#x27;2019-04-31&#x27;</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line"> user_account</span><br><span class="line"><span class="keyword">having</span> </span><br><span class="line">  c <span class="operator">=</span> <span class="number">2</span></span><br><span class="line">    )</span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line"><span class="built_in">count</span>(<span class="keyword">distinct</span> user_account) <span class="keyword">as</span> uv </span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">a1</span><br></pre></td></tr></table></figure><ol start="5"><li><p><strong>日期转换</strong></p><p>把2020-12-01日期字段改成：2020-12-01 这样的形式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">from_unixtime(unix_timestamp(hit_date,&#x27;yyyymmdd&#x27;),&#x27;yyyy-mm-dd&#x27;)</span><br></pre></td></tr></table></figure></li></ol><h2 id="数据分组与透视"><a href="#数据分组与透视" class="headerlink" title="数据分组与透视"></a>数据分组与透视</h2><ol><li><p><strong>对分组后的数据进行聚合运算</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span>     </span><br><span class="line">    <span class="keyword">year</span>(ymd), </span><br><span class="line">    <span class="built_in">avg</span>(price_close) <span class="comment">--- 对结果进行分类</span></span><br><span class="line"><span class="keyword">from</span>     </span><br><span class="line">    stocks</span><br><span class="line"><span class="keyword">where</span>     </span><br><span class="line">    exchange <span class="operator">=</span> <span class="string">&#x27;nasdaq&#x27;</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span>     </span><br><span class="line">    <span class="keyword">year</span>(ymd)</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span>     </span><br><span class="line">    <span class="keyword">year</span>(ymd) <span class="keyword">desc</span>;  <span class="comment">--desc 从高到低排列</span></span><br></pre></td></tr></table></figure></li><li><p><strong>对聚合后的数据进行条件筛选</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span>     </span><br><span class="line">    deparment, </span><br><span class="line">    <span class="built_in">avg</span>(salary) <span class="keyword">as</span> average </span><br><span class="line"><span class="keyword">from</span>      </span><br><span class="line">    salary_info</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span>     </span><br><span class="line">    deparment </span><br><span class="line"><span class="keyword">having</span>     </span><br><span class="line">    average <span class="operator">&gt;</span> <span class="number">3000</span><span class="comment">--- having 子句来限制输出结果--- 查找平均工资大于3000的部门</span></span><br></pre></td></tr></table></figure></li></ol><ul><li>having 与 where 的区别：<blockquote><p>Where 是一个约束声明，使用Where约束来自数据库的数据，Where是在结果返回之前起作用的，Where中不能使用聚合函数。<br>Having是一个过滤声明，是在查询返回结果集以后对查询结果进行的过滤操作，在Having中可以使用聚合函数。</p></blockquote></li></ul><ol start="3"><li><strong>group_concat()函数</strong><blockquote><p>对以下数据进行分组处理</p></blockquote></li></ol><table><thead><tr><th>id</th><th>score</th></tr></thead><tbody><tr><td>1</td><td>78</td></tr><tr><td>2</td><td>52</td></tr><tr><td>1</td><td>69</td></tr><tr><td>2</td><td>45</td></tr></tbody></table> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">    id,</span><br><span class="line">    group_concat(score) <span class="keyword">as</span> g_score</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    tables</span><br></pre></td></tr></table></figure><blockquote><p>得到结果如下</p></blockquote><table><thead><tr><th>id</th><th>score</th></tr></thead><tbody><tr><td>1</td><td>78,69</td></tr><tr><td>2</td><td>52,45</td></tr></tbody></table><ol start="4"><li><strong>rollup 函数用法</strong></li></ol><ul><li> 需求背景： 求每个省份的销量，然后求每个省份下城市的销量，汇总到一张表中。</li></ul><blockquote><p>写法1：</p></blockquote> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">    province,</span><br><span class="line">    <span class="keyword">null</span> <span class="keyword">as</span> city,</span><br><span class="line">    <span class="built_in">sum</span>(<span class="keyword">order</span>)</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    table_sales</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line">    province</span><br><span class="line"><span class="keyword">union</span> <span class="keyword">all</span> </span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">    province,</span><br><span class="line">    city,</span><br><span class="line">    <span class="built_in">sum</span>(<span class="keyword">order</span>)</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    table_sales</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line">    province,</span><br><span class="line">    city</span><br></pre></td></tr></table></figure><blockquote><p>写法2：<br> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line"> province, city, <span class="built_in">sum</span>(<span class="keyword">order</span>)</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">table_sales</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line"> province,city</span><br><span class="line"><span class="keyword">with</span> <span class="keyword">rollup</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>得到结果如下：</p></blockquote><table><thead><tr><th>province</th><th>city</th><th>sum(order)</th></tr></thead><tbody><tr><td>陕西</td><td>null</td><td>50</td></tr><tr><td>陕西</td><td>西安</td><td>20</td></tr><tr><td>陕西</td><td>渭南</td><td>10</td></tr><tr><td>陕西</td><td>汉中</td><td>20</td></tr><tr><td>北京</td><td>北京</td><td>24</td></tr><tr><td>null</td><td>null</td><td>74</td></tr></tbody></table><ol start="5"><li>数据透视表</li></ol><ul><li> 将下表进行按照年份和季度进行透视汇总</li></ul><table><thead><tr><th>年</th><th>季度</th><th>销售量</th></tr></thead><tbody><tr><td>1991</td><td>1</td><td>11</td></tr><tr><td>1991</td><td>2</td><td>12</td></tr><tr><td>1991</td><td>3</td><td>13</td></tr><tr><td>1991</td><td>4</td><td>14</td></tr><tr><td>1992</td><td>1</td><td>21</td></tr><tr><td>1992</td><td>2</td><td>22</td></tr><tr><td>1992</td><td>3</td><td>23</td></tr><tr><td>1992</td><td>4</td><td>24</td></tr></tbody></table> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">年,</span><br><span class="line"><span class="built_in">sum</span>( <span class="keyword">case</span> <span class="keyword">when</span>  季度 <span class="operator">=</span> <span class="number">1</span> <span class="keyword">then</span> 销售量  <span class="keyword">else</span> <span class="keyword">null</span> <span class="keyword">end</span> ) 一季度,</span><br><span class="line"><span class="built_in">sum</span>( <span class="keyword">case</span> <span class="keyword">when</span> 季度 <span class="operator">=</span> <span class="number">2</span> <span class="keyword">then</span> 销售量 <span class="keyword">else</span> <span class="keyword">null</span> <span class="keyword">end</span> ) <span class="keyword">as</span> 二季度,</span><br><span class="line"><span class="built_in">sum</span>( <span class="keyword">case</span> <span class="keyword">when</span> 季度 <span class="operator">=</span> <span class="number">3</span> <span class="keyword">then</span> 销售量 <span class="keyword">else</span> <span class="keyword">null</span> <span class="keyword">end</span> ) <span class="keyword">as</span>  三季度,</span><br><span class="line"><span class="built_in">sum</span>( <span class="keyword">case</span> <span class="keyword">when</span> 季度 <span class="operator">=</span> <span class="number">4</span> <span class="keyword">then</span> 销售量 <span class="keyword">else</span> <span class="keyword">null</span> <span class="keyword">end</span> ) <span class="keyword">as</span> 四季度</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">page </span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line">年</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> </span><br><span class="line">年</span><br></pre></td></tr></table></figure><blockquote><p>查询结果如下：</p></blockquote><table><thead><tr><th>年</th><th>一季度</th><th>二季度</th><th>三季度</th><th>四季度</th></tr></thead><tbody><tr><td>1991</td><td>11</td><td>12</td><td>13</td><td>14</td></tr><tr><td>1992</td><td>21</td><td>22</td><td>23</td><td>24</td></tr></tbody></table><ul><li>统计各部门男女分别有多少人</li></ul><table><thead><tr><th>姓名</th><th>部门</th><th>性别</th></tr></thead><tbody><tr><td>甲</td><td>A</td><td>男</td></tr><tr><td>乙</td><td>A</td><td>男</td></tr><tr><td>丙</td><td>B</td><td>女</td></tr><tr><td>丁</td><td>A</td><td>女</td></tr><tr><td>张</td><td>B</td><td>男</td></tr><tr><td>赵</td><td>B</td><td>女</td></tr></tbody></table> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line"><span class="string">&#x27;部门&#x27;</span>,</span><br><span class="line"><span class="built_in">sum</span>( <span class="keyword">case</span> <span class="keyword">when</span> 性别 <span class="operator">=</span> <span class="string">&#x27;男&#x27;</span> <span class="keyword">then</span> <span class="number">1</span>  <span class="keyword">else</span> <span class="keyword">null</span> <span class="keyword">end</span> ) <span class="keyword">as</span> <span class="string">&#x27;男&#x27;</span>,</span><br><span class="line"><span class="built_in">sum</span>( <span class="keyword">case</span> <span class="keyword">when</span> 性别 <span class="operator">=</span> <span class="string">&#x27;女&#x27;</span> <span class="keyword">then</span> <span class="number">1</span> <span class="keyword">else</span> <span class="keyword">null</span> <span class="keyword">end</span> ) <span class="keyword">as</span>  <span class="string">&#x27;女&#x27;</span></span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">table1</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line"><span class="string">&#x27;部门&#x27;</span></span><br></pre></td></tr></table></figure><blockquote><p>得到结果如下:</p></blockquote><table><thead><tr><th>部门</th><th>男</th><th>女</th></tr></thead><tbody><tr><td>A</td><td>2</td><td>1</td></tr><tr><td>B</td><td>1</td><td>2</td></tr></tbody></table><!-- `rollup` 函数输出结果，不会有 `null, null, null, city` 值， 和 `cube` 的区别在于： `cube` 是维度更细的统计，假设数据有 `n` 个维度， 那么 `rollup` 会有 `n` 个聚合，`cube` 会有 `2n` 个聚合。 --> <!-- >解法1：分别写5个sql，这种方法太低效了， 还需要在excel中进行合并。 <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(order_id)  <span class="keyword">as</span> sales <span class="keyword">from</span> table1 <span class="comment">---全国成交量</span></span><br><span class="line"><span class="keyword">select</span> area, <span class="built_in">count</span>(order_id) <span class="keyword">as</span> sales <span class="keyword">from</span> table1 <span class="keyword">group</span> <span class="keyword">by</span> area<span class="comment">--大区成交量</span></span><br><span class="line"><span class="keyword">select</span> area, province, <span class="built_in">count</span>(order_id) <span class="keyword">as</span> sales <span class="keyword">from</span> table1 <span class="keyword">group</span> <span class="keyword">by</span> area, province<span class="comment">--省成交量</span></span><br><span class="line"><span class="keyword">select</span> area, province, city, <span class="built_in">count</span>(order_id) <span class="keyword">as</span> sales <span class="keyword">from</span> table1 <span class="keyword">group</span> <span class="keyword">by</span>  area, province, city<span class="comment">---城市成交量</span></span><br><span class="line"><span class="keyword">select</span> area, province, city, shop, <span class="built_in">count</span>(order_id) <span class="keyword">as</span> sales <span class="keyword">from</span> table1 <span class="keyword">group</span> <span class="keyword">by</span> area, province, city, shop<span class="comment">--店铺成交量</span></span><br></pre></td></tr></table></figure><blockquote><p>解法2：通过 union 和 union all 对查询结果进行纵向合并—sql中有很多 null, 这是因为 union all 拼接的两个表的列数需要相等。</p></blockquote> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="built_in">count</span>(order_id)  <span class="keyword">as</span> sales <span class="keyword">from</span> table1 <span class="comment">---全国成交量</span></span><br><span class="line"><span class="keyword">union</span> <span class="keyword">all</span> </span><br><span class="line"><span class="keyword">select</span> <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>,<span class="keyword">null</span>,  area, <span class="built_in">count</span>(order_id) <span class="keyword">as</span> sales <span class="keyword">from</span> table1 <span class="keyword">group</span> <span class="keyword">by</span> area<span class="comment">--大区成交量</span></span><br><span class="line"><span class="keyword">union</span> <span class="keyword">all</span> </span><br><span class="line"><span class="keyword">select</span> <span class="keyword">null</span>, <span class="keyword">null</span>,<span class="keyword">null</span>,  area, province, <span class="built_in">count</span>(order_id) <span class="keyword">as</span> sales <span class="keyword">from</span> table1 <span class="keyword">group</span> <span class="keyword">by</span> area, province<span class="comment">--省成交量</span></span><br><span class="line"><span class="keyword">union</span> <span class="keyword">all</span> </span><br><span class="line"><span class="keyword">select</span> <span class="keyword">null</span>, <span class="keyword">null</span>, area, province, city, <span class="built_in">count</span>(order_id) <span class="keyword">as</span> sales <span class="keyword">from</span> table1 <span class="keyword">group</span> <span class="keyword">by</span>  area, province, city<span class="comment">---城市成交量</span></span><br><span class="line"><span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">null</span>,  area, province, city, shop, <span class="built_in">count</span>(order_id) <span class="keyword">as</span> sales <span class="keyword">from</span> table1 <span class="keyword">group</span> <span class="keyword">by</span> area, province, city, shop <span class="comment">--店铺成交量</span></span><br></pre></td></tr></table></figure><p>结果如下：</p><p><img src="https://i.loli.net/2019/06/10/5cfe6c219ca3f57084.png" alt="sql结果"></p><p>解法3：用<code>grouping sets</code>来根据不同维度组合进行聚合</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line"><span class="keyword">null</span>, area, province, city, shop</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">table1</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line"><span class="keyword">null</span>, area, province, city, shop</span><br><span class="line"><span class="keyword">grouping</span> <span class="keyword">set</span></span><br><span class="line">( <span class="keyword">null</span>, (<span class="keyword">null</span>, area), (<span class="keyword">null</span>, area,province), (<span class="keyword">null</span>, area, province, city), (<span class="keyword">null</span>,area, province, city,shop) )</span><br></pre></td></tr></table></figure><p>得到结果与利用 <code>union all</code>拼接结果相同。<code>group by</code>后面的字段表示要分组聚合的全部字段， <code>grouping sets</code>后面为 <code>group by</code> 后面各种字段的组合。 –&gt;</p><!-- 解法4：`cube`函数， 对`group by`的维度的所有组合进行聚合。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line"> area, province, city, shop</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">table1</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line"> area, province, city, shop</span><br><span class="line"><span class="keyword">with</span> <span class="keyword">cube</span></span><br></pre></td></tr></table></figure><p><code>cube</code> 会先对全部数据进行聚合，即 <code>null,null,null,null</code> 进行聚合，(只是不像解法3一样，显示null列， 如需显示只要加入null即可） 然后对 <code>area, null, null, null</code> 进行聚合，……. –&gt;</p><hr><h2 id="窗口函数"><a href="#窗口函数" class="headerlink" title="窗口函数"></a>窗口函数</h2><table><thead><tr><th>函数名</th><th>定义</th></tr></thead><tbody><tr><td>over()</td><td>指定分析函数工作的数据窗口大小，这个数据窗口大小可能会随着行的变化而变化</td></tr><tr><td><strong>常跟的函数</strong></td><td><strong>说明</strong></td></tr><tr><td>current row</td><td>当前行</td></tr><tr><td>n preceding</td><td>往前n行数据</td></tr><tr><td>n following</td><td>往后n行数据</td></tr><tr><td>unbounded</td><td>起点</td></tr><tr><td>uvbounded preceding</td><td>表示从前面的起点开始</td></tr><tr><td>unbounded following</td><td>表示到后面的终点</td></tr><tr><td>lag(col, n)</td><td>往前第n行数据</td></tr><tr><td>lead(col, n)</td><td>往后第n行数据</td></tr><tr><td>ntile(n)</td><td>把有序分区中的行分发到指定数据的组中， 各个组有编号，编号从1开始，ntile返回此行所属组的编号</td></tr><tr><td>first_value()</td><td>返回组中数据窗口的第一个值</td></tr><tr><td>last_value()</td><td>返回组中数据窗口的最后一个值</td></tr></tbody></table><ol><li><strong>聚合函数+over()</strong></li></ol><blockquote><p>商业表如下</p></blockquote><table><thead><tr><th>shop_name</th><th>order_date</th><th>cost</th></tr></thead><tbody><tr><td>A</td><td>2017-01-01</td><td>10</td></tr><tr><td>B</td><td>2017-01-01</td><td>15</td></tr><tr><td>C</td><td>2017-01-01</td><td>20</td></tr><tr><td>A</td><td>2017-01-02</td><td>25</td></tr><tr><td>B</td><td>2017-01-02</td><td>25</td></tr><tr><td>C</td><td>2017-01-02</td><td>20</td></tr><tr><td>A</td><td>2017-01-03</td><td>15</td></tr><tr><td>B</td><td>2017-01-03</td><td>10</td></tr><tr><td>C</td><td>2017-01-03</td><td>20</td></tr></tbody></table><ul><li>求每个店铺的每天效率和全部总销量</li></ul><blockquote><p>写法1</p></blockquote> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">    shop_name,</span><br><span class="line">    order_date,</span><br><span class="line">    cost,</span><br><span class="line">    (<span class="keyword">select</span> <span class="built_in">sum</span>(cost) <span class="keyword">from</span> business) <span class="keyword">as</span> sum_cost</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    business</span><br></pre></td></tr></table></figure><blockquote><p>写法2<br> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">select</span> </span><br><span class="line">    shop_name,</span><br><span class="line">    order_date,</span><br><span class="line">    cost,</span><br><span class="line">    <span class="built_in">sum</span>(cost)<span class="keyword">over</span>() <span class="keyword">as</span> sum_cost</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    business</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>得到结果如下</p></blockquote><table><thead><tr><th>shop_name</th><th>order_date</th><th>cost</th><th>sum_cost</th></tr></thead><tbody><tr><td>A</td><td>2017-01-01</td><td>10</td><td>150</td></tr><tr><td>B</td><td>2017-01-01</td><td>15</td><td>150</td></tr><tr><td>C</td><td>2017-01-01</td><td>20</td><td>150</td></tr><tr><td>A</td><td>2017-01-02</td><td>25</td><td>150</td></tr><tr><td>B</td><td>2017-01-02</td><td>25</td><td>150</td></tr><tr><td>C</td><td>2017-01-02</td><td>20</td><td>150</td></tr><tr><td>A</td><td>2017-01-03</td><td>15</td><td>150</td></tr><tr><td>B</td><td>2017-01-03</td><td>10</td><td>150</td></tr><tr><td>C</td><td>2017-01-03</td><td>20</td><td>150</td></tr></tbody></table><ol start="2"><li><strong>partition by 子句</strong></li></ol><ul><li>查询各店铺日销量明细及各店铺平均每日销量</li></ul><blockquote><p>写法1<br> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> a1 <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> </span><br><span class="line">        shop_name,order_name, cost</span><br><span class="line">    <span class="keyword">from</span> </span><br><span class="line">        business</span><br><span class="line">),</span><br><span class="line">a2 <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> </span><br><span class="line">        shop_name,</span><br><span class="line">        <span class="built_in">avg</span>(cost) <span class="keyword">as</span> avg_cost</span><br><span class="line">    <span class="keyword">from</span></span><br><span class="line">        business</span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line">        shop_name</span><br><span class="line">)</span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">    a1.shop_name,</span><br><span class="line">    a1.order_name,</span><br><span class="line">    a1.cost,</span><br><span class="line">    a2.avg_cost</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    a1 <span class="keyword">left</span> <span class="keyword">join</span> a2 <span class="keyword">on</span> a1.shop_name <span class="operator">=</span> a2.shop_name</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>写法2</p></blockquote> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">select</span> </span><br><span class="line">    shop_name,</span><br><span class="line">    order_name,</span><br><span class="line">    cost,</span><br><span class="line">    <span class="built_in">avg</span>(cost)<span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> shop_name) <span class="keyword">as</span> avg_cost</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    business</span><br></pre></td></tr></table></figure><blockquote><p>输出结果如下：</p></blockquote><table><thead><tr><th>shop_name</th><th>order_date</th><th>cost</th><th>age_cost</th></tr></thead><tbody><tr><td>A</td><td>2017-01-01</td><td>10</td><td>16.7</td></tr><tr><td>B</td><td>2017-01-01</td><td>15</td><td>16.7</td></tr><tr><td>C</td><td>2017-01-01</td><td>20</td><td>20</td></tr><tr><td>A</td><td>2017-01-02</td><td>25</td><td>16.7</td></tr><tr><td>B</td><td>2017-01-02</td><td>25</td><td>16.7</td></tr><tr><td>C</td><td>2017-01-02</td><td>20</td><td>20</td></tr><tr><td>A</td><td>2017-01-03</td><td>15</td><td>16.7</td></tr><tr><td>B</td><td>2017-01-03</td><td>10</td><td>16.7</td></tr><tr><td>C</td><td>2017-01-03</td><td>20</td><td>20</td></tr></tbody></table><ol start="3"><li> order by 子句</li></ol><ul><li>求不同店铺每日明细，及按照日期进行累加<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">select</span> </span><br><span class="line">    shop_name,</span><br><span class="line">    order_name,</span><br><span class="line">    cost,</span><br><span class="line">    <span class="built_in">sum</span>(cost)<span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> shop_name <span class="keyword">order</span> <span class="keyword">by</span> order_date)  <span class="keyword">as</span> sum_cost</span><br><span class="line">    <span class="comment">---只根据日期进行累加，不区分店铺。先排序，之后按照顺序，从起到到当前行进行求和</span></span><br><span class="line">    <span class="comment">---sum(cost)over( order by orderdate   rows between unbounded preceding and  current row)</span></span><br><span class="line">    <span class="comment">--- 按照日期进行排序，并将当前日期和前一天、后一天数据求和</span></span><br><span class="line">    <span class="comment">---sum(cost) over(order by  orderdate  rows between 1   preceding  between  1 following ) </span></span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    business</span><br><span class="line">    <span class="comment">--- sum没有问题，但是count(distinct user_account) 就不能用这种方法</span></span><br></pre></td></tr></table></figure><blockquote><p>输出结果如下：</p></blockquote></li></ul><table><thead><tr><th>shop_name</th><th>order_date</th><th>cost</th><th>age_cost</th></tr></thead><tbody><tr><td>A</td><td>2017-01-01</td><td>10</td><td>10</td></tr><tr><td>A</td><td>2017-01-02</td><td>25</td><td>35</td></tr><tr><td>A</td><td>2017-01-03</td><td>15</td><td>50</td></tr><tr><td>B</td><td>2017-01-01</td><td>15</td><td>15</td></tr><tr><td>B</td><td>2017-01-02</td><td>25</td><td>40</td></tr><tr><td>B</td><td>2017-01-03</td><td>10</td><td>50</td></tr><tr><td>C</td><td>2017-01-01</td><td>20</td><td>60</td></tr><tr><td>C</td><td>2017-01-02</td><td>20</td><td>60</td></tr><tr><td>C</td><td>2017-01-03</td><td>20</td><td>60</td></tr></tbody></table><!-- - 求每个人将按照日期进行累加的消费金额<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">name, </span><br><span class="line"><span class="built_in">sum</span>(cost) <span class="keyword">over</span> ( <span class="keyword">partition</span> <span class="keyword">by</span> name <span class="keyword">order</span> <span class="keyword">by</span>  orderdate  <span class="type">row</span> <span class="keyword">between</span> unbounded preceding <span class="keyword">and</span> <span class="keyword">current</span> <span class="type">row</span>) </span><br><span class="line"><span class="keyword">from</span>  business </span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line">name </span><br></pre></td></tr></table></figure><ul><li>要将cost按照日期进行倒序累加</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">select</span> </span><br><span class="line"><span class="operator">*</span>,</span><br><span class="line"><span class="built_in">sum</span>(cost) <span class="keyword">over</span> ( <span class="keyword">order</span> <span class="keyword">by</span> orderdate <span class="keyword">desc</span> <span class="type">row</span> <span class="keyword">between</span> unbounded preceding <span class="keyword">and</span> <span class="keyword">current</span> <span class="type">row</span>)</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">business </span><br><span class="line">​``` <span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">4.</span> <span class="built_in">ntile</span>()函数</span><br><span class="line"></span><br><span class="line"><span class="operator">-</span> <span class="operator">*</span><span class="operator">*</span>[ntile函数详解](https:<span class="operator">/</span><span class="operator">/</span>www.cnblogs.com<span class="operator">/</span><span class="number">52</span>xf<span class="operator">/</span>p<span class="operator">/</span><span class="number">4209211.</span>html)<span class="operator">*</span><span class="operator">*</span> </span><br><span class="line"><span class="operator">&gt;</span> ntile函数可以将有序数据，根据指定的组数进行分组处理。 编号从<span class="number">1</span>开始，对于每一行，ntile将返回此行所属的组编号。 ntile函数的分组依据：</span><br><span class="line"><span class="operator">&gt;</span><span class="number">1.</span> 检查能不能对所有满足条件的记录进行平均分组，若能则直接平均分配完成分组。</span><br><span class="line"><span class="operator">&gt;</span><span class="number">2.</span> 若不能，则会先分出一个组，此组个数为（总个数<span class="operator">/</span>总组数）<span class="operator">+</span><span class="number">1</span>。</span><br><span class="line"><span class="operator">&gt;</span><span class="number">3.</span> 分配之后系统会继续比较余下的记录数与未分配的组数能不能进行平均分配，若不能，则根据上面条件再分配。</span><br><span class="line"><span class="operator">&gt;</span><span class="operator">-</span> 例如：将<span class="number">6</span>个记录分为<span class="number">4</span>组， 不能平均分配则，第一组记录数为 （<span class="number">6</span><span class="operator">/</span><span class="number">4</span>)<span class="operator">+</span><span class="number">1</span> <span class="operator">=</span> <span class="number">2</span>条记录。剩余<span class="number">4</span>条记录分为<span class="number">3</span>组，不能平均分配，则第二组记录数为（<span class="number">4</span><span class="operator">/</span><span class="number">3</span>)<span class="operator">+</span><span class="number">1</span><span class="operator">=</span><span class="number">2</span>条记录。剩余<span class="number">2</span>条记录分为<span class="number">2</span>组，则剩余<span class="number">2</span>组各<span class="number">1</span>条记录。</span><br><span class="line"></span><br><span class="line"><span class="operator">*</span> 将表分成三组</span><br><span class="line">​```<span class="keyword">sql</span></span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">     <span class="keyword">select</span> </span><br><span class="line">    shop_name,</span><br><span class="line">    order_name,</span><br><span class="line">    cost,</span><br><span class="line">    <span class="built_in">ntile</span>(<span class="number">3</span>)<span class="keyword">over</span> <span class="keyword">as</span> cut_group</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    business</span><br></pre></td></tr></table></figure><blockquote><p>输出结果如下</p></blockquote><table><thead><tr><th>shop_name</th><th>order_date</th><th>cost</th><th>cut_group</th></tr></thead><tbody><tr><td>A</td><td>2017-01-01</td><td>10</td><td>1</td></tr><tr><td>B</td><td>2017-01-01</td><td>15</td><td>1</td></tr><tr><td>C</td><td>2017-01-01</td><td>20</td><td>1</td></tr><tr><td>A</td><td>2017-01-02</td><td>25</td><td>2</td></tr><tr><td>B</td><td>2017-01-02</td><td>25</td><td>2</td></tr><tr><td>C</td><td>2017-01-02</td><td>20</td><td>2</td></tr><tr><td>A</td><td>2017-01-03</td><td>15</td><td>3</td></tr><tr><td>B</td><td>2017-01-03</td><td>10</td><td>3</td></tr><tr><td>C</td><td>2017-01-03</td><td>20</td><td>3</td></tr></tbody></table><ul><li>将各个店铺销量进行升序排序后进行内部切分<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">     <span class="keyword">select</span> </span><br><span class="line">    shop_name,</span><br><span class="line">    order_name,</span><br><span class="line">    cost,</span><br><span class="line">    <span class="built_in">ntile</span>(<span class="number">3</span>)<span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> shop_name <span class="keyword">order</span> <span class="keyword">by</span> cost) <span class="keyword">as</span> cut_group</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    business</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>输出结果如下</p></blockquote><table><thead><tr><th>shop_name</th><th>order_date</th><th>cost</th><th>age_cost</th></tr></thead><tbody><tr><td>A</td><td>2017-01-01</td><td>10</td><td>1</td></tr><tr><td>A</td><td>2017-01-02</td><td>25</td><td>2</td></tr><tr><td>A</td><td>2017-01-03</td><td>15</td><td>3</td></tr><tr><td>B</td><td>2017-01-01</td><td>15</td><td>1</td></tr><tr><td>B</td><td>2017-01-02</td><td>25</td><td>2</td></tr><tr><td>B</td><td>2017-01-03</td><td>10</td><td>3</td></tr><tr><td>C</td><td>2017-01-01</td><td>20</td><td>1</td></tr><tr><td>C</td><td>2017-01-02</td><td>20</td><td>2</td></tr><tr><td>C</td><td>2017-01-03</td><td>20</td><td>3</td></tr></tbody></table><ul><li>查询前50%时间的订单信息<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span>  <span class="operator">*</span>  <span class="keyword">from</span> </span><br><span class="line">(<span class="keyword">select</span> </span><br><span class="line">name,</span><br><span class="line">orderdate,</span><br><span class="line">cost,</span><br><span class="line"><span class="built_in">ntile</span>(<span class="number">1</span>)<span class="keyword">over</span>(<span class="keyword">order</span> <span class="keyword">by</span> orderdate) <span class="keyword">as</span> git</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">business)</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">git <span class="operator">=</span> <span class="number">1</span></span><br></pre></td></tr></table></figure></li></ul><ol start="5"><li><strong>排序函数</strong></li></ol><ul><li>SQl 中用于排序的函数有：rank、dense_rank、row_number、ntile函数,其语法为：</li></ul> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">rank</span>() <span class="keyword">over</span> ( <span class="keyword">partition</span> <span class="keyword">by</span> A <span class="keyword">ORDER</span> <span class="keyword">BY</span> B  <span class="keyword">desc</span> )   <span class="comment">---1、1、3</span></span><br><span class="line"><span class="built_in">dense_rank</span>() <span class="keyword">over</span> (<span class="keyword">partition</span> <span class="keyword">by</span> A <span class="keyword">order</span> <span class="keyword">by</span> B <span class="keyword">desc</span>)  <span class="comment">--- 1、1、2</span></span><br><span class="line"><span class="built_in">row_number</span>() <span class="keyword">over</span> (<span class="keyword">partition</span> <span class="keyword">by</span> A <span class="keyword">ORDER</span> <span class="keyword">BY</span> b <span class="keyword">desc</span>)    <span class="comment">--1、2、3</span></span><br><span class="line"><span class="built_in">ntile</span>() <span class="keyword">over</span> (<span class="keyword">partition</span> <span class="keyword">by</span> A <span class="keyword">ORDER</span> <span class="keyword">BY</span> b <span class="keyword">desc</span>)      <span class="comment">--分组</span></span><br></pre></td></tr></table></figure><ul><li>找出各省点击人数Top10的按钮？<blockquote><ol><li>取出 省份、按钮和 uv;</li><li>各省分组内，按照uv进行从大到小排序，并输出一列排序序号;</li><li>根据排序序号，取出排序前10的按钮和省份。 </li></ol></blockquote></li></ul> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">province,</span><br><span class="line">nbtn_name</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">(</span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">    province,  <span class="comment">--省份</span></span><br><span class="line">    nbtn_name, <span class="comment">--按钮 </span></span><br><span class="line">    uv,        <span class="comment">--uv</span></span><br><span class="line">    <span class="built_in">dense_rank</span>()<span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> province <span class="keyword">order</span> <span class="keyword">by</span> uv  <span class="keyword">DESC</span>) <span class="keyword">as</span> ran <span class="comment">--排序</span></span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">(<span class="keyword">select</span></span><br><span class="line">    province,</span><br><span class="line">    nbtn_name,</span><br><span class="line">    <span class="built_in">count</span>(<span class="keyword">distinct</span> user_account) <span class="keyword">as</span> uv</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    table1</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">    nbtn_name <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span>  </span><br><span class="line">    <span class="keyword">and</span> </span><br><span class="line">    hit_date <span class="operator">=</span> <span class="string">&#x27;2020-06-01&#x27;</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line">    province,</span><br><span class="line">    nbtn_name))</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">ran <span class="keyword">between</span> <span class="string">&#x27;1&#x27;</span> <span class="keyword">and</span> <span class="string">&#x27;10&#x27;</span></span><br></pre></td></tr></table></figure><ul><li>求连续3个月活跃的用户数</li></ul> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line"><span class="built_in">count</span>(<span class="keyword">distinct</span> user_account) <span class="keyword">as</span> uv </span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">(</span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">dt,</span><br><span class="line">user_account,</span><br><span class="line"><span class="built_in">dense_rank</span>()<span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> user_account <span class="keyword">order</span> <span class="keyword">by</span> dt) <span class="keyword">as</span> raws</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">(</span><br><span class="line">(<span class="keyword">select</span> </span><br><span class="line">user_account,</span><br><span class="line"><span class="keyword">month</span>(hit_date)  <span class="keyword">as</span> dt </span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">table1</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">hit_date <span class="keyword">between</span> <span class="string">&#x27;2020-04-01&#x27;</span> <span class="keyword">and</span> <span class="string">&#x27;2020-06-31&#x27;</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line">user_account, dt) a1</span><br><span class="line">) a2</span><br><span class="line">)</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">a2.raws <span class="operator">=</span> <span class="number">3</span></span><br></pre></td></tr></table></figure><ul><li>求4月连续7天进行签到的用户数<blockquote><ol><li>求出手机号和日期，并去重</li><li>根据手机号，对日期进行排序，并且日期和排序进行相减</li><li>对相减后得到的日期进行统计，并计算数量大于7的用户</li><li>对数量大于7的用户进行去重处理</li></ol></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line"><span class="built_in">count</span>(<span class="keyword">distinct</span> user_account) <span class="keyword">as</span> uv </span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">(</span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">user_account,</span><br><span class="line">raw,</span><br><span class="line"><span class="built_in">count</span>(raw) <span class="keyword">as</span> raw_1</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">(</span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">user_account,</span><br><span class="line">hit_date,</span><br><span class="line">date_sub(hit_date, <span class="built_in">row_number</span>()<span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> user_account <span class="keyword">order</span> <span class="keyword">by</span> hit_date) )<span class="keyword">as</span> raw</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">(</span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">user_account,</span><br><span class="line">hit_date</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">apache_computer_view.client_android_log</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">hit_date <span class="keyword">between</span> <span class="string">&#x27;2020-04-01&#x27;</span> <span class="keyword">and</span> <span class="string">&#x27;2020-04-31&#x27;</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line">user_account,</span><br><span class="line">hit_date))</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line">user_account,</span><br><span class="line">raw)</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">raw_1 <span class="operator">&gt;=</span> <span class="number">7</span></span><br></pre></td></tr></table></figure></li></ul><ol start="6"><li><strong>lag()和lead()函数</strong></li></ol><ul><li>查询顾客的上次购买时间</li></ul> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span>,</span><br><span class="line">    <span class="built_in">lag</span>(orderdate,<span class="number">1</span>)<span class="keyword">over</span>( partation <span class="keyword">by</span> name <span class="keyword">order</span> <span class="keyword">by</span>  orderdate)</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    business</span><br></pre></td></tr></table></figure><ul><li>查询顾客上次购买的时间, 与下次购买时间。相邻两个时间戳如何相减，求时间</li></ul> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span>,</span><br><span class="line">    <span class="built_in">lag</span>(orderdate, <span class="number">1</span>) <span class="keyword">over</span> (<span class="keyword">partition</span> <span class="keyword">by</span> name <span class="keyword">order</span> <span class="keyword">by</span> orderdate) <span class="keyword">as</span> up_date,</span><br><span class="line">    <span class="built_in">lead</span>(orderdate, <span class="number">1</span>) <span class="keyword">over</span> (<span class="keyword">partition</span> <span class="keyword">by</span> name <span class="keyword">order</span> <span class="keyword">by</span> orderdate) <span class="keyword">as</span> downdate</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    business </span><br></pre></td></tr></table></figure><ol start="7"><li> <strong>first_value()和last_value函数</strong></li></ol><ul><li>查询用户第一次购买时间和最后一次购买时间<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">    <span class="operator">*</span>,</span><br><span class="line">    <span class="built_in">first_value</span>(orderdate) <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> name <span class="keyword">order</span> <span class="keyword">by</span>  orderdate) <span class="keyword">as</span> first_date,</span><br><span class="line">    <span class="built_in">last_value</span>(orderdate) <span class="keyword">over</span> (<span class="keyword">partition</span> <span class="keyword">by</span> name <span class="keyword">order</span> <span class="keyword">by</span> orderdate) <span class="keyword">as</span> last_date</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    business</span><br></pre></td></tr></table></figure></li></ul><h2 id="多表连接"><a href="#多表连接" class="headerlink" title="多表连接"></a>多表连接</h2><ol><li><strong>join</strong></li></ol><blockquote><p>Hive中Join的关联键必须在ON ()中指定，不能在Where中指定,ON 子句指定了两个表间数据进行连接的条件。</p></blockquote><p><img src="https://i.loli.net/2019/06/11/5cffb911ad8e183153.png" alt="join"></p><ul><li>对于多张表进行连接查询</li></ul> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    (((a <span class="keyword">JOIN</span> b <span class="keyword">ON</span> a.ymd <span class="operator">=</span> b.ymd)</span><br><span class="line">      <span class="keyword">JOIN</span> c <span class="keyword">ON</span> a.ymd <span class="operator">=</span> c.ymd)</span><br><span class="line">      <span class="keyword">join</span> d <span class="keyword">on</span> a.ymd <span class="operator">=</span> d.ymd)</span><br><span class="line">       <span class="comment">---为什么条件内不将表 b 和表 c 进行连接操作， 因为 Hive总是按照从左到右的顺序来执行</span></span><br><span class="line"><span class="keyword">WHERE</span> </span><br><span class="line">    a. symbol <span class="operator">=</span> <span class="string">&#x27;Apple&#x27;</span>  <span class="keyword">AND</span> b.symbol <span class="operator">=</span> <span class="string">&#x27;Ibm&#x27;</span> <span class="keyword">AND</span> c.symbol <span class="operator">=</span> <span class="string">&#x27;Google&#x27;</span></span><br></pre></td></tr></table></figure><ol start="2"><li> <strong>并集：union 与 union all</strong></li></ol> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> a1 <span class="keyword">as</span> (</span><br><span class="line">        <span class="keyword">select</span></span><br><span class="line">            user_account</span><br><span class="line">        <span class="keyword">from</span></span><br><span class="line">            data</span><br><span class="line">        <span class="keyword">where</span></span><br><span class="line">            hit_date <span class="keyword">between</span> <span class="string">&#x27;2018-12-01&#x27;</span> <span class="keyword">and</span> <span class="string">&#x27;2018-12-02&#x27;</span></span><br><span class="line">            <span class="keyword">and</span></span><br><span class="line">            nbtn_name <span class="keyword">like</span> &quot;%支付宝%&quot;</span><br><span class="line">        <span class="keyword">union</span> </span><br><span class="line">        <span class="keyword">select</span></span><br><span class="line">            user_account</span><br><span class="line">        <span class="keyword">from</span></span><br><span class="line">            data</span><br><span class="line">        <span class="keyword">where</span></span><br><span class="line">            hit_date <span class="keyword">between</span> <span class="string">&#x27;2018-12-01&#x27;</span> <span class="keyword">and</span> <span class="string">&#x27;2018-12-02&#x27;</span></span><br><span class="line">        <span class="keyword">and</span></span><br><span class="line">        nbtn_name <span class="keyword">like</span> &quot;%手淘%&quot;)</span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">    <span class="built_in">count</span>(user_account) <span class="keyword">as</span> pv</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    a1</span><br></pre></td></tr></table></figure><ul><li>union 与 union all 的不同：<blockquote><ul><li>union, 结果包含所有行， 并删除重复行</li><li>unoin all, 结果包含所有行， 但不删除重复行</li></ul></blockquote></li></ul><ol start="3"><li> <strong>交集：intersect</strong></li></ol> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> a1 <span class="keyword">as</span> (</span><br><span class="line">        <span class="keyword">select</span></span><br><span class="line">            user_account</span><br><span class="line">        <span class="keyword">from</span></span><br><span class="line">            data1</span><br><span class="line">        <span class="keyword">where</span></span><br><span class="line">            hit_date <span class="keyword">between</span> <span class="string">&#x27;2018-12-01&#x27;</span> <span class="keyword">and</span> <span class="string">&#x27;2018-12-02&#x27;</span></span><br><span class="line">            <span class="keyword">and</span></span><br><span class="line">            nbtn_name <span class="keyword">like</span> &quot;%支付宝%&quot;</span><br><span class="line">        <span class="keyword">intersect</span></span><br><span class="line">        <span class="keyword">select</span></span><br><span class="line">            user_account</span><br><span class="line">        <span class="keyword">from</span></span><br><span class="line">            data1</span><br><span class="line">        <span class="keyword">where</span></span><br><span class="line">            hit_date <span class="keyword">between</span> <span class="string">&#x27;2018-12-01&#x27;</span> <span class="keyword">and</span> <span class="string">&#x27;2018-12-02&#x27;</span></span><br><span class="line">        <span class="keyword">and</span></span><br><span class="line">        nbtn_name <span class="keyword">like</span> &quot;%手淘%&quot;)</span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">    <span class="built_in">count</span>(user_account) <span class="keyword">as</span> pv</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    a1</span><br></pre></td></tr></table></figure><ol start="3"><li> <strong>差集：except</strong></li></ol> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> a1 <span class="keyword">as</span> (</span><br><span class="line">        <span class="keyword">select</span></span><br><span class="line">            user_account</span><br><span class="line">        <span class="keyword">from</span></span><br><span class="line">            data</span><br><span class="line">        <span class="keyword">where</span></span><br><span class="line">            hit_date <span class="keyword">between</span> <span class="string">&#x27;2018-12-01&#x27;</span> <span class="keyword">and</span> <span class="string">&#x27;2018-12-25&#x27;</span></span><br><span class="line">            <span class="keyword">and</span></span><br><span class="line">            nbtn_name <span class="keyword">like</span> &quot;%支付宝%&quot;</span><br><span class="line">        <span class="keyword">except</span></span><br><span class="line">        <span class="keyword">select</span></span><br><span class="line">            user_account</span><br><span class="line">        <span class="keyword">from</span></span><br><span class="line">            data</span><br><span class="line">        <span class="keyword">where</span></span><br><span class="line">            hit_date <span class="keyword">between</span> <span class="string">&#x27;2018-12-01&#x27;</span> <span class="keyword">and</span> <span class="string">&#x27;2018-12-25&#x27;</span></span><br><span class="line">        <span class="keyword">and</span></span><br><span class="line">        nbtn_name <span class="keyword">like</span> &quot;%手淘%&quot;)</span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">    <span class="built_in">count</span>(user_account) <span class="keyword">as</span> pv</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    a1</span><br></pre></td></tr></table></figure><h2 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h2><ol><li><p>select 子查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">    shop_name,</span><br><span class="line">    order_date,</span><br><span class="line">    cost,</span><br><span class="line">    (<span class="keyword">select</span> <span class="built_in">sum</span>(cost) <span class="keyword">from</span> business) <span class="keyword">as</span> sum_cost</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    business</span><br></pre></td></tr></table></figure></li><li><p>from 子查询</p></li></ol><ul><li>求连续3个月活跃的用户数</li></ul> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line"><span class="built_in">count</span>(<span class="keyword">distinct</span> user_account) <span class="keyword">as</span> uv </span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">(</span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">dt,</span><br><span class="line">user_account,</span><br><span class="line"><span class="built_in">dense_rank</span>()<span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> user_account <span class="keyword">order</span> <span class="keyword">by</span> dt) <span class="keyword">as</span> raws</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">(</span><br><span class="line">(<span class="keyword">select</span> </span><br><span class="line">user_account,</span><br><span class="line"><span class="keyword">month</span>(hit_date)  <span class="keyword">as</span> dt </span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">table1</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">hit_date <span class="keyword">between</span> <span class="string">&#x27;2020-04-01&#x27;</span> <span class="keyword">and</span> <span class="string">&#x27;2020-06-31&#x27;</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line">user_account, dt) a1</span><br><span class="line">) a2</span><br><span class="line">)</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">a2.raws <span class="operator">=</span> <span class="number">3</span></span><br></pre></td></tr></table></figure><ol start="3"><li>where 子查询</li></ol><ul><li>把平均成绩大于600的同学每次月考成绩提取出来<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">    id,</span><br><span class="line">    score,</span><br><span class="line">    month_num</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    table_score</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">    id <span class="keyword">in</span> </span><br><span class="line">    (</span><br><span class="line">        <span class="keyword">select</span> </span><br><span class="line">            id, age(score)</span><br><span class="line">        <span class="keyword">from</span> </span><br><span class="line">        table_score</span><br><span class="line">        <span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line">            id</span><br><span class="line">        <span class="keyword">having</span></span><br><span class="line">            age(score) <span class="operator">&gt;</span> <span class="number">600</span></span><br><span class="line">    )</span><br></pre></td></tr></table></figure></li></ul><ol start="4"><li>with 临时表</li></ol> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> a1 <span class="keyword">as</span> (</span><br><span class="line">        <span class="keyword">select</span></span><br><span class="line">            user_account</span><br><span class="line">        <span class="keyword">from</span></span><br><span class="line">            data</span><br><span class="line">        <span class="keyword">where</span></span><br><span class="line">            hit_date <span class="keyword">between</span> <span class="string">&#x27;2018-12-01&#x27;</span> <span class="keyword">and</span> <span class="string">&#x27;2018-12-25&#x27;</span></span><br><span class="line">            <span class="keyword">and</span></span><br><span class="line">            nbtn_name <span class="keyword">like</span> &quot;%支付宝%&quot;</span><br><span class="line">        <span class="keyword">except</span></span><br><span class="line">        <span class="keyword">select</span></span><br><span class="line">            user_account</span><br><span class="line">        <span class="keyword">from</span></span><br><span class="line">            data</span><br><span class="line">        <span class="keyword">where</span></span><br><span class="line">            hit_date <span class="keyword">between</span> <span class="string">&#x27;2018-12-01&#x27;</span> <span class="keyword">and</span> <span class="string">&#x27;2018-12-25&#x27;</span></span><br><span class="line">        <span class="keyword">and</span></span><br><span class="line">        nbtn_name <span class="keyword">like</span> &quot;%手淘%&quot;)</span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">    <span class="built_in">count</span>(user_account) <span class="keyword">as</span> pv</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    a1</span><br></pre></td></tr></table></figure><h2 id="Hive避免数据倾斜"><a href="#Hive避免数据倾斜" class="headerlink" title="Hive避免数据倾斜"></a>Hive避免数据倾斜</h2><blockquote><ul><li>数据倾斜：当我们在Hive上进行查询时，因为数据的分散度不够， 导致大量数据集中在一台或者几台服务器上， 导致数据的计算速度远远低于平均计算速度， 计算过程特别耗时。</li><li>数据倾斜的表现：任务进度长时间维持在99%，查看任务监控页面，发现只有少量子任务未完成。</li></ul></blockquote><ol><li><strong>小表Join大表</strong></li></ol><ul><li>Hive 会假定查询中最后一个表是最大的表， 在对每行记录进行连续操作时， 它会尝试将其他表缓存起来，然后扫描最后那个表进行计算。因此，我们在查询时，要保证连续查询中的表的大小从左到右依次是增加的。<blockquote><ul><li>假如，在 a, b 两个表中，b表最小， 则 写sql时需让b表在左，a表在右：</li></ul></blockquote></li></ul> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    a.price_close, b.price_close</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    b <span class="keyword">JOIN</span> a <span class="keyword">ON</span> b.ymd <span class="operator">=</span> a.ymd <span class="keyword">AND</span> b.symbol <span class="operator">=</span> a.symbol</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">    a.symbol <span class="operator">=</span> <span class="string">&#x27;APPLE&#x27;</span></span><br></pre></td></tr></table></figure> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    <span class="comment">/*+3`&#x27;LKLLGFG Streamtable(a)*/</span> a.price_close, b.price_close<span class="comment">---Hive支持使用/*+STREAMTALBE*/语法指定哪张表是大表， 不需要排序</span></span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    a <span class="keyword">JOIN</span> B <span class="keyword">on</span> a.ymd <span class="operator">=</span> b.ymd <span class="keyword">AND</span> a.symbol <span class="operator">=</span> b.symbol</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">    a.symbol <span class="operator">=</span> <span class="string">&#x27;Apple&#x27;</span></span><br></pre></td></tr></table></figure><ol start="2"><li> <strong>大表JOIN大表</strong></li></ol><ul><li> 空key过滤 <blockquote><p>有时join超时是因为某些key对应的数据太多，而相同key对应的数据都会发送到相同的reducer上，从而导致内存不够。此时我们应该仔细分析这些异常的key，很多情况下，这些key对应的数据是异常数据，我们需要在sql语句中进行过滤。</p></blockquote></li></ul><ul><li> 空key转换 <blockquote><ul><li>有时虽然某个key为空对应的数据很多，但是相应的数据不是异常数据，必须要包含在join的结果中，此时我们可以表a中key为空的字段赋一个随机值，是的数据随机均匀地分布到不同的reducer上。</li><li>把空值的 key 变成一个字符串加上随机数，就能把倾斜的数据分到不同的 reduce 上 ,解决数据倾斜问题。</li></ul></blockquote></li></ul><ol start="3"><li> <strong>count(distinct) 去重统计</strong></li></ol><ul><li>数据量大时，由于count distinct 操作需要用一个 reduce task 来完成， 这一个reduce 需要处理的数据量太大，会导致整个job很难完成，一般 count distinct 使用先group by 再 count的方式替换。</li></ul> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="keyword">distinct</span> id) <span class="keyword">from</span> bigtable</span><br></pre></td></tr></table></figure> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(id) <span class="keyword">from</span> (<span class="keyword">select</span> id <span class="keyword">from</span> bigtable <span class="keyword">group</span> <span class="keyword">by</span> id) a</span><br></pre></td></tr></table></figure><ol start="4"><li> <strong>避免笛卡尔积</strong></li></ol><p> 尽量避免产生笛卡尔积，如join时不加on条件，或无效的on条件。hive只能使用1个reducer来完成笛卡尔积</p><ol start="5"><li> <strong>行列过滤</strong></li></ol><ul><li>列处理： 在查询中， 避免使用 select *, 使用条件限制取需要的列。</li><li> 行处理： 在分区剪裁中，当使用join外关联时，如果将副表的过滤条件写在where后面，那么就会先全表关联，之后再过滤, 这样会耗费资源。</li></ul><blockquote><p>优化前后<br> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> o.id <span class="keyword">from</span> bigtable b </span><br><span class="line"><span class="keyword">join</span> ori o on.id <span class="operator">=</span> b.id </span><br><span class="line"><span class="keyword">where</span> o.id <span class="operator">&lt;=</span><span class="number">10</span>;</span><br></pre></td></tr></table></figure></p></blockquote> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> b.id <span class="keyword">from</span> bigtable b</span><br><span class="line"><span class="keyword">join</span> (<span class="keyword">select</span> id <span class="keyword">from</span> ori <span class="keyword">where</span> id <span class="operator">&lt;=</span><span class="number">10</span>) o <span class="keyword">on</span> b.id <span class="operator">=</span> o.id)</span><br></pre></td></tr></table></figure><blockquote><p>优化前后</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    a.price_close, b.price_close</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    b <span class="keyword">JOIN</span> a <span class="keyword">ON</span> b.ymd <span class="operator">=</span> a.ymd <span class="keyword">AND</span> b.symbol <span class="operator">=</span> a.symbol</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">    s.symbol <span class="operator">=</span> <span class="string">&#x27;APPLE&#x27;</span></span><br></pre></td></tr></table></figure> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    a.price_close, b.price_close</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    b <span class="keyword">JOIN</span> a <span class="keyword">ON</span> ( b.ymd <span class="operator">=</span> a.ymd <span class="keyword">AND</span> b.symbol <span class="operator">=</span> a.symbol <span class="keyword">and</span> s.symbol <span class="operator">=</span> <span class="string">&#x27;APPLE&#x27;</span>  <span class="comment">--正确的写法是将 where 条件写在 on 后面</span></span><br></pre></td></tr></table></figure><ol start="6"><li> <strong>union all 子查询避免中使用 group by等</strong></li></ol><ul><li>union all 子查询避免中使用 group by【替换 count(distinct) 除外】、count(distinct)、max、min等。</li></ul> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> a1 <span class="keyword">as</span> (</span><br><span class="line">        <span class="keyword">select</span></span><br><span class="line">            user_account,</span><br><span class="line">            hit_date</span><br><span class="line">        <span class="keyword">from</span></span><br><span class="line">            data</span><br><span class="line">        <span class="keyword">where</span></span><br><span class="line">            hit_date <span class="keyword">between</span> <span class="string">&#x27;2018-12-01&#x27;</span> <span class="keyword">and</span> <span class="string">&#x27;2018-12-13&#x27;</span></span><br><span class="line">            <span class="keyword">and</span></span><br><span class="line">            nbtn_name <span class="keyword">like</span> &quot;%支付宝%&quot;</span><br><span class="line">        <span class="keyword">union</span> <span class="keyword">all</span> </span><br><span class="line">        <span class="keyword">select</span></span><br><span class="line">            user_account,</span><br><span class="line">            hit_date</span><br><span class="line">        <span class="keyword">from</span></span><br><span class="line">            data</span><br><span class="line">        <span class="keyword">where</span></span><br><span class="line">            hit_date <span class="keyword">between</span> <span class="string">&#x27;2018-12-01&#x27;</span> <span class="keyword">and</span> <span class="string">&#x27;2018-12-13&#x27;</span></span><br><span class="line">        <span class="keyword">and</span></span><br><span class="line">        nbtn_name <span class="keyword">like</span> &quot;%支付宝%&quot;)</span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">    hit_date,</span><br><span class="line">    <span class="built_in">count</span>(user_account) <span class="keyword">as</span> pv</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    a1</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">    hit_date</span><br></pre></td></tr></table></figure><ol start="7"><li> <strong>避免不同数据类型进行关联</strong></li></ol><ul><li>使用CAST函数对数据类型进行转换，语法为cast(value AS TYPE)</li></ul> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">    a.price_close,</span><br><span class="line">    b.price_close</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    a <span class="keyword">join</span> b  <span class="keyword">on</span> a.user_id <span class="operator">=</span> <span class="built_in">cast</span>(b.user_id <span class="keyword">as</span> string)</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">    hit_date <span class="keyword">between</span> <span class="string">&#x27;2018-11-01&#x27;</span> <span class="keyword">and</span> <span class="string">&#x27;2018-11-02&#x27;</span></span><br><span class="line">    <span class="keyword">and</span> </span><br><span class="line">    a.symbol <span class="operator">=</span> <span class="string">&#x27;apple&#x27;</span></span><br></pre></td></tr></table></figure><!-- Hive的查询注意事项以及优化总结： 1. 尽量尽早过滤数据，减少每个阶段的数据量。对于分区表要加分区，同时只选择需要使用到的字段1. 对历史库的计算经验2. 尽量原子化操作，尽量避免一个SQL包含复杂逻辑，可以使用中间表来完成复杂的逻辑3. join操作 小表要注意放在join的左边，否则会引起磁盘和内存的大量消耗4. 如果union all的部分个数大于2，或者每个union部分数据量大，应该拆成多个insert into语句，实际测试过程中，执行时间能提升50% --><h2 id="用python脚本连接数据库"><a href="#用python脚本连接数据库" class="headerlink" title="用python脚本连接数据库"></a>用python脚本连接数据库</h2><!-- 作为一名数据分析师，日报、周报、月报数据一个也不能少。 相应的， 就要在数据库中提取大量的数据， 并处理大量的Excel表格。在提取和处理数据的过程中， 对于一些重复性的劳动， 写个Python脚本来实现半自动化， 能够大幅提高自己的工作效率。 以下是自己工作中的一点总结经验。 --><!-- 对于数据库的ip地址，用户名，密码等， 如果不清楚，或数据库连接不上， 需要和开发人员对接 --><ol><li><p>首先， 用Python连接数据库</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pyhive <span class="keyword">import</span> hive </span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">conn = hive.Connection(host=<span class="string">'ip地址'</span>, port=<span class="number">10000</span>, username=<span class="string">'用户名'</span>, database = <span class="string">'default'</span>, auth=<span class="string">'NOSASL'</span>)</span><br><span class="line">cursor = conn.cursor()<span class="comment"># 获得连接的游标</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>设置开始和结束时间 可以用python中的time函数设置时间</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">startdate = <span class="string">'2018-09-01'</span></span><br><span class="line">enddate   = <span class="string">'2018-09-19'</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>用Python中的format函数将日期传入{}中</p> <!-- * python中写sql脚本时， 需要用\来进行换行符的转换, \后面不能有空格。 --></li></ol><ul><li>日期用两个{}来代替， 用format函数将开始日期与结束日期传入<figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">sql_jifenxinxi_an = <span class="string">"""select </span></span><br><span class="line"><span class="string">    count(distinct user_account) as uv, </span></span><br><span class="line"><span class="string">    count(1) as pv </span></span><br><span class="line"><span class="string">from </span></span><br><span class="line"><span class="string">    computer_view.data </span></span><br><span class="line"><span class="string">where </span></span><br><span class="line"><span class="string">    hit_date between "{}" and "{}" </span></span><br><span class="line"><span class="string">    and </span></span><br><span class="line"><span class="string">    (btn_position like "服务-查询-积分信息%" </span></span><br><span class="line"><span class="string">    or </span></span><br><span class="line"><span class="string">    btn_home = "积分-扇形左" </span></span><br><span class="line"><span class="string">    ) </span></span><br><span class="line"><span class="string">limit 1000"""</span>.<span class="built_in">format</span>(startdate,enddate)</span><br><span class="line"><span class="comment"># format 插入时间</span></span><br><span class="line">cursor.execute(sql_jifenxinxi_an)</span><br><span class="line"><span class="comment"># 运行此语句</span></span><br><span class="line">cursor.fetchall()</span><br><span class="line"><span class="comment">#fetchall():接收全部的返回结果行.</span></span><br></pre></td></tr></tbody></table></figure><!-- 我们可以按照这个格式写工作中需要运行的多个SQL语句。 这样， 当脚本运行的时候， 我们可以腾出时间来去干其他工作， 等过一段时间，所有的SQL语句都跑完了， 我们再进行统一的整理。 --></li></ul><hr><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li><a href="https://mp.weixin.qq.com/s/Xw5DOHHGh838w8YXT9lO5g">讲讲 group 的plus版-张俊红</a></li><li>《对比excel,轻松学sql数据分析》</li><li>hive入门-视频课程</li></ol><iframe width="560" height="315" src="https://www.youtube.com/embed/9otkcuic-2o" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe>]]></content>
      
      
      <categories>
          
          <category> SQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python-Pandas库学习</title>
      <link href="/2020/06/01/2020-08-12-%E6%8A%80%E8%83%BD-Python-pandas%E5%BA%93%E5%AD%A6%E4%B9%A0/"/>
      <url>/2020/06/01/2020-08-12-%E6%8A%80%E8%83%BD-Python-pandas%E5%BA%93%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="读取与写入Excel数据"><a href="#读取与写入Excel数据" class="headerlink" title="读取与写入Excel数据"></a>读取与写入Excel数据</h2><ul><li><a href="https://blog.csdn.net/m0_37693335/article/details/81474995">相对路径与绝对路径</a></li></ul><ol><li>读取文件夹内容<blockquote><p>r（转义符）避免路径中的\被转义。路径中不加 \ 则需要把所有的\写成/。</p></blockquote></li></ol><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> pandas <span class="keyword">import</span> Series, DataFrame</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">file_list = os.listdir(<span class="string">r'E:\工作文件\周报\周数据\测试\0902-0908'</span>)</span><br><span class="line"><span class="built_in">print</span>(file_list, <span class="string">'\t'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取当前文件夹地址</span></span><br><span class="line">os.getcwd()</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>读取xls格式Excel表</li></ol><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">df = pd.read_excel(<span class="string">'E:/工作文件/an-商品汇总-uv.xls'</span>)</span><br><span class="line"></span><br><span class="line">df = pd.read_excel(<span class="string">r'E:\工作文件\an-商品汇总-uv.xls'</span>)</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><ol start="3"><li>读取csv格式Excel表</li></ol><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">df = pd.read_csv(<span class="string">'E:/工作文件/周报/周数据/测试/0902-0908/商品汇总.csv'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取csv文件，并用 分隔符分割</span></span><br><span class="line">df = pd.read_csv(<span class="string">r'E:\商品汇总.csv'</span>, sep = <span class="string">" "</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 只读取文件前两行</span></span><br><span class="line">df = pd.read_csv(<span class="string">r'E:\商品汇总.csv'</span>, nrows = <span class="number">2</span>)</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><ul><li> 读取显示编码错误</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改方式</span></span><br><span class="line">df = pd.read_csv(path + <span class="string">'登记用户 20191127.csv'</span>,encoding=<span class="string">"gbk"</span> )</span><br><span class="line"></span><br><span class="line"><span class="comment"># 当文件路径包含中文解析错误时，设置 engine 参数来消除这个错误</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 错误原因， 当调用read_csv方法时，默认使用C语言作为解析语言，只需要将默认值c语言更改为python</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果文件格式是  csv usf-8, 那么编码也改为 utf-8-sig</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果文件格式是 csv格式， 则编码格式为 gbk</span></span><br><span class="line"></span><br><span class="line">df = pd.read_csv(<span class="string">'登记用户 20191127.csv'</span>, engine = <span class="string">'python'</span>, encoding = <span class="string">'utf-8-sig'</span>)</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><ol start="4"><li>读取txt格式数据</li></ol><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">df = pd.read_table(<span class="string">r'C:\Users\Administrator\Desktop\haha.txt'</span>, sep = <span class="string">' '</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r'C:\Users\Administrator\Desktop\haha.txt'</span>, <span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    df = f.readlines() </span><br><span class="line"></span><br><span class="line">df = np.loadtxt(<span class="string">r'C:\Users\Administrator\Desktop\haha.txt'</span>)  <span class="comment"># 将txt文件存为numpy数组</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><ol start="5"><li>读取excel中的sheet名称</li></ol><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">df = pd.read_Excel(<span class="string">r'E:\工作文件\an-商品汇总-uv.xlsx'</span>, sheet_name = <span class="string">'sheet1'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 传入sheet的顺序，从0开始计数</span></span><br><span class="line">df = pd.read_Excel(<span class="string">r'E:\工作文件\an-商品汇总-uv.xlsx'</span>, sheet_name = <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取sheet,并制定文件中的第几行做行索引</span></span><br><span class="line">df = pd.read_Excel(<span class="string">r'E:\工作文件\an-商品汇总-uv.xlsx'</span>, sheet_name = <span class="number">0</span>, index_col = <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取sheet文件， 并制定文件中的第几列做列索引</span></span><br><span class="line">df = pd.read_Excel(<span class="string">r'E:\工作文件\商品汇总.xlsx'</span>, sheet_name = <span class="number">0</span>, head = <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 当本地文件过多时，可以通过设定 usecols 参数来指定要导入的列</span></span><br><span class="line">df = pd.read_Excel(<span class="string">r'E:\商品汇总.xlsx'</span>, usecols = <span class="number">0</span>)</span><br><span class="line"><span class="comment"># uescols = [0,2]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取excel中所有sheet，并进行合并</span></span><br><span class="line">rbook = []</span><br><span class="line">kong_data = os.listdir(<span class="string">r'F:\省资源位'</span>)</span><br><span class="line"><span class="keyword">for</span> file_name <span class="keyword">in</span> kong_data:</span><br><span class="line">    data_excel = pd.ExcelFile(<span class="string">r'F:\省资源位\\'</span>+file_name)</span><br><span class="line">    sheet = data_excel.sheet_names</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> sheet:</span><br><span class="line">        data_button_rest = pd.read_excel(<span class="string">r'F:\省资源位\\'</span>+file_name, sheet_name= i )</span><br><span class="line">        rbook.append(data_button_rest)</span><br><span class="line">        result_df =pd.concat(rbook)</span><br><span class="line">datas_excel = pd.DataFrame(result_df)</span><br></pre></td></tr></tbody></table></figure><ul><li>将运行的所有数据都展现出来， 而不是只展现最后一条</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span>  IPython.core.interactiveshell <span class="keyword">import</span> InteractiveShell</span><br><span class="line">InteractiveShell.ast_node_interactivity = <span class="string">"all"</span></span><br></pre></td></tr></tbody></table></figure><ol start="6"><li>将数据写入Excel表， 并输出</li></ol><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 写入数据</span></span><br><span class="line">df.to_excel(<span class="string">'C:/Users/Administrator/Desktop/'</span>+<span class="string">'商品分类.xlsx'</span>)</span><br><span class="line">df.to_excel(<span class="string">r'C:\Users\Administrator\Desktop\\'</span>+<span class="string">'商品分类.xlsx'</span>)</span><br><span class="line">df.to_excel(<span class="string">r'C:\Users\Administrator\Desktop/'</span>+<span class="string">'商品分类.xlsx'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 写入数据，且不带索引</span></span><br><span class="line">df.to_excel(<span class="string">'C:/Users/商品分类.xlsx'</span>, sheet_name = <span class="string">'首页'</span>, index = <span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置要导出的列</span></span><br><span class="line">df.to_excel(<span class="string">'C:/Users/商品分类.xlsx'</span>, sheet_name = <span class="string">'首页'</span>, index = <span class="literal">False</span>,</span><br><span class="line">           columns = [<span class="string">'ID'</span>, <span class="string">'销量’])</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 设置编码格式</span></span><br><span class="line"><span class="string">df.to_excel('</span>C:/Users/商品分类.xlsx<span class="string">', sheet_name = '</span>首页<span class="string">', index = False,</span></span><br><span class="line"><span class="string">           encoding = '</span>utf-<span class="number">8</span><span class="string">')</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 缺失值、无穷值处理</span></span><br><span class="line"><span class="string">df.to_excel('</span>C:/Users/商品分类.xlsx<span class="string">', sheet_name = '</span>首页<span class="string">', index = False,</span></span><br><span class="line"><span class="string">           na_rep = 0, # 缺失值用0填充</span></span><br><span class="line"><span class="string">           inf_rep = 0 # 无穷之用0填充</span></span><br><span class="line"><span class="string">           )</span></span><br><span class="line"><span class="string"># 导出csv文件，设置分隔符</span></span><br><span class="line"><span class="string">df.to_excel('</span>C:/Users/商品分类.xlsx<span class="string">', sheet_name = '</span>首页<span class="string">', index = False,</span></span><br><span class="line"><span class="string">            sep = '</span>,<span class="string">'</span></span><br><span class="line"><span class="string">           )</span></span><br></pre></td></tr></tbody></table></figure><ul><li>将求出的数据存储在excel中的多个sheet中</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> openpyxl <span class="keyword">import</span> load_workbook</span><br><span class="line"> </span><br><span class="line">writer = pd.ExcelWriter(<span class="string">'F:/notebooks/zhoushuju.xlsx'</span>)</span><br><span class="line"></span><br><span class="line">btn_navigation.to_excel(writer, sheet_name = <span class="string">'底部导航'</span>)</span><br><span class="line">shouye_top20.to_excel(writer, sheet_name = <span class="string">'首页top20'</span>)</span><br><span class="line">writer.save()</span><br><span class="line">writer.close()</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><ol start="7"><li>其他数据格式</li></ol><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 从SQL表/库导入数据 </span></span><br><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line">eng = pymysql.connet(host= <span class="string">'100.129'</span>, user = <span class="string">'root'</span>, password = <span class="string">'1234'</span>, df = <span class="string">'db'</span>, charset = <span class="string">'ugf8'</span>)</span><br><span class="line"></span><br><span class="line">query = <span class="string">"""select * from android_log """</span></span><br><span class="line"></span><br><span class="line">df = pd.read_sql(query, eng)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导出数据到SQL表 </span></span><br><span class="line">df.to_sql(table_name, eng)</span><br></pre></td></tr></tbody></table></figure><ol start="8"><li>常见问题</li></ol><ul><li>当文件有中文时， 可能会出现错误：Initializing from file failed 有中文， 可以用此方法解决</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">f = <span class="built_in">open</span>(‘我的文件.csv’)</span><br><span class="line">res = pd.read_csv(f)</span><br></pre></td></tr></tbody></table></figure><ul><li>查看大文件有多少列</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">data = <span class="built_in">open</span>(<span class="string">'E:/用户明细.csv'</span>)</span><br><span class="line">data1 = pd.read_csv(data, iterator=<span class="literal">True</span>)</span><br><span class="line">data2 = data1.get_chunk(<span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(data2)</span><br></pre></td></tr></tbody></table></figure><p><a href="http://wiki.jikexueyuan.com/project/explore-python/Advanced-Features/iterator.html">迭代器</a></p><!-- # 对输出数据进行处理[pandas的数据输出显示设置](https://www.jianshu.com/p/5c0aa1fa19af)1. 对表中某一列元素进行相同操作<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">df[&#x27;金额&#x27;].apply(lambda x:x+1)</span><br><span class="line"></span><br><span class="line">df[&#x27;金额&#x27;] +2</span><br></pre></td></tr></table></figure><ol start="2"><li>对表中每一个元素进行相同操作</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.applymap(lambda x:x+1)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">df = pd.DataFrame(np.random.randn(<span class="number">150</span>, <span class="number">150</span>))</span><br><span class="line"><span class="comment"># pd.set_option(&#x27;expand_frame_repr&#x27;, False) #数据超过总宽度后，是否折叠显示</span></span><br><span class="line">pd.set_option(<span class="string">&#x27;display.width&#x27;</span>, <span class="number">100</span>) <span class="comment">#数据显示总宽度</span></span><br><span class="line">pd.set_option(<span class="string">&#x27;max_rows&#x27;</span>, <span class="number">100</span>) <span class="comment">#显示最多行数，超出该数以省略号表示</span></span><br><span class="line">pd.set_option(<span class="string">&#x27;max_columns&#x27;</span>, <span class="number">100</span>) <span class="comment">#显示最多列数，超出该数以省略号表示</span></span><br><span class="line">pd.set_option(<span class="string">&#x27;max_colwidth&#x27;</span>, <span class="number">16</span>) <span class="comment">#设置单列的宽度，用字符个数表示，单个数据长度超出该数时以省略号表示</span></span><br><span class="line">pd.set_option(<span class="string">&#x27;large_repr&#x27;</span>, <span class="string">&#x27;truncate&#x27;</span>) <span class="comment">#数据超过设置显示最大行列数时，带省略号显示/若是info则是统计信息显示</span></span><br><span class="line">pd.set_option(<span class="string">&#x27;show_dimensions&#x27;</span>, <span class="literal">True</span>) <span class="comment">#当数据带省略号显示时，是否在最后显示数据的维度</span></span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line"></span><br><span class="line">pd.set_option(<span class="string">&#x27;max_info_columns&#x27;</span>, <span class="number">100</span>) <span class="comment">#当列数超过这个值时，调用df.info()函数时不会统计每列的非空值。</span></span><br><span class="line"><span class="built_in">print</span>(df.info())</span><br></pre></td></tr></table></figure><ul><li>将数据变成小数形式<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"> </span><br><span class="line">inputfile = <span class="string">&#x27;../data/electricity_data.xls&#x27;</span></span><br><span class="line">outputfile = <span class="string">&#x27;./electricity_data_analyze1.xls&#x27;</span></span><br><span class="line"> </span><br><span class="line">data = pd.read_excel(inputfile)</span><br><span class="line">data[<span class="string">u&#x27;线损率&#x27;</span>] = (data[<span class="string">u&#x27;供入电量&#x27;</span>]-data[<span class="string">u&#x27;供出电量&#x27;</span>])/data[<span class="string">u&#x27;供入电量&#x27;</span>]    <span class="comment">#data[u&#x27;线损率&#x27;]的类型为series； data[u&#x27;线损率&#x27;]为小数</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">data[<span class="string">u&#x27;线损率&#x27;</span>] = data[<span class="string">u&#x27;线损率&#x27;</span>].apply(<span class="keyword">lambda</span> x: <span class="built_in">format</span>(x, <span class="string">&#x27;.2%&#x27;</span>))    <span class="comment">#Series.apply()让序列的值依次在lambda函数中执行； data[&#x27;线损率&#x27;]由小数转化为百分数</span></span><br><span class="line"> </span><br><span class="line">data.to_excel(outputfile, index=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">``` --&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## 描述数据</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> 表信息</span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line">df.info()</span><br></pre></td></tr></table></figure></li></ul><ol start="2"><li>显示数据的行列数</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.shape</span><br></pre></td></tr></table></figure><ol start="3"><li>查看数据格式dtpyes</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.dtypes</span><br></pre></td></tr></table></figure><ol start="4"><li>显示列名、元素</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df.columns</span><br><span class="line">df.values</span><br></pre></td></tr></table></figure><ol start="5"><li> 添加默认列名</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如果数据没有标题行，可用pandas添加默认的列名</span></span><br><span class="line">df = pd.read_excel(<span class="string">&#x27;x.xlsx&#x27;</span>, header = <span class="literal">None</span>) </span><br></pre></td></tr></table></figure><ol start="6"><li> 显示前数据前5行</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df.head(<span class="number">5</span>)</span><br><span class="line">df[[<span class="string">&#x27;标题&#x27;</span>, <span class="string">&#x27;客户端uv&#x27;</span>]].head()</span><br></pre></td></tr></table></figure><ol start="7"><li>显示数据后5行</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.tail(<span class="number">5</span>)</span><br></pre></td></tr></table></figure><ol start="8"><li>值</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.values</span><br></pre></td></tr></table></figure><ol start="9"><li>读取a列</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df[<span class="string">&#x27;a&#x27;</span>]</span><br></pre></td></tr></table></figure><ol start="10"><li>找到重复值</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.duplicated()</span><br></pre></td></tr></table></figure><ol start="11"><li> 显示数据唯一值（unique函数）</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 数据有0， 是因对缺失值进行了填充</span></span><br><span class="line">df[<span class="string">&#x27;经纪人级别&#x27;</span>].unique()</span><br></pre></td></tr></table></figure><ol start="12"><li>对第几行数据不读取</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#不读取哪里数据，可用skiprows=[i]，跳过文件的第i行不读取</span></span><br><span class="line">df = pd.read_excel(<span class="string">&#x27;x.xlsx&#x27;</span>,skiprows=[<span class="number">2</span>] ) </span><br></pre></td></tr></table></figure><ol start="13"><li> 对缺失值进行识别</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 所有缺失值显示为True</span></span><br><span class="line">pd.insull(df)  <span class="comment"># df.isnull()</span></span><br></pre></td></tr></table></figure><ol start="14"><li>计算</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#计算此data的数量</span></span><br><span class="line">df[<span class="string">&#x27;data&#x27;</span>].value_counts()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 升序计数</span></span><br><span class="line">df[<span class="string">&#x27;data&#x27;</span>].value_counts(ascending = <span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 升序计数并分组</span></span><br><span class="line">df[<span class="string">&#x27;data&#x27;</span>].value_counts(ascending = <span class="literal">True</span>, bins = <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计数</span></span><br><span class="line">df[<span class="string">&#x27;data&#x27;</span>].count()</span><br></pre></td></tr></table></figure><ol start="15"><li>字符和数值之间的转化</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span>()  <span class="comment"># 转化成整数</span></span><br><span class="line"><span class="built_in">float</span>()  <span class="comment"># 转化成整数</span></span><br><span class="line"><span class="built_in">str</span>()  <span class="comment"># 转化成整数</span></span><br><span class="line"><span class="built_in">type</span>()  <span class="comment"># 转化成整数</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="16"><li> 获取数据分布情况</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data.describe()</span><br></pre></td></tr></table></figure><h2 id="数据清洗"><a href="#数据清洗" class="headerlink" title="数据清洗"></a>数据清洗</h2><ol><li><p>删除空值 （dropna函数）</p><p>  <a href="https://blog.csdn.net/yuanxiang01/article/details/78738812">DataFrame中的空值处理</a></p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">df.dropna(how=<span class="string">&#x27;any&#x27;</span>)</span><br><span class="line"></span><br><span class="line">df.dropna(how = <span class="string">&#x27;all&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">用法：DataFrame.drop(labels=None,axis=0, index=None, columns=None, inplace=False)</span><br><span class="line"></span><br><span class="line">参数说明：</span><br><span class="line">labels 就是要删除的行列的名字，用列表给定</span><br><span class="line">axis 默认为0，指删除行，因此删除columns时要指定axis=1；</span><br><span class="line">index 直接指定要删除的行</span><br><span class="line">columns 直接指定要删除的列</span><br><span class="line">inplace=False，默认该删除操作不改变原数据，而是返回一个执行删除操作后的新dataframe；</span><br><span class="line">inplace=True，则会直接在原数据上进行删除操作，删除后无法返回。</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 删除包含 集团 二字 的行</span><br><span class="line"></span><br><span class="line">read_data = df[- df[&#x27;所属省份名称&#x27;].isin([&#x27;集团&#x27;])] </span><br></pre></td></tr></table></figure><ol start="2"><li>数值删除</li></ol><ul><li>删除列</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除列, axis=1表示删除列</span></span><br><span class="line">df.drop([<span class="string">&quot;销售额&quot;</span>, <span class="string">&quot;ID&quot;</span>], axis = <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">df.drop(columns = [<span class="string">&quot;销售额&quot;</span>, <span class="string">&quot;ID&quot;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 传入列位置</span></span><br><span class="line">df.drop(df.columns[[<span class="number">4</span>,<span class="number">5</span>]], axis =<span class="number">1</span>)</span><br></pre></td></tr></table></figure><ul><li>删除行</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 删除行，筛选行名</span><br><span class="line">df.drop([&#x27;一&#x27;,&#x27;二&#x27;], axis = 0)</span><br><span class="line"></span><br><span class="line">df.drop(index = [&#x27;一&#x27;, &#x27;二&#x27;])</span><br><span class="line"></span><br><span class="line"># 删除行，筛选行索引</span><br><span class="line">df.drop(df.index[[0,1]], axis = 0)</span><br><span class="line"></span><br><span class="line"># 只要年龄小于40的用户</span><br><span class="line"></span><br><span class="line">df[df[&#x27;ID&#x27;] &lt; 40]</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="3"><li> 填充（fillna函数）</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 空值用0填充</span></span><br><span class="line">df.fillna(value=<span class="number">0</span>)</span><br><span class="line">df.replace(np.NaN, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用均值对空值进行填充</span></span><br><span class="line">df[<span class="string">&#x27;时长&#x27;</span>].fillna(df[<span class="string">&#x27;时长&#x27;</span>].mean())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 按照不同列进行填充</span></span><br><span class="line">df.fillna(&#123;<span class="string">&#x27;性别&#x27;</span> : <span class="string">&#x27;男&#x27;</span>&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="4"><li>更改数据格式，更改数据类型</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将数据格式int64,改为float格式</span></span><br><span class="line"></span><br><span class="line">df[<span class="string">&#x27;大区&#x27;</span>].astype(<span class="string">&#x27;float64&#x27;</span>)</span><br></pre></td></tr></table></figure><ol start="5"><li>更改列名称, 修改列名。 </li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">df.columns = [[<span class="string">&#x27;导航&#x27;</span>,<span class="string">&#x27;uv&#x27;</span>, <span class="string">&#x27;pv&#x27;</span>,<span class="string">&#x27;户均点击&#x27;</span>]]</span><br><span class="line"></span><br><span class="line">df.rename(columns=&#123;<span class="string">&#x27;IM渠道&#x27;</span>: <span class="string">&#x27;渠道&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure><ol start="6"><li>添加修改索引</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加索引</span></span><br><span class="line">df.index = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改索引,重新设置</span></span><br><span class="line">df = df.set_index[<span class="string">&#x27;标题&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重命名索引</span></span><br><span class="line">df.rename (index = &#123;<span class="number">1</span>: <span class="string">&#x27;一&#x27;</span>&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li> 重置索引</li></ul><p><img src="https://i.loli.net/2019/12/21/C7cxnGMVfFDeLEX.jpg" alt="图1"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">DataFrame.reset_index(level=<span class="literal">None</span>, drop=<span class="literal">False</span>, inplace=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认将所有index转化成columns</span></span><br><span class="line">df.reset_index()</span><br><span class="line"></span><br><span class="line"><span class="comment">#将第0级索引转化为 columns</span></span><br><span class="line">df.reset_index(level=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将原索引删除，不加入columns</span></span><br><span class="line">df.reset_index(drop = <span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="7"><li><p>删除重复值</p><p> <a href="https://www.cnblogs.com/cocowool/p/8421997.html">Pandas删除数据的几种情况</a></p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 默认第一次出现的保留，其余删除</span></span><br><span class="line">df[<span class="string">&#x27;门店&#x27;</span>].drop_duplicates()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 最后一次出现的保留，其余删除</span></span><br><span class="line">df[<span class="string">&#x27;门店&#x27;</span>].drop_duplicates(keep = <span class="string">&#x27;last&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 多列去重</span></span><br><span class="line">df.drop_duplicates(subset = [<span class="string">&#x27;姓名&#x27;</span>, <span class="string">&#x27;唯一识别码&#x27;</span>])</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="8"><li>对列表内的值进行替换</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 一对一替换</span></span><br><span class="line">df[<span class="string">&#x27;ID&#x27;</span>].replace(<span class="string">&#x27;1053&#x27;</span>, <span class="string">&#x27;110&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 多对一替换</span></span><br><span class="line">df[<span class="string">&#x27;ID&#x27;</span>].replace(&#123;<span class="string">&#x27;1053&#x27;</span>: <span class="string">&#x27;110&#x27;</span>, <span class="string">&#x27;230&#x27;</span>: <span class="string">&#x27;33&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">df.columns.<span class="built_in">str</span>.replace(<span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;_&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="对数据进行处理"><a href="#对数据进行处理" class="headerlink" title="对数据进行处理"></a>对数据进行处理</h2><ol><li>对两个数据进行合并- merge, join, concat函数</li></ol><ul><li>merge</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 按照轴把多个对象拼接起来</span></span><br><span class="line">pd.concat(df1, df2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># join函数适合根据索引进行合并，合并索引相同但列不同的对象</span></span><br><span class="line"><span class="comment"># merge函数，根据一个或多个键连接多行, 相当于excel中的vlookup</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将left和right进行合并</span></span><br><span class="line">pd.merge(left, right)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定以key为键进行合并</span></span><br><span class="line">pd.merge(left, right, on = <span class="string">&#x27;key&#x27;</span>)</span><br><span class="line"> pd.merge(name_3, name_1, left_on = [<span class="string">&#x27;ming&#x27;</span>], right_on = [<span class="string">&#x27;标记&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># key2列不相同的部分会直接舍弃掉</span></span><br><span class="line">pd.merge(left, right, on = [<span class="string">&#x27;key&#x27;</span>, <span class="string">&#x27;key2&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保留key2列不相同的部分</span></span><br><span class="line">pd.merge(left, right, on = [<span class="string">&#x27;key&#x27;</span>, <span class="string">&#x27;key2&#x27;</span>], how = <span class="string">&#x27;outer&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 不相同的部分指定以左表为基准</span></span><br><span class="line">pd.merge(left, right, on = [<span class="string">&#x27;key&#x27;</span>, <span class="string">&#x27;key2&#x27;</span>], how = <span class="string">&#x27;left&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重复列名处理</span></span><br><span class="line"><span class="comment"># pd.merge()会自动给这些重复名添加后缀_x、_y，也可以自己命名。</span></span><br><span class="line">pd.merge(df1,df2, on = <span class="string">&#x27;id&#x27;</span>, suffixes= [<span class="string">&#x27;_L&#x27;</span>, <span class="string">&#x27;_R&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#按照索引进行合并</span></span><br><span class="line">pd.merge(df1,df2,left_index=<span class="literal">True</span>,right_index=<span class="literal">True</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li> concat函数, 按照标题进行拼接</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 普通合并</span></span><br><span class="line">pd.concat([df1, df2])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 索引设置</span></span><br><span class="line">pd.concat([df1, df2], ignore_index= <span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 合并后删除重复值</span></span><br><span class="line">pd.concat([df1, df2], ignore_index = <span class="literal">True</span>).drop_duplicates()</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li>对数据进行排序</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 按照ID进行升序排列</span></span><br><span class="line"><span class="comment"># 按照ID进行降序排列</span></span><br><span class="line">df.sort_values(by = [<span class="string">&#x27;ID&#x27;</span>], ascending = <span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在保证销售额列降序的情况下，对ID列进行升序处理</span></span><br><span class="line">data.sort_values(by = [<span class="string">&#x27;销售额&#x27;</span>, <span class="string">&#x27;ID&#x27;</span>],ascending = [<span class="literal">False</span>, <span class="literal">True</span>], inplace = <span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认将ID是缺失值的列显示在最后面</span></span><br><span class="line">df.sort_values(by = [<span class="string">&#x27;ID&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将ID是缺失值的列显示在最前面</span></span><br><span class="line">df.sort_values(by = [<span class="string">&#x27;ID&#x27;</span>], na_position = <span class="string">&#x27;first&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="3"><li>对数值进行排名</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 对应Excel中的 rank.avg函数</span></span><br><span class="line">df[<span class="string">&#x27;ID&#x27;</span>].rank(method= <span class="string">&#x27;average&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 按值在所有的排列数据中出现的先后顺序排名</span></span><br><span class="line">df[<span class="string">&#x27;ID&#x27;</span>].rank(method = <span class="string">&#x27;first&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#  与Excel中rank.eq 函数的功能一样</span></span><br><span class="line">df[<span class="string">&#x27;ID&#x27;</span>].rank(method = <span class="string">&#x27;min&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 与min相反，取重复值对应的最大排名</span></span><br><span class="line">df[<span class="string">&#x27;ID&#x27;</span>].rank(method = <span class="string">&#x27;max&#x27;</span>)</span><br></pre></td></tr></table></figure><ol start="3"><li>对数据进行分组</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 如果price列的值&gt;3000，group列显示high，否则显示low</span><br><span class="line"></span><br><span class="line">df[&#x27;group&#x27;] = np.where(df[&#x27;客户当天发送消息数&#x27;] &gt; 5,&#x27;high&#x27;,&#x27;low&#x27;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 对符合多个条件进行分组</span><br><span class="line"># 符合经纪人级别为A1且经纪人响应时长&gt;24的在sign列显示为1</span><br><span class="line"></span><br><span class="line">df.loc[(df[&#x27;经纪人级别&#x27;] == &#x27;A1&#x27;) &amp; (df[&#x27;经纪人响应时长&#x27;]&gt;= 24.0), &#x27;sign&#x27;]=1</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="4"><li>对数据进行分列</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">pd.DataFrame((x.split(<span class="string">&#x27;网&#x27;</span>) <span class="keyword">for</span> x <span class="keyword">in</span> df[<span class="string">&#x27;客户注册渠道&#x27;</span>]),</span><br><span class="line">                index=df.index,columns=[<span class="string">&#x27;客户注册渠道&#x27;</span>,<span class="string">&#x27;size&#x27;</span>])</span><br><span class="line"></span><br><span class="line">&lt;!-- df = pd.DataFrame((x.split(<span class="string">&#x27;.&#x27;</span>) <span class="keyword">for</span> x <span class="keyword">in</span> 首页jhrj_1[<span class="string">&#x27;所属省份编码&#x27;</span>]),</span><br><span class="line">                index=df.index,columns=[<span class="string">&#x27;客户注册渠道&#x27;</span>,<span class="string">&#x27;size&#x27;</span>]) --&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 分列完对数据进行合并</span></span><br><span class="line">df1 = pd.merge(首页jhrj_1, df, left_index = <span class="literal">True</span>, right_index = <span class="literal">True</span>)</span><br></pre></td></tr></table></figure><ol start="5"><li>新增一列</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">data = data.assign(ration = [4, 2, 5, 6, 7, 8, 2, 9, 4])</span><br><span class="line"></span><br><span class="line">data[&#x27;rations&#x27;] = [5, 2, 5, 6, 7, 8, 2, 9, 4]</span><br></pre></td></tr></table></figure><ol start="6"><li>对数据进行切分</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 指明切分区间</span><br><span class="line">pd.cut(df[&#x27;年龄&#x27;], bins = [0,3,6,10])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 将数据切成3份</span><br><span class="line">pd.qcut(df[&#x27;年龄&#x27;],3 )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="7"><li>取出的数据， 指定取到小数点几位数？</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 取到小数点后3位</span><br><span class="line">for i in a :</span><br><span class="line">    print(&quot;%.3f&quot;%c)</span><br><span class="line"></span><br><span class="line"># 设置小数点位数，四舍五入</span><br><span class="line">df[&#x27;cnts&#x27;].round( decimals = 2)</span><br></pre></td></tr></table></figure><ol start="8"><li>将 list 格式转化成 DataFrame 格式</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df = pd.DataFrame(data, columns = [&#x27;省份&#x27;, &#x27;按钮名称&#x27;, &#x27;uv&#x27;, &#x27;pv&#x27;] )</span><br></pre></td></tr></table></figure><h2 id="数据选择"><a href="#数据选择" class="headerlink" title="数据选择"></a>数据选择</h2><ol><li>选择某一列/ 某几列</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 普通索引- 根据名称进行选择</span></span><br><span class="line"></span><br><span class="line">df[<span class="string">&#x27;客户端uv&#x27;</span>]</span><br><span class="line"></span><br><span class="line">df[[<span class="string">&#x27;标题&#x27;</span>, <span class="string">&#x27;客户端uv&#x27;</span>]]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 位置索引 / 切片索引， 根据所在第几列进行选择</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># : 表示选择所有的行， 逗号后面表示要选择列的位置区域</span></span><br><span class="line">df.iloc[:, [<span class="number">0</span>,<span class="number">2</span>]] <span class="comment"># 获取第1列和第3列的数值</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li>选择某一行/某几行</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 普通索引-loc</span></span><br><span class="line"></span><br><span class="line">df.loc[<span class="string">&#x27;第一行&#x27;</span>]</span><br><span class="line"></span><br><span class="line">df.log[[<span class="string">&#x27;第一行&#x27;</span>, <span class="string">&#x27;第二行&#x27;</span>]]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 位置索引，切片索引</span></span><br><span class="line"></span><br><span class="line"> <span class="comment"># 选择第一行</span></span><br><span class="line">df.iloc[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 选择第一行和第二行</span></span><br><span class="line">df.iloc[[<span class="number">0</span>,<span class="number">1</span>]] </span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="3"><li>根据指定条件进行筛选</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 选择年龄小于200的数据</span></span><br><span class="line">df[df[<span class="string">&#x27;年龄&#x27;</span>] &lt; <span class="number">200</span>] </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment">#年龄小于200，且id小于300</span></span><br><span class="line">df[(df[<span class="string">&#x27;年龄&#x27;</span>] &lt; <span class="number">200</span>) &amp;   (df[<span class="string">&#x27;id&#x27;</span>] &lt; <span class="number">300</span>)]</span><br><span class="line"></span><br><span class="line">df[np.logical_and(df[<span class="string">&#x27;年龄&#x27;</span>] &gt; <span class="number">10</span>, df[<span class="string">&#x27;id&#x27;</span>] &gt; <span class="number">5</span>)]</span><br><span class="line"></span><br><span class="line"><span class="comment"># A列值大于10，或 B列值大于5</span></span><br><span class="line">df[(df[<span class="string">&#x27;A&#x27;</span>] &gt; <span class="number">10</span>) | (df[<span class="string">&#x27;C&#x27;</span>] &gt;<span class="number">20</span>)]</span><br><span class="line"></span><br><span class="line">df[np.logical_or(df[<span class="string">&#x27;A&#x27;</span>] &gt; <span class="number">10</span>, df[<span class="string">&#x27;C&#x27;</span>] &gt; <span class="number">20</span>)]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 当 A列的值大于13时， 显示B，c列的值</span></span><br><span class="line">df[[<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;C&#x27;</span>]][df[<span class="string">&#x27;A&#x27;</span>]&gt;<span class="number">13</span>]</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="4"><li>行列同时选择</li></ol><ul><li>普通索引+普通索引选择指定的行和列</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.loc[[<span class="string">&#x27;第一行&#x27;</span>, <span class="string">&#x27;第三行&#x27;</span>], [<span class="string">&#x27;订单号’, &#x27;</span>ID<span class="string">&#x27;]]</span></span><br></pre></td></tr></table></figure><ul><li>位置索引 + 位置索引选择指定的行和列</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">df.iloc[[<span class="number">0</span>,<span class="number">1</span>], [<span class="number">0</span>,<span class="number">2</span>]]</span><br><span class="line"></span><br><span class="line">df.iloc[<span class="number">0</span>:<span class="number">2</span>, <span class="number">1</span>:<span class="number">2</span>]</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>布尔索引+ 普通索引</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df[df[<span class="string">&#x27;年龄&#x27;</span>]&lt; <span class="number">200</span>][[<span class="string">&#x27;订单编号&#x27;</span>, <span class="string">&#x27;ID&#x27;</span>]]</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>切片索引+ 普通索引</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.ix[<span class="number">0</span>:<span class="number">2</span>, [<span class="string">&#x27;订单变化&#x27;</span>, <span class="string">&#x27;ID&#x27;</span>]]</span><br></pre></td></tr></table></figure><ol start="5"><li>按条件进行提取</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 用isin函数进行判断</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用isin函数根据特定值筛选记录。筛选A值等于10或者13的记录</span></span><br><span class="line">df[df.A.isin((<span class="number">10</span>, <span class="number">13</span>))]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看这一列是否包含某个值</span></span><br><span class="line">df[<span class="string">&#x27;级别&#x27;</span>].isin([<span class="string">&#x27;A3&#x27;</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment"># 先判断是否包含，然后将符合条件的数据提取出来。</span></span><br><span class="line">df.loc[df[<span class="string">&#x27;级别&#x27;</span>].isin([<span class="string">&#x27;A3&#x27;</span>,<span class="string">&#x27;M4&#x27;</span>])]</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h2 id="数据汇总"><a href="#数据汇总" class="headerlink" title="数据汇总"></a>数据汇总</h2><ol><li>对数据进行分类 - group by函数</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 按照某列分组求和</span></span><br><span class="line">df.groupby(<span class="string">&#x27;渠道&#x27;</span>).<span class="built_in">sum</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 按照多列分组求和</span></span><br><span class="line">df.groupby([<span class="string">&#x27;渠道&#x27;</span>, <span class="string">&#x27;ID&#x27;</span>]).<span class="built_in">sum</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对分组后的结果进行重新索引</span></span><br><span class="line">df.groupby(<span class="string">&#x27;渠道&#x27;</span>).<span class="built_in">sum</span>().reset_index()</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li> aggregate方法</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 对同一列 先做计数汇总运算，再做汇总运算</span></span><br><span class="line"></span><br><span class="line">df.group(<span class="string">&#x27;渠道&#x27;</span>).aggregate([<span class="string">&#x27;count&#x27;</span>, <span class="string">&#x27;sum&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 针对不同的列做不同的汇总运算</span></span><br><span class="line"></span><br><span class="line">df.groupby(<span class="string">&#x27;渠道&#x27;</span>).aggregate(&#123;<span class="string">&#x27;ID&#x27;</span> : <span class="string">&#x27;count&#x27;</span>,</span><br><span class="line">                              <span class="string">&#x27;销量&#x27;</span> : <span class="string">&#x27;sum&#x27;</span>&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="3"><li>pivot_table-数据透视表</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 为方便处理， 一般需要对结果进行重置索引</span></span><br><span class="line">pd.pivot_table(df, values = <span class="string">&#x27;ID&#x27;</span>, columns = <span class="string">&#x27;渠道&#x27;</span>,</span><br><span class="line">                index = <span class="string">&#x27;客户分类&#x27;</span>, aggfun = <span class="string">&#x27;count&#x27;</span>).reset_index()</span><br></pre></td></tr></table></figure><p> pd.pivot_table(data, values, index, columns, aggfunc, fill_value, margins, dropna, margins_name = ‘All’)</p><blockquote><p>data: 数据<br>values: 对应的值<br>index: 对应的行<br>columns: 对应的列<br>aggfunc : 对values的计算类型<br>fill_value : 对空值的填充值<br>margins: 是否显示合计列<br>dropna: 是否删除缺失值，如果为真，则一整行全删除<br>margins_name: 合计列的列名</p></blockquote><ol start="4"><li>对数据进行映射</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 用map函数对字典进行映射， 新加一列</span><br><span class="line">data[&#x27;upper&#x27;] = data[&#x27;group&#x27;].map(dataUpper)</span><br></pre></td></tr></table></figure><ol start="5"><li>数据采样</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 简单随机抽取sample</span><br><span class="line">df.sample(n=3)</span><br><span class="line"></span><br><span class="line"># 设置采样权重</span><br><span class="line"># 需要对每一行进行权重设置，列表行数少可行，过多不可行</span><br><span class="line"></span><br><span class="line"># 假设有4行数据，设置采样权重</span><br><span class="line">weights = [0, 0, 0.5, 0.5]</span><br><span class="line">df.sample(n=4, weights=weights)</span><br><span class="line"></span><br><span class="line">## 确定采样后是否放回</span><br><span class="line"># 采样后放回，True</span><br><span class="line">df.sample(n=6, replace=True)</span><br></pre></td></tr></table></figure><ol start="6"><li>统计计算</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 计算每一列的个数</span></span><br><span class="line">df.count()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算每一行的个数</span></span><br><span class="line">df.count(axis = <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 求和</span></span><br><span class="line">df.<span class="built_in">sum</span>()</span><br><span class="line"></span><br><span class="line">df.<span class="built_in">sum</span>(axis = <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 中位数</span></span><br><span class="line">df.median()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 求和</span></span><br><span class="line">df.<span class="built_in">sum</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 求最大值</span></span><br><span class="line">df.<span class="built_in">max</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 求最小值</span></span><br><span class="line">df.<span class="built_in">min</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 求众数</span></span><br><span class="line">df.mode()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 求方差</span></span><br><span class="line">df.var()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 求标准差</span></span><br><span class="line">df.std()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 求分位数</span></span><br><span class="line">df.quantile(<span class="number">0.75</span>, axis = <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 描述统计 describe函数</span></span><br><span class="line"><span class="comment">#自动生成数据的数量，均值，标准差等数据</span></span><br><span class="line"><span class="comment">#round（2）,显示小数点后面2位数，T转置</span></span><br><span class="line"></span><br><span class="line">df.describe().<span class="built_in">round</span>(<span class="number">2</span>).T</span><br><span class="line"></span><br><span class="line"><span class="comment"># 标准差std()</span></span><br><span class="line">df[<span class="string">&#x27;经纪人响应时长&#x27;</span>].std()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 协方差cov</span></span><br><span class="line">df[<span class="string">&#x27;经纪人当天发送消息数&#x27;</span>].cov(df[<span class="string">&#x27;客户当天发送消息数&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 相关性分析corr</span></span><br><span class="line">df[<span class="string">&#x27;客户当天发送消息数&#x27;</span>].corr(df[<span class="string">&#x27;经纪人当天发送消息数&#x27;</span>])</span><br></pre></td></tr></table></figure><ol start="7"><li>数值计数</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看不同值出现的次数， #默认进行排列</span></span><br><span class="line">df[<span class="string">&#x27;ID&#x27;</span>].value_counts()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看不同值出现的占比, #默认进行排列</span></span><br><span class="line">df[<span class="string">&#x27;ID&#x27;</span>].value_counts(normalize = <span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看不同值出现的占比， 不进行排列</span></span><br><span class="line"></span><br><span class="line">df[<span class="string">&#x27;ID&#x27;</span>].value_counts(normalize = <span class="literal">True</span>, sort = <span class="literal">False</span>)</span><br></pre></td></tr></table></figure><ol start="8"><li>插入数据</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在 insert方法中，指明要插入的位置、插入新列的列名，以及要插入的数据</span></span><br><span class="line">df.insert(<span class="number">2</span>, <span class="string">&#x27;销售品id&#x27;</span>, [<span class="string">&#x27;01&#x27;</span>, <span class="string">&#x27;02&#x27;</span>])</span><br></pre></td></tr></table></figure><ol start="9"><li>对数据进行转置</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.T</span><br></pre></td></tr></table></figure><ol start="10"><li>索引重塑</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将表格型数据转化成树形数据</span></span><br><span class="line">df.stack()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将树形数据转化成表格型数据</span></span><br><span class="line">df.stack().unstack()</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/12/22/8dJwIqrSRTLYvnK.jpg" alt="索引重塑"></p><ol start="11"><li>长宽表转换</li></ol><ul><li>宽表<br><img src="https://i.loli.net/2019/12/22/plz94hj3vIuHA2B.jpg" alt="宽表"></li><li>长表<br><img src="https://i.loli.net/2019/12/22/6XKpcg2RMoTaPmW.jpg" alt="长表"></li></ul><ul><li>将长表转化成宽表,对数据进行透视, 相当于Excel中的数据透视表功能。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df.pivot_table(index = [<span class="string">&#x27;computer&#x27;</span>,<span class="string">&#x27;name&#x27;</span>], columns = <span class="string">&#x27;year&#x27;</span>, values = <span class="string">&#x27;sale&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>将宽表转换成长表</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 方法1： melt()</span></span><br><span class="line">df.melt(id_vars = [<span class="string">&#x27;company&#x27;</span>, <span class="string">&#x27;name&#x27;</span>], var_name = <span class="string">&#x27;year&#x27;</span>, value_name = <span class="string">&#x27;sale&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 方法1： stack()</span></span><br><span class="line"><span class="comment"># 在保持行索引不变的前提下，将列索引转化成行索引 </span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/12/22/4pKoUMivFNIqzXu.jpg" alt="宽表转换成长表"></p><hr><h2 id="对字符串进行操作"><a href="#对字符串进行操作" class="headerlink" title="对字符串进行操作"></a>对字符串进行操作</h2><ol><li> 大小写</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a.lower()</span><br><span class="line">a.upper()</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li>长度</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 长度</span><br><span class="line">a.len()</span><br></pre></td></tr></table></figure><ol start="3"><li> 去除空格</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a.strip()</span><br><span class="line">a.lstrip()</span><br><span class="line">alrstrip()</span><br></pre></td></tr></table></figure><ol start="5"><li>切分与分列、 合并</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#切分</span></span><br><span class="line">a.split(<span class="string">&#x27;_&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切分， 且成为新列</span></span><br><span class="line">a.split(<span class="string">&#x27;_&#x27;</span>, expand = <span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对切分进行限制, 只切1次</span></span><br><span class="line">a.split(<span class="string">&#x27;_&#x27;</span>, expand = <span class="literal">True</span>, n=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看是否包含</span></span><br><span class="line">a.<span class="built_in">str</span>.contains(<span class="string">&#x27;A&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 分列</span></span><br><span class="line">s.<span class="built_in">str</span>.get_dummies(sep= <span class="string">&#x27;|&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">df = 首页jhrj_1[<span class="string">&#x27;所属省份编码&#x27;</span>].<span class="built_in">str</span>.split(<span class="string">&#x27;.&#x27;</span>)  <span class="comment"># expand=True  可以把用分割的内容直接分列</span></span><br><span class="line">首页jhrj_1[<span class="string">&quot;所属省份编码1&quot;</span>]=df[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 切分并在原表中进行合并</span></span><br><span class="line">首页jhrj_2 = pd.merge(首页jhrj_1, pd.DataFrame(首页jhrj_1[<span class="string">&#x27;所属省份编码&#x27;</span>].<span class="built_in">str</span>.split(<span class="string">&#x27;.&#x27;</span>, expand = <span class="literal">True</span>) ),</span><br><span class="line">               how = <span class="string">&#x27;left&#x27;</span>, left_index = <span class="literal">True</span>, right_index = <span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># pandas对dataframe中的某一列使用split做字符串切割：</span></span><br><span class="line"><span class="comment"># words = df[&#x27;col&#x27;].split()</span></span><br><span class="line"><span class="comment"># 报错：</span></span><br><span class="line"><span class="comment"># AttributeError: &#x27;Series&#x27; object has no attribute &#x27;split&#x27;</span></span><br><span class="line"><span class="comment"># 原因是df[&#x27;col&#x27;]返回的是一个Series对象，需要先把Series对象转换为字符串：pandas.Series.str.split</span></span><br><span class="line"><span class="comment"># words = df[&#x27;col&#x27;].str.split()</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">对两列数据进行合并</span><br><span class="line">df[<span class="string">&#x27;省份_名称&#x27;</span>] = df[<span class="string">&#x27;省份&#x27;</span>].<span class="built_in">str</span>.cat(df[<span class="string">&#x27;名称&#x27;</span>],sep = <span class="string">&#x27;_&#x27;</span>)</span><br><span class="line">首页jdt_1[<span class="string">&#x27;省份_标题&#x27;</span>] = 首页jdt_1[<span class="string">&#x27;所属省份编码&#x27;</span>].astype(<span class="built_in">str</span>).<span class="built_in">str</span>.cat(首页jdt_1[<span class="string">&#x27;标题&#x27;</span>],sep = <span class="string">&#x27;_&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="日期-时间"><a href="#日期-时间" class="headerlink" title="日期-时间"></a>日期-时间</h2><ul><li> 当前日期</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime, time, timedelta</span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回当前日期和时间</span></span><br><span class="line">datetime.now()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回当前时间的年</span></span><br><span class="line">datetime.now().year</span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回当前时间的月份</span></span><br><span class="line">datetime.now().month</span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回当前日期的日期</span></span><br><span class="line">datetime.now().day</span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回当前时刻在周几</span></span><br><span class="line"><span class="comment"># python周几默认是从0开始的</span></span><br><span class="line">datatime.now.weekeday() + <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回当前时间所在周的周数</span></span><br><span class="line">datatime.now.isocalendar()[<span class="number">1</span>]</span><br></pre></td></tr></table></figure><ul><li>返回指定日期</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 只展现日期</span></span><br><span class="line">datetime.now.date()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 只展示时间</span></span><br><span class="line">datetime.now.time()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示当前日期</span></span><br><span class="line">datetime.now().strftime(<span class="string">&#x27;%Y-%m-%d&#x27;</span>)</span><br><span class="line"><span class="comment">#2018-12-22</span></span><br><span class="line"></span><br><span class="line">datetime.now.strftime(<span class="string">&#x27;%Y-%m-%d %H:%M:%S&quot;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 将时间格式转化成字符串格式</span></span><br><span class="line"><span class="string">now=str( datetime.now())</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 将字符串格式转化为时间格式</span></span><br><span class="line"><span class="string">parse(str_now)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string"># 往后推一天</span></span><br><span class="line"><span class="string">date+ Day(1)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 往后推一个小时</span></span><br><span class="line"><span class="string">date + Hour(1)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 往前推一天</span></span><br><span class="line"><span class="string">date - Day(1)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 昨天</span></span><br><span class="line"><span class="string">ysd = now - timedelta(days = 1)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#本月第一天</span></span><br><span class="line"><span class="string">ysd = now.replace(day = now.day-1)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#  上月最后一天</span></span><br><span class="line"><span class="string">lastmonth_end = now.replace(day = now.day-1) - timedelta(days=1)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 上月第一天</span></span><br><span class="line"><span class="string">lastmonth_first = now.replace(month = now.month-1, day =1)</span></span><br><span class="line"><span class="string">lastmonth_first = lastmonth_end.replace(day=1)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#提取2016年11月2号的数据</span></span><br><span class="line"><span class="string">df[&#x27;</span><span class="number">2016</span>-<span class="number">11</span>-02<span class="string">&#x27; : &#x27;</span><span class="number">2016</span>-<span class="number">11</span>-02<span class="string">&#x27;]</span></span><br><span class="line"><span class="string">dt_time = dt.datetime(year = 2018, month=9, day = 17, hour = 22, minute = 43)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 构造时间序列， 构造十个日期， 每12分钟一次</span></span><br><span class="line"><span class="string">pd.Series(pd.date_range(start = &#x27;</span><span class="number">2018</span>-09-<span class="number">17</span> <span class="number">22</span>:<span class="number">43</span>:<span class="number">00</span><span class="string">&#x27;, periods = 10, freq = &#x27;</span>12<span class="built_in">min</span><span class="string">&#x27;))</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 取所有8点到12点之间的数据, 不包含8点和12点</span></span><br><span class="line"><span class="string">data[(data.index.hour &gt; 8) &amp; (data.index.hour &lt; 12)]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 包含8点到12点</span></span><br><span class="line"><span class="string">data.between_time(&#x27;</span>08:<span class="number">00</span><span class="string">&#x27;, &#x27;</span><span class="number">12</span>:<span class="number">00</span><span class="string">&#x27;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">import datetime</span></span><br><span class="line"><span class="string">from dateutil.relativedelta import relativedelta </span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">begin = datetime.date(2019,1,1)</span></span><br><span class="line"><span class="string">end = datetime.date(2019,1,31)</span></span><br><span class="line"><span class="string">for i in range(1,10):</span></span><br><span class="line"><span class="string">    first = d + relativedelta(months=i)</span></span><br><span class="line"><span class="string">    last = end + relativedelta(months=i)</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure><ul><li>处理月与月之间时间不连续问题</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time </span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime, time,timedelta</span><br><span class="line"><span class="comment"># 指定昨天</span></span><br><span class="line">df = datetime.now() - timedelta(days = <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 月初第一天</span></span><br><span class="line">startdates = (df.replace(day = <span class="number">1</span>)).strftime(<span class="string">&#x27;%Y-%m-%d&#x27;</span>)</span><br><span class="line"><span class="comment"># 昨天</span></span><br><span class="line">enddates = (df - timedelta(days = num)).strftime(<span class="string">&#x27;%Y-%m-%d&#x27;</span>)</span><br><span class="line"><span class="comment"># 上月第一天</span></span><br><span class="line">last_moth_f = df.replace(month =df.month-<span class="number">1</span>, day=<span class="number">1</span>).__format__(<span class="string">&quot;%Y-%m-%d&quot;</span>)</span><br><span class="line"><span class="comment"># 上月最后一天</span></span><br><span class="line">last_moth_e = df.replace(month = df.month-<span class="number">1</span>, day =<span class="number">1</span>).strftime(<span class="string">&#x27;%Y-%m-31&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 目标值月份</span></span><br><span class="line">mubiao_dates = startdates[<span class="number">0</span>:<span class="number">7</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将字符串转换为日期</span></span><br><span class="line">df = datetime.now() - timedelta(days = <span class="number">1</span>)</span><br><span class="line">day1 = (df.replace(day = <span class="number">1</span>)).strftime(<span class="string">&#x27;2019-11-%d&#x27;</span>)</span><br><span class="line">first = datetime.strptime(day1, <span class="string">&quot;%Y-%m-%d&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><!-- --------# 自动发送邮件<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import smtplib</span><br><span class="line">from email import encoders</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/12/23/uqFn819yGEjWRPQ.jpg" alt="123.jpg"><br><img src="https://i.loli.net/2019/12/23/Druqb2zyHi6ESQV.jpg" alt="456.jpg"> –&gt;</p>-->]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据异常分析方法</title>
      <link href="/2019/08/03/%E6%96%B9%E6%B3%95-%E6%95%B0%E6%8D%AE%E5%BC%82%E5%B8%B8%E5%88%86%E6%9E%90/"/>
      <url>/2019/08/03/%E6%96%B9%E6%B3%95-%E6%95%B0%E6%8D%AE%E5%BC%82%E5%B8%B8%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h1 id="如何针对异常数据进行分析"><a href="#如何针对异常数据进行分析" class="headerlink" title="如何针对异常数据进行分析"></a>如何针对异常数据进行分析</h1><p>作为一名数据分析师， 在工作中我们经常要对异常数据进行原因分析， 那么异常排查的方法都有哪些， 今天我们就来谈一谈。 </p><p>首先，在进行分析前，我们需要做到以下几点：</p><ol><li><p><strong>对此数据的业务理解是否准确。</strong> 比如：APP的日活是如何定义的， 是用户只要启动APP，还是用户必须在APP中有点击行为。</p></li><li><p><strong>数据的指标口径是否统一。</strong>  比如：某活动页面的 uv，是通过统计用户的手机号，还是统计用户 tracking_id 。不同的统计口径会导致数据出现差异。</p></li><li><p><strong>数据的产出过程是否明确。</strong> 比如：数据是如何从日志中进行清洗，是否会存在多发或漏发数据情况。</p></li><li><p><strong>寻找相关运营或产品人员进行沟通。</strong>询问运营人员关于此数据异常的见解，往往能够提高我们的分析效率。</p></li></ol><p>接下来就是对异常原因的排查，常见的影响因素和方法有：</p><ol><li><p><strong>外部因素</strong>：时间因素、节假日活动、热点事件、政策影响等。</p></li><li><p><strong>内部因素</strong>： 部门运营活动、产品功能上线、大盘整体趋势、页面性能、SQL逻辑错误、数据指标口径调整等。</p></li><li><p><strong>多维度拆解法。</strong>从各个维度进行细分拆解，定位问题。比如：某产品活跃用户下降，那我们可以把活跃用户拆分成新用户、老用户、回流用户，然后针对不同的用户再进行细拆分析。</p></li></ol><p>在查找出异常原因之后，我们还需要做到以下两点：</p><ol><li><p><strong>持续跟踪后续数据是否再次异常。</strong>在排查出原因并采取相应措施之后，我们需要持续跟踪数据，如果数据再次异常，那么说明给出的异常原因可能是错误的。</p></li><li><p><strong>对异常原因进行梳理，文档化。</strong></p><blockquote><ol><li><strong>问题描述</strong>：什么时间、什么指标异常、异常幅度</li><li><strong>主要结论</strong>：异常因素有哪些，各自的影响程度如何</li><li><strong>后续跟进</strong>：后续的解决方案是什么，解决时间，再次验证是否异常。</li><li><strong>具体分析过程</strong>：分析过程与详细分析数据</li></ol></blockquote></li></ol><p>以上就是自己总结的数据异常原因分析，你还有哪些好用的分析方法，欢迎留言交流。</p><p>参考资料：</p><p><a href="https://mp.weixin.qq.com/s/xO2lrEXr-lCkD6ZhQluCNQ">数据异常求生指南</a><br><a href="https://mp.weixin.qq.com/s/SW0y1zOOMdJ01REk2hprvQ">数据分析之数据异常分析</a><br><a href="https://mp.weixin.qq.com/s/_WhFj4u9ptZa22jk2WLxDQ">日思619.数据异常了，如何分析？</a></p><hr><h1 id="工作中存在的分析问题"><a href="#工作中存在的分析问题" class="headerlink" title="工作中存在的分析问题"></a>工作中存在的分析问题</h1><p>本周 话费账单组kpi考核同比突降67万， 领导让我分析数据异常的原因。 </p><p>在分析的过程中，自己主要犯了三个错误：</p><ol><li><p>自己一开始就对所有统计的按钮进行细拆， 而没有分功能模块进行细拆， 导致自己一开始只是看到 话费余额页面 和月账单页面下降， 而没有找到电子发票页面下降。 如果自己在细拆的对比中细心的话，自己也是可以找到的， 但是自己没有耐心做对比。 如果自己按照功能模块进行细拆对比， 就不会出现这样的情况。 </p></li><li><p>自己从一开始就没有搭建出一个整体的分析体系， 导致自己分析时，一会跑这个数据， 一会跑那个数据，从而使自己得出的结论没有说服力。<br>比如： 一开始，自己就跑话费余额数据， 但是跑着跑着发现口径有问题， 自己之前得出的结论竟然是错误的， 自己是先有了结论， 然后自己再找数据的， 这样会让自己再推翻自己的结论， 重新跑数据，特别的浪费时间。</p></li><li><p>数据的准确性不能保证， 自己跑的数据， 存在着比较明显的不合理之处， 口径不够明确， 给别人解释口径时不能够解释清楚。 </p></li></ol><hr><h1 id="如何分析业务数据"><a href="#如何分析业务数据" class="headerlink" title="如何分析业务数据"></a>如何分析业务数据</h1><p>问题陈述、产生假设、收集数据、分析数据、获取结论、采取行动</p><ol><li>评估和定位问题</li></ol><p>在深入研究任何类型的数据之前，应该快速找到你需要解决的真正问题，并用最简单的话定义它</p><p>如果无法用简单的语言解释你要解决的业务问题，那么任何数据分析都无法解决问题。</p><ol start="2"><li> 快速评估和定位问题的三问：</li></ol><ul><li><p>这是否是系统异常导致的问题？</p><blockquote><p>下载量下跌，但激活量没有，也许是下载数据没有埋点或埋点错误？</p></blockquote></li><li><p>这是更大问题的预兆吗？</p><blockquote><p>注册号码的下降是网站故障的指示吗？</p></blockquote></li><li><p>你在看一个重要的度量指标吗？</p><blockquote><p>如果网站的转化率下降，但原始注册量没有下降， 那么就从一个紧急事件变成了一个谜团待揭开</p></blockquote></li></ul><ol start="3"><li> 确定潜在原因</li></ol><ul><li><p>经验检索，快速寻找原因<br>根据经验，寻找任何明显的可能原因或问题的答案, 当你检查显示问题的来源或报告后，是否有任何异常原因立即浮现在脑海中？</p><blockquote><p>例如，你的电子商务网站的ssl认证可能过期，导致浏览器弹窗窗口警告数据不安全，从而显著降低购物车转化率</p></blockquote></li><li><p>询问相关人员原因<br>这个问题会影响和涉及其他团队吗？如果是这样，他们是否对可能的原因有任何了解？即使问题与其他团队之间没有明显的联系，也有必要咨询一下。</p><blockquote><p>营销经理可能会问客户支持： 我注意到注册数据下降了，你能否想一想过去几周你发现过什么相关的变化吗？</p></blockquote></li><li><p>创建假设<br>一个假设知识一个尚未得到证实的有根据的猜测。 在分析数据之前，清楚地说明问题的几个可能原因非常重要，这有助于防止常见的数据分析误区。</p></li></ul><blockquote><p>导致注册量突然下降的假设：</p><ul><li>某些地区的公众假期</li><li>最近对营销网站的更改</li><li>星期一网站中断导致注册过程中出现错误</li><li>转换率下降减少了注册量</li><li>产品页面在某搜索排名下降到搜索结果的第二页</li></ul></blockquote><p>技术思维的方法——科学假设需具备的条件：</p><ul><li>涉及一个自变量和一个因变量</li><li>它是可测试的</li><li>它是可证伪的</li></ul><blockquote><p>有时查看数据可能会产生一个新的假设，需要再次测试。最终，我们的假设会在下一步通过数据分析得到证实或反驳。</p></blockquote><ol start="4"><li> 分析数据</li></ol><ul><li><p> 分割并确定相关数据指标<br>根据你的假设，你需要查看哪些数据？哪些指标可以帮助你证明或者反驳假设？</p><blockquote><p>你可以按国家/地区， 渠道和网络会话持续时间细分注册次数，以测试你的假设</p></blockquote></li><li><p> 注意你的数据<br>基于你已知的业务指标，你可以判断数据是否出现异常？如果无基准线，请用历史数据作为起点。</p><blockquote><p>app注册量同比下降20%</p></blockquote></li><li><p>评估异常或趋势的影响<br>经过前两个步骤，你要查看发现的趋势/异常是否足以解释问题</p></li></ul><blockquote><p>在寻找数据中的异常或趋势时，要注意这些异常或趋势不仅要具有统计意义，也要具有实际意义。我们需要弄清楚是什么会对我们发现的问题产生实际影响。</p></blockquote><p>统计显著性检验用于确定你注意到的异常是由于抽样误差还是适用于所有对象。 </p><hr><p>在上篇我们说到了如何对数据异常进行分析，这次我们来一道具体的数据分析面试问题。</p><p>以下是一家公司APP一周每天的活跃率，如何你是分析师：</p><ol><li>从数据中你看到了什么问题？你觉得背后的原因是什么？</li><li>如果你的老板要求你提一个运营运营改进计划，你会怎么做？</li></ol><p>分析答案：</p><ol><li><p>数据质量<br>数据采集， 数据接口， 数据存储</p></li><li><p>产品质量<br>版本更新， 版本BUG</p></li><li><p>渠道质量<br>渠道买量造假</p></li><li><p>活动质量<br>是否有重大活动</p></li><li><p>政策问题 –&gt;</p></li></ol><hr><h1 id="数据异常排查"><a href="#数据异常排查" class="headerlink" title="数据异常排查"></a>数据异常排查</h1><p>清楚以下三点：</p><ol><li>业务理解</li><li>指标口径</li><li>当前数据产出过程</li></ol><p>数据异常原因分析：</p><ol><li>数据有问题</li></ol><ul><li>将时间轴拉长，看数据是近期异常还是历史异常，对比近三个月数据。</li><li>查看和该指标关联的其他核心指标是否也异常，如果异常，也要一并查看。</li><li>核查埋点是否有问题， 数据是否存在多发情况。</li><li>业务口径是否有问题， 取的数据是不是真正需要的数据。</li><li>写的sql逻辑是否有误， 或者android 和 ios 数据没有相加。 </li></ul><ol start="2"><li>业务发生了变化</li></ol><ul><li>同口径下，同比环比数据是否异常， 在长时间轴的条件下进行对比</li><li>进行细拆， 看到底是哪个指标的数据出现了异常， 将该指标和相关的指标一起进行对比</li><li>与负责此指标的负责人进行沟通， 询问他们近期是否做了推广活动。</li><li>产品最近是否发布了新版本，或者某个功能改版存在缺陷问题。 </li></ul><ol start="3"><li>其他因素影响</li></ol><ul><li>假期效应： 开学季， 暑期， 四大节日，当地节日</li><li>热点事件：常规热点如运动会，世界杯，其他热点事件</li><li>活动影响： 双11， 618， 支付宝送红包</li><li>政策影响： 金融监管</li><li>底层系统故障： 服务器迁移导致数据丢失</li><li>存在外部刷量作弊情况</li><li>统计口径： 业务逻辑进行了更改， 之前某业务有统计， 但现在不统计了。  数据计算方式改变</li></ul><p>要对异常排查进行闭环</p><ol><li>持续跟踪后期数据是否再次异常<br>比如7.0版本数据存在多发现象， 但7.1版本开发说已更改， 当7.1版本发布之后， 要及时去查看数据是否再次异常。 </li><li>对数据异常一定要记录， 对异常口径要留文档。</li><li>邮件化， 当数据异常排查原因查明， 并且确认更改之后， 发邮件给相关方， 描述数据异常的影响范围和主要结论。 </li></ol><p>作为一名数据分析师， 一定要经常去看这三种报表，培养自己的数据敏感度，了解业务的各种核心指标。</p><hr>]]></content>
      
      
      <categories>
          
          <category> 数据分析方法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据分析 </tag>
            
            <tag> 异常分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用环境来辅助自己进步</title>
      <link href="/2019/08/02/2020-03-22-%E7%94%9F%E6%B4%BB-%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93-%E5%88%A9%E7%94%A8%E7%8E%AF%E5%A2%83%E6%9D%A5%E8%BE%85%E5%8A%A9%E8%87%AA%E5%B7%B1%E7%9A%84%E8%BF%9B%E6%AD%A5/"/>
      <url>/2019/08/02/2020-03-22-%E7%94%9F%E6%B4%BB-%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93-%E5%88%A9%E7%94%A8%E7%8E%AF%E5%A2%83%E6%9D%A5%E8%BE%85%E5%8A%A9%E8%87%AA%E5%B7%B1%E7%9A%84%E8%BF%9B%E6%AD%A5/</url>
      
        <content type="html"><![CDATA[<p>自己下班或者周末在房间，总是把大量的时间用来刷微博或者刷剧。虽然一直刷一直爽，但自己总是有一种虚度时间的空虚感，如何改变自己下班和周末的状态，成了自己最近在思考的问题。 </p><p>最近在学习陈海贤的《自我发展心理学》，刚好说到了自己的这种现象，并给出了一种利用环境来促使改变的方法，对自己启发很大，今天就来介绍一下这种方法。</p><p>首先是融入到积极的环境中去。要想学习就去图书馆、自习室，要想锻炼就去体育场、健身房。我们心中其实都有一个关于“特定空间”的假设，在假设中，对于公司、图书馆这样的空间就是用来工作学习，对于自己寝室的假设肯定是用来休息娱乐的。如果你要让自己在宿舍这样的空间中好好学习工作，就得付出比在图书馆多几倍的努力才行，还不一定能学进去。所以，周末能去图书馆上自习就绝不在家办公， 让自己融入到特定的环境中去。</p><p>当然，如果要学习就要去图书馆，那也不现实。如何在自己的房间中也能被环境所带动呢，文中介绍了第二种方法，那就是在某个特定的环境中只做一件事情。</p><p>比如：你可以要求自己在这张书桌上只作跟工作学习有关的事情， 如果想刷微博，看电视，那就换个地方，可以坐沙发上。</p><p>背后其实也是利用了我们心中对“特定空间”的假设，如果你在这个书桌上进行娱乐活动，那么这个书桌作为你心中假设的环境就会破坏掉。平常在一个特定的空间里只做这一件事情， 慢慢这个习惯会形成稳定的心理预期，会给自己一种强烈的心理暗示，从而帮助自己进行改变。</p><p>这促使了我对之前行为的理解，当自己上完班回家之后，本身意志力就消磨的七七八八了，再要用所剩无几的意志力抵抗娱乐去学习，自己的大脑肯定不干。周末在房子里大脑肯定也是怎么舒服怎么来。</p><p>我自己针对性的采取了以下几种方法：</p><ol><li><p>最近下班回家之后，先休息一个小时左右，恢复一下意志力，再起来学习工作，感觉效率到提升了不少。</p></li><li><p>指定特定的桌子只用来办公和学习， 如果自己想刷微博或者刷剧， 不要在这张桌子上进行。 （还在努力实践中）</p></li><li><p>周末能去石景山图书馆就尽量不要在房子呆着。</p></li></ol><p>以上就是自己最近关于如何促进改变的一些小方法，你还有哪些好用的方法，欢迎留言交流。 </p>]]></content>
      
      
      <categories>
          
          <category> 个人系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 心理 </tag>
            
            <tag> 方法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何用数据说话</title>
      <link href="/2019/07/29/%E6%96%B9%E6%B3%95-%E5%A6%82%E4%BD%95%E7%94%A8%E6%95%B0%E6%8D%AE%E8%AF%B4%E8%AF%9D/"/>
      <url>/2019/07/29/%E6%96%B9%E6%B3%95-%E5%A6%82%E4%BD%95%E7%94%A8%E6%95%B0%E6%8D%AE%E8%AF%B4%E8%AF%9D/</url>
      
        <content type="html"><![CDATA[<h1 id="如何用数据说话"><a href="#如何用数据说话" class="headerlink" title="如何用数据说话"></a>如何用数据说话</h1><p>背景-冲突-疑问-回答</p><p>作为一名数据分析师， 经常要写很多的运营分析报告， 但我发现自己写完的分析报告交给领导看， 总是被领导指正说报告的说服力不够。<br>经过这一段时间的磨练， 我也思考了如何才能增加报告的说服力。</p><p>一份运营分析报告， 看似简单，描述自己通过数据观察到的现象， 暴露公司运营中存在的问题， 但你揭露公司的问题， 同时也对相应的运营人员的结果的拷问， 人家肯定会质疑你报告的准确性， 如何才能让别人心服口服呢， 在最近的工作中，我总结出以下三点：</p><ol><li><strong>要用数据说话。</strong> 能用数据说明的，绝对不要用莫能两可的语言。 比如：本周活跃用户数比上周好。 这样的语言让人感觉很空洞， 就不如写成本周活跃用户较上周增长了20万用户， 增长表现良好。 要给出一个结论， 一定要有数据的支撑才行。 </li></ol><ol start="2"><li><p><strong>对复杂的数据口径进行说明。</strong> 不要以为运营人员能够能够很容易理解你的统计指标与口径， 要把他们当小白一样去对待才行。比如留存率是如何计算的， 有时你不必特意的去强调， 但是必要的标注还是得有。免得运营人员多次询问。</p></li><li><p><strong>对数据进行多维比较，佐证结论。</strong> 有时你通过一个维度的数据比较很难将问题说明清楚，需要多维比较。 比如， 本周用户环比上周下降了20%， 那么这能说明本周比上周运营的差吗， 会不会存在月初月末周期的影响。如果要排除这些因素的话， 其实还需要求上月同时间段的环比数据。 如果上月同时间段用户比上周只下降了5%， 那证明可能不是时间的原因。 </p></li><li><p><strong>对于别人给出的原因你也需要数据验证。</strong> 有时我们发现某个数据下降，然后去问运营的负责人情况， 在他说完情况之后， 我们应该再根据他的情况进行数据验证， 而不是轻信别人，直接将这个原因写到报告中去。 </p></li><li><p><strong>报告要有结论和建议。</strong> 一份分析报告中， 最难的部分就是分析的结论和建议， 很多时候，我们只是简单的描述统计，而要做到逻辑和建议， 其实是一件很难的事情。 </p></li><li><p><strong>报告的内容和布局要有逻辑性。</strong> 首先，对于分析的内容， 要保证逻辑正确，避免给出引导运营错误的结论。 比如：一个用户的行为路径分析， 必须保证一个路径下转化率必须是同一个口径。 而不能与第二个目的进行对比。避免引导运营错误。 其次，报告的整体排版必须遵循一定的逻辑， 不能说用户行为，突然就跳到用户充值了。</p></li></ol><p>最后， 把自己写好的分析报告给领导看下， 有时他们的建议能够弥补我们在思维视角上的缺陷， 更快的提高我们的分析撰写能力。 </p><p>当然， 以上步骤只是我工作中的一点总结，仅供参考。每个公司，每个团队不一样， 要求的分析报告的侧重点不一样，但我们撰写分析报告的目的都是一样的：希望能够指出部门运营中的不足，说服运营人员进行迭代改进。 </p><p>你还有哪些能够增加分析报告说服力的技巧， 欢迎一起分享交流。 </p><hr>]]></content>
      
      
      <categories>
          
          <category> 数据分析方法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据分析 </tag>
            
            <tag> 报告 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>改版分析</title>
      <link href="/2019/06/22/%E6%96%B9%E6%B3%95-%E6%94%B9%E7%89%88%E5%88%86%E6%9E%90/"/>
      <url>/2019/06/22/%E6%96%B9%E6%B3%95-%E6%94%B9%E7%89%88%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h1 id="频道改版分析"><a href="#频道改版分析" class="headerlink" title="频道改版分析"></a>频道改版分析</h1><h2 id="1-分析目的"><a href="#1-分析目的" class="headerlink" title="1.分析目的"></a>1.分析目的</h2><p>  新频道的效果怎么样？</p><h2 id="2-分析方向"><a href="#2-分析方向" class="headerlink" title="2.分析方向"></a>2.分析方向</h2><ol><li><p>新频道整体改版效果分析。</p></li><li><p>新频道各部分细拆分析<br>新频道各主要区域细拆，看各区域数据是上升还是下降。</p></li><li><p>新频道重点问题分析<br>主要功能点流量入口修改后，流量如何分布。</p></li></ol><h2 id="3-分析思路"><a href="#3-分析思路" class="headerlink" title="3. 分析思路"></a>3. 分析思路</h2><h3 id="3-1-新版本整体改版效果分析"><a href="#3-1-新版本整体改版效果分析" class="headerlink" title="3.1 新版本整体改版效果分析"></a>3.1 新版本整体改版效果分析</h3><ol><li>改版后，新频道是否受欢迎。<br>衡量参数：</li></ol><ul><li>页面访问uv占比大盘</li><li>日均访问uv点击转化率</li><li>日均点击uv占比大盘</li><li>日均点击uv人均点击次数</li><li>次1日留存</li><li>次3日留存</li><li>次7日留存</li></ul><p> 说明:</p><ul><li><p><strong>频道访问uv占比大盘</strong>，数据提升，说明频道改版后，用户更喜欢访问此频道。（用户访问此频道后，并不一定会在频道内产生点击）</p></li><li><p><strong>转化宽度： 日均访问uv点击转化率</strong> = 频道内点击uv / 频道内访问uv，点击转化率提升，说明用户查看此频道后，频道内功能点改版后对访问此频道的用户更有吸引力。</p></li><li><p><strong>日均点击uv占比大盘</strong>，数据提升，说明改版后吸引了更多的用户来进行点击。</p></li><li><p><strong>转化深度：日均点击uv人均点击次数</strong>，数据提升，说明改版后，用户的点击频率也有所增加。</p></li><li><p><strong>用户粘度：频道访问留存率提升</strong>， 说明改版后，此频道的用户粘性也在增加。</p></li></ul><ol start="2"><li>改版后，频道留存率上升原因分析<br>主要为说明是某功能点使频道整体留存率上升。</li></ol><p> 公式：</p><ul><li>频道留存率 = A用户数 * A留存率 + 其他用户数 * 其他留存率</li></ul><p> 举例：</p><ul><li>旧版次7日留存率 = 26.8%签到用户 * 46.7%留存率 + 73.2%其他用户 * 24.7%留存率 = 30.6%</li><li>新版次7日留存率 = 17.5%签到用户 * 48.8%留存率 + 82.5%其他用户 * 24.9留存率 = 29.1%</li><li>说明：新版本频道次7日留存率下降1.5，主要是由于9.3%的用户次7日留存率从46.7%下降到24.9%</li></ul><h3 id="3-2-新频道各坑位细拆分析"><a href="#3-2-新频道各坑位细拆分析" class="headerlink" title="3.2 新频道各坑位细拆分析"></a>3.2 新频道各坑位细拆分析</h3><ol><li>对频道中相同功能点进行新旧版本对比, 衡量参数：</li></ol><ul><li>各个坑位点击uv占比访问uv</li><li>各个坑位次7日留存率细拆</li></ul><ol start="2"><li>对1中数据差异较大坑位进行具体原因分析</li></ol><ul><li>对各模块坑位具体原因进行分析说明</li></ul><h3 id="3-3-对改版后的某主要功能点的流量结构变化进行分析"><a href="#3-3-对改版后的某主要功能点的流量结构变化进行分析" class="headerlink" title="3.3 对改版后的某主要功能点的流量结构变化进行分析"></a>3.3 对改版后的某主要功能点的流量结构变化进行分析</h3><ul><li>对新旧不同版本的流量结构进行梳理，找出主要流量入口变化，并进行说明。 </li><li>用户究竟是如何使用产品新功能的，是否符合你预期设想的那样，还是说用户自己创造出了新的玩法</li></ul><h3 id="3-4-对产品流程转化率是否有提升"><a href="#3-4-对产品流程转化率是否有提升" class="headerlink" title="3.4 对产品流程转化率是否有提升"></a>3.4 对产品流程转化率是否有提升</h3><ul><li>去观察整个产品的流程转化率是否因为产品迭代改版而有所提升。</li><li>查看转化漏斗，改变前后，流程的转化数据是否发生变化，每个小环节的漏斗转化率有什么变化</li></ul><hr><!-- <!-- ## 其他 具的操作只是帮你快速业务流程梳理出关键性的分析和指标体系，那么这些体系和指标的度量和之间的关系就要依靠统计学去界定和规范一个网站改版了，新版的页面没有改变原来的交互操作，只是改变了视觉样式，用户访问量和点击量变化了，这些变化是好是坏?1、我们已知的是改版前后点击量的数据和用户访问量的数据2 、我们想知道这个变化是好是坏要怎么做?算一下改版前后用户的百分比和点击量的百分，如果改版后用户量下降了，点击量下降了是不是改版就不成功?显然我们不能如此简单的看问题。要比较这两个样本，我们可以使用T检验。T检验(Student’s t test)是用于小样本(样本容量小于30，总体标准差σ未知的正态分布)的两个平均值差异程度的检验方法。我的置信区间是95%，所以如果sig<.05就代表差异显著。从表上看，改版前后点击量和用户数两项上差异并不显著，所以我们可以认为这次改版至少没引起什么不良的影响。当然现实问题往往更复杂，仅就改版为例，我们需要考虑很多问题，例如：1、改变了哪些内容? 外观还是交互方式?或者外观+交互方式?布局有什么变化?交互方式的变化对用户完成一个任务所需的步骤或点击次数是否有改变?2、改版前的数据采集了多少天?改版后的数据采集了多少天?3、改版前后的时期在每一年的相应劫夺，用户的访问量是否有显著变化?趋势是怎样的?  ---------------------<!-- # 8.  数据分析方法案例如何提高全站留存率？1. 选择高留存的行为，并选择其中比较容易扩大使用者面积的几个，在产品功能层面放大，让更多的人看到并发生转化，从而提升留存。2. 评估最终效果时，首先评估该功能的使用人群和占比是否有效提升，有则认为改进有效3. 以上主要因为产品在改进期间会同时发生很多其他改进，也会有各种不同的市场，运营活动，单纯用留存来评估，无法有效验证。例如：即刻产品的核心功能之一就是内容的分发，用户绝大多数的时间都在浏览关注、推荐和动态页的内容与评论。按照用户使用这些内容模块的行为，可以按其门槛和深浅分为路人行为（如浏览帖子）、围观行为（点击并查看评论）、普通参与行为（点赞、转发）、深度参与行为（发布评论）等。通过留存分析功能，发现行为深度越深，用户的留存就越高。但由于扩大发生参与行为的门槛过高，落地性也就较差。因此，选择围观行为，通过放大其面积来提升用户全站留存，所以，就在产品信息流列表页露出一条热评，一方面让更多的用户看到最精彩评论，另一方面更有力的引导用户点击查看更多内容。新增热评功能后，成功将阅读评论的用户比例提升，并且成功提高了全站留存 -->]]></content>
      
      
      <categories>
          
          <category> 数据分析方法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据分析 </tag>
            
            <tag> 改版分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建业务运营指标</title>
      <link href="/2019/05/12/%E6%96%B9%E6%B3%95-%E5%B8%B8%E7%94%A8%E6%8C%87%E6%A0%87/"/>
      <url>/2019/05/12/%E6%96%B9%E6%B3%95-%E5%B8%B8%E7%94%A8%E6%8C%87%E6%A0%87/</url>
      
        <content type="html"><![CDATA[<p>作为一名数据分析师，在工作中通常需要一些指标来衡量数据发展的好坏，毕竟，如果你不能衡量它，那么你就不能增长它。 那么数据分析中常见的指标都有哪些，如何在工作中制定业务指标呢，今天的文章来详细探讨一下。</p><h1 id="指标划分的整体思路"><a href="#指标划分的整体思路" class="headerlink" title="指标划分的整体思路"></a>指标划分的整体思路</h1><h2 id="1-明确公司目前的核心指标"><a href="#1-明确公司目前的核心指标" class="headerlink" title="1. 明确公司目前的核心指标"></a>1. 明确公司目前的核心指标</h2><p> 这也是一级指标，用来指引公司的战略目标。</p><ul><li> 明确我们需要研究公司目前都有哪些业务， 这些业务在行业中有没有一些标准的指标？ 如大目标是营收， 那么更多的付费用户能带来营收，更长的生命周期能带来营收，更高的客单价能带来营收，将一级级指标分配个多个团队或多个时间段来执行。</li></ul><h2 id="2-明确部门的核心指标"><a href="#2-明确部门的核心指标" class="headerlink" title="2. 明确部门的核心指标"></a>2. 明确部门的核心指标</h2><p> 根据公司的一级指标进行拆解，明确公司各个部门的二级指标。</p><ul><li>我们要根据具体的职责来确定指标。 比如销售部门， 则gmv,客单价，客复购率等，都是我们需要追踪的指标。</li><li>认知阶段，很多都是市场部、品牌部、渠道从部负责，那么这样指标有问题，你就知道找谁背锅了。 </li></ul><h2 id="3-明确到个人的核心指标"><a href="#3-明确到个人的核心指标" class="headerlink" title="3. 明确到个人的核心指标"></a>3. 明确到个人的核心指标</h2><p> 根据对部门二级指标的拆解，明确部门个人的三级指标. </p><ul><li> 比如某人负责推广，则推广的流量， 转化率则就需要进行追踪， 对于数据异常，则能够追踪到某个员工具体的行为。 </li></ul><h2 id="4-明确每个业务动作的指标"><a href="#4-明确每个业务动作的指标" class="headerlink" title="4. 明确每个业务动作的指标"></a>4. 明确每个业务动作的指标</h2><p> 每一个业务动作都话一个方框，注明什么动作，再补充这个动作需要哪些指标，使业务和指标之间的关系明确。</p><h2 id="5-学会跨部门背指标"><a href="#5-学会跨部门背指标" class="headerlink" title="5. 学会跨部门背指标"></a>5. 学会跨部门背指标</h2><p>  很多部门的指标比较单一，比如渠道部只负责拉点击，不负责注册，那么就需要通过指标的表现和系统性，考虑跨部门背指标，或者用权重的方式去解决，让领导去拍板。</p><h2 id="6-指标追踪"><a href="#6-指标追踪" class="headerlink" title="6 . 指标追踪"></a>6 . 指标追踪</h2><p> 通过日报、周报、月报的数据汇报，来说明业务运营的问题，促进公司业务更好的发展。</p><h1 id="对具体运营指标进行拆解-AARRR模型"><a href="#对具体运营指标进行拆解-AARRR模型" class="headerlink" title="对具体运营指标进行拆解-AARRR模型"></a>对具体运营指标进行拆解-AARRR模型</h1><h2 id="获取用户"><a href="#获取用户" class="headerlink" title="获取用户"></a>获取用户</h2><p> 核心： 找到获客成本较低且用户质量较高的渠道，通过砸钱让产品在某渠道进行曝光，并将用户转化成产品用户</p><p>常见的指标： </p><ul><li> 安装用户数</li><li>  激活用户数</li><li>一次会话用户数<br>   新用户下载完APP， 仅打开过产品一次，且该次使用时长在2分钟以内。（避免机器刷单）</li><li>CPM - 每千人成本<br>   广告展示时就向广告主收费，以曝光为目的，不强调实际获客效果。 倾向于保护流量主利益。</li><li>CAC - 每点击成本<br> 用户发生点击行为时向广告主收费。 CAC = 新增用户总投入 / 新增用户总数</li><li>CPA - 每行动成本<br> 以后端收费为主，也就是用户看到广告并点击后，有进一步了解的欲望，完成某些特定行为， 如下载APP、预约报名或购买了产品。  倾向于保护广告主利益。</li><li>CPPC - 每付费用户的获取成本 </li><li>CPS  - 以实际销售额换算广告金额<br> 类似销售提成</li><li>CPD - 每下载成本</li><li>CPT - 每时间段成本<br> 例如： 这个位置一个星期多少钱</li><li>ROI - 投资回报率<br> ROI = 销售所得利润 / 广告成本 * 100%</li></ul><hr><h2 id="提高用户活跃度"><a href="#提高用户活跃度" class="headerlink" title="提高用户活跃度"></a>提高用户活跃度</h2><p> 提高产品使用粘性，提升用户使用深度。</p><ul><li>DNU - 日新增用户数</li><li>DAU - 日活跃用户数</li><li>WAU - 周活跃用户数量</li><li>MAU - 月活跃用户数</li><li>ACU - 平均同时在线用户数</li><li>PCU - 最高同时在线用户数</li><li>UV - 访问用户数</li><li>PV - 点击量</li><li>人均点击次数 = 访问量/ 点击量</li><li>CTR - 点击率<br> 点击量 / 曝光量</li><li>TS - 用户平均在线时长</li><li>人均启动次数</li><li>N次操作占比</li><li>用户行为路径</li><li>用户访问频次</li><li>跳出率<br> 用户打开网站的某个网页， 然后直接退出网站。跳出率是直接衡量网页（网站）对“新用户”吸引力的重要指标<br> 例如： 100个人进入该页面，5个人直接从该页面离开该网站，则跳出率为5%。</li><li>退出率<br> 从该页面离开网站的次数占该网页总浏览次数的比例。退出率则是综合衡量用户离开网站行为的重要指标（也可能满足需求了就离开了）<br> 例如： 20个人从该页面离开网站，该页面的总浏览量为200次，则退出率为10%。</li><li>用户会话次数<br> 用户在时间窗口的所有行为集合。 例如：用户打开APP， 搜索商品，浏览商品，下单并支付，最后退出，整个算一次会话。<br> 会话时间，网页端用户超过30分钟再次操作，算第二次会话。 移动端的时间窗口为5分钟。 </li><li>功能渗透率<br> 功能使用用户数 占 总活跃用户数</li><li>新老访客占比：衡量网站的生命力</li><li>访客时间： 衡量内容质量</li><li>访客平均访问页数：衡量网站对访客的吸引力，访问深度</li><li>访客来源： 访客从哪里来</li><li>用户行为转化率</li><li>首页访客占比：衡量网页结构，对新用户导航是否友好</li><li>TGI ： [目标群体中具有某一特征的群体所占比例 / 总体中具有相同特征的群体所占比例] * 100<br>例如，在15-24岁的人群中，有8.9%的人过去一年内服用过斯达舒，而在总体人群中，服用过斯达舒的人数比例为6.6%，则斯达舒在15-24岁人群中的TGI指数是134.9，这说明，斯达舒主要定位在15-24岁的人群中。<br>TGI指数表征不同特征用户关注问题的差异情况，其中TGI指数等于100表示平均水平，高于100，代表该类用户对某类问题的关注程度高于整体水平</li></ul><hr><h2 id="提高留存率"><a href="#提高留存率" class="headerlink" title="提高留存率"></a>提高留存率</h2><p> 如何让用户不断的使用我们的产品， 减少用户的流失，提升用户的粘性。</p><ul><li>次日留存率</li><li>次3日留存率</li><li>次7日留存率</li><li>30日留存率</li><li>回流率<br>   用户在使用该App离开的N天/周/月之后，再次使用该App的比例</li><li>用户流失率</li><li>用户生命周期（周期/(1-周期内新增留存率))</li><li>功能使用率<br>   衡量产品功能是否受用户欢迎</li><li>用户忠诚指数<br>   忠诚指数是对活跃留存的再量化。活跃仅是产品的使用与否，A用户和B用户都是天天打开App，但是B产生了消费，那么B比A更忠诚。</li></ul><h2 id="提高收入"><a href="#提高收入" class="headerlink" title="提高收入"></a>提高收入</h2><ul><li>pu 付费用户</li><li>CR 付费转化率<br> 注册用户到付费用户的转化率</li><li>ARPU 平均每用户收入</li><li>ARPPU 平均每付费用户收入</li><li>APA 活跃付费用户</li><li>PUR 用户付费率  APA / AU</li><li>LTV 生命周期价值<br>   如果我们获取到1万个用户需要花10万元，那么，如果这1万个用户从安装到卸载能够给公司带来大于10万元的收益，则这个产品就是可盈利的。</li><li>PBP 回收期<br>   当我们预测到产品是可盈利的之后，所付出的成本需要多久才能收回，产品才能开始真正地盈利，这个时间就是回收期PBP，为了保证公司资金链不出问题，一般认为PBP能够在一年以内是最好的。</li><li>GMV 网站成交金额<br>  拍下订单的总金额，包含付款和未付款两部分</li><li>支付uv</li><li>支付pv</li><li>访购率</li><li>人均订单数</li><li>客单价<br>  总收入/订单数</li><li>复购率<br>   单位时间内，消费两次以上的用户数占购买总用户数</li><li>退货率</li><li>消费次数</li><li>消费频率</li><li>订单量</li><li>购买间隔</li><li>APPU 每个用户的平均利润</li></ul><hr><h2 id="用户推荐"><a href="#用户推荐" class="headerlink" title="用户推荐"></a>用户推荐</h2><p>  通过提升产品的竞争力， 使用户给其他人推荐此产品。</p><ul><li>分享率</li><li>分享次数</li><li>K因子<br> 即每一个用户能够带来几个新用户</li><li>病毒传播周期<br> 假设1000位种子用户在10天邀请了1500位用户，那么传播周期为10天，K因子为1.5。</li><li>NPS净推荐值<br> 计量某个客户将会向其他人推荐某个企业或服务可能性的指数<br> 净推荐值(NPS)=(推荐者数/总样本数)×100%-(贬损者数/总样本数)×100%</li></ul><ol start="6"><li>其他缩写</li></ol><ul><li> PP —— 英文percent point的简称，意思为百分比</li><li>UGC —— 用户原创内容</li><li>SEO —— 搜索引擎优化</li><li>CR —— 转化率 ： 衡量转化环节的好坏</li><li> visit —— 用户访问次数 ： 用户来到网站-关闭网站页面</li><li> Landing Page  —— 着陆页 ： 用户从外部链接直接跳转到的第一个页面</li><li>Bounce Rate —— 跳出率 ： 用户来到网站，没有做任何行为就指标离开网站。</li><li>Referrer —— 引荐流量</li><li>PR —— 公众关系， 组织机构与公众环境之间的沟通与传播关系。</li></ul><hr><p>参考资料：</p><blockquote><p><a href="https://mp.weixin.qq.com/s/TkLtvyAC-t2Nrv4ApGc1Qg">学习数据分析，从了解方法论开始</a><br><a href="http://www.woshipm.com/operate/669526.html">万字干货总结：最全的运营数据指标解读</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数据分析方法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 常用指标 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>营销活动分析</title>
      <link href="/2019/04/22/%E6%96%B9%E6%B3%95-%E8%90%A5%E9%94%80%E6%B4%BB%E5%8A%A8%E5%88%86%E6%9E%90/"/>
      <url>/2019/04/22/%E6%96%B9%E6%B3%95-%E8%90%A5%E9%94%80%E6%B4%BB%E5%8A%A8%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h1 id="营销活动分析"><a href="#营销活动分析" class="headerlink" title="营销活动分析"></a>营销活动分析</h1><h2 id="营销活动分析介绍"><a href="#营销活动分析介绍" class="headerlink" title="营销活动分析介绍"></a>营销活动分析介绍</h2><p>互联网公司经常会做一些运营活动，比如比如当当网的限时优惠活动，春节期间支付宝的集五福活动等。这些活动花费了公司大量的人力与财力， 那么活动的效果该如何评估呢？<br>这就需要用数据来说话。 数据分析在营销活动中的任务，不仅是在活动后对数据进行分析， 更要在活动前、活动中、活动后三个方面来都进行跟踪。 </p><h2 id="活动前期："><a href="#活动前期：" class="headerlink" title="活动前期："></a>活动前期：</h2><ol><li>目的</li></ol><ul><li>和运营人员商定好本次活动的目标，这次活动主要是为了：拉新、促活还是品牌推广，没有目标的活动不是好的运营活动。 </li></ul><ol start="2"><li>埋点</li></ol><ul><li>和运营人员商定好这次活动都需要了解哪些数据，针对需要采集的页面位置，写好埋点方案：字段名、埋点位置、上报方式</li><li>和研发人员沟通埋点方案，数据埋点完成后，测试采集数据是否准确， 避免采集数据有误。 </li></ul><ol start="3"><li>搭建指标体系</li></ol><ul><li> 写出这次活动自己都需要哪些指标，如何计算， 提前搭建好指标体系</li><li>提前订好这次活动自己需要输出哪些数据，用什么形式来进行展现， 定好数据的输出格式。 </li></ul><h2 id="活动中期"><a href="#活动中期" class="headerlink" title="活动中期"></a>活动中期</h2><ol><li>观察活动前3天的数据</li></ol><ul><li>观察活动第1天的数据， 详细查看各指标体系的报表数据是否有异常，对于发现的问题做到及时修改。</li><li>观察1-3天的数据趋势， 预估活动目标的完成度， 考虑活动目标是否需要调整。 </li></ul><ol start="2"><li>活动数据及时数据</li></ol><ul><li>定时输出活动战报，及时发现数据异常波动， 让运营人员和项目领导知道数据的实时动态。 </li><li>对于长期活动，第一周后需要进行一次复盘，将结论同步给管理层， 让更高视野的人给建议。 </li></ul><h2 id="活动后期"><a href="#活动后期" class="headerlink" title="活动后期"></a>活动后期</h2><ol><li>活动的效果</li></ol><ul><li>短期效果<br>活动对大盘的影响<ul><li>参与活动uv</li><li>打开APP， 首次进入活动uv</li><li>大盘的日环比、周同比</li></ul>新增用户<br>拉动低活跃用户重新活跃数<br>目标完成度<br>品牌传播指数</li></ul><ul><li>长期效果<br> 新增用户留存率<br>低活用户留存率</li></ul><ol start="2"><li>活动优化</li></ol><ul><li>活动主漏斗数据转化率</li><li>活动功能模块渗透率</li><li>用户反馈</li></ul><ol start="3"><li>活动报告</li></ol><ul><li>在活动结束1-2周内输出，要有时效性。</li><li>活动与活动之前的数据对比更能说明问题</li><li>思考每次活动的本质和意义。</li><li>敢于暴露问题， 把已知的事实告诉上级，邮件同步给运营负责人</li><li>涉及到钱的问题， 需要让业务方给， 邮件说明情况，钱问题比较敏感。</li></ul><h3 id="案例分析"><a href="#案例分析" class="headerlink" title="案例分析"></a>案例分析</h3><p>支付宝集五福活动</p><ul><li>带来新增用户，提升用户的活跃度，品牌传播量</li></ul><p>在活动开始之前应该确定一个重点提升的核心数据。 这样的数据包括新用户注册、用户活跃度、用户付费转化、产品交易额、品牌知名度（百度指数、新浪指数等）等等。 </p><p>非商品交易类的互动性活动，需要关注：</p><ul><li>产品核心数据（日活、新用户) 的提升效果。</li><li>专题页面的uv、pv,</li><li>活动产生的用户互动量和人均互动次数、分享次数</li><li>老用户和新用户的互动比例</li></ul><p>交易类产品的促销活动：</p><ul><li>互动为平台带来的总交易额、购买人数、人均客单价（关键指标）</li><li>活动页面商品的 uv、pv、进入活动页面的人数占比（活动吸引力）</li><li>浏览-加入购物车-下单的转化率，分析潜在用户流失原因。</li><li>优惠券核销量/ 优惠券发放量</li><li>不同渠道用户的付费比例，单价，留存</li></ul><p><img src="https://i.loli.net/2019/02/24/5c721dbaacd7d.png" alt="营销活动分析"></p><hr>]]></content>
      
      
      <categories>
          
          <category> 数据分析方法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据分析 </tag>
            
            <tag> 活动分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常见的分析思维方法</title>
      <link href="/2019/03/26/%E6%96%B9%E6%B3%95-%E5%B8%B8%E8%A7%81%E7%9A%84%E5%88%86%E6%9E%90%E6%96%B9%E6%B3%95/"/>
      <url>/2019/03/26/%E6%96%B9%E6%B3%95-%E5%B8%B8%E8%A7%81%E7%9A%84%E5%88%86%E6%9E%90%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="数据分析方法"><a href="#数据分析方法" class="headerlink" title="数据分析方法"></a>数据分析方法</h1><p> 使用频率按照顺序排列</p><h3 id="1-对比分析法"><a href="#1-对比分析法" class="headerlink" title="1.对比分析法"></a>1.对比分析法</h3><p> 对比分析是给单独的数据一个参考系， 否则孤立的数据毫无意义。 </p><ol><li>时间上的同比环比</li></ol><ul><li>环比、环比增长率</li><li>同比、同比增长率</li></ul><ol start="2"><li>竞争对手对比</li><li>与其他维度结合，进行对比</li></ol><ul><li>活动促销前后的对比</li><li>细拆维度之间的对比</li><li>各渠道之间的对比等</li></ul><h3 id="2-多维度拆解法"><a href="#2-多维度拆解法" class="headerlink" title="2.多维度拆解法"></a>2.多维度拆解法</h3><p> 多维分解是指从业务需求出发，将指标从多个维度进行拆分。</p><p> <img src="https://i.loli.net/2019/02/26/5c756008dedc0.png" alt="维度划分"></p><p> 说明：</p><p>为什么需要进行多维拆解?</p><ul><li><p>有时候一个非常笼统或者最终的指标你是看不出什么问题来的，但是进行拆分之后，很多细节问题就会浮现出来。</p></li><li><p>举个例子，某网站的跳出率是0.47、平均访问深度是4.39、平均访问时长是0.55分钟。如果你要提升用户的参与度，显然这样的数据会让你无从下手;但是你对这些指标进行拆解之后就会发现很多思路。</p></li></ul><p> 补充：<br>维度拆解不够， 容易导致<a href="https://wiki.mbalib.com/wiki/%E8%BE%9B%E6%99%AE%E6%A3%AE%E6%82%96%E8%AE%BA">辛普森悖论</a></p><h3 id="3-漏斗分析法"><a href="#3-漏斗分析法" class="headerlink" title="3. 漏斗分析法"></a>3. 漏斗分析法</h3><p>漏斗分析法， 还原用户转化的路径， 分析每一步的转化率， 针对性的优化和改善</p><p><img src="https://i.loli.net/2019/02/25/5c74047cc3522.jpg" alt="漏斗模型"></p><p> 说明：<br>漏斗分析是一套流程式数据分析，它能够科学反映用户行为状态以及从起点到终点各阶段用户转化率情况的重要分析模型。</p><p>漏斗分析模型已经广泛应用于网站用户行为分析和APP用户行为分析的流量监控、产品目标转化等日常数据运营与数据分析的工作中</p><p>漏斗分析要注意的两个要点：</p><ul><li>不但要看总体的转化率，还要关注转化过程每一步的转化率;</li><li>漏斗分析也需要进行多维度拆解，拆解之后可能会发现不同维度下的转化率也有很大差异。</li></ul><h3 id="4-留存分析"><a href="#4-留存分析" class="headerlink" title="4. 留存分析"></a>4. 留存分析</h3><p> 留存分析是一种用来分析用户参与情况/活跃程度的分析模型，考察进行初始行为的用户中，有多少人会进行后续行为。</p><p>衡量留存的常见指标有：次日留存率、7日留存率、30日留存率等等</p><p> 说明：</p><p> 这是用来衡量产品对用户价值高低的重要方法</p><p>留存分析可以帮助回答以下问题：</p><ul><li>一个新客户在未来的一段时间内是否完成了您期许用户完成的行为？如支付订单等；</li><li>某个社交产品改进了新注册用户的引导流程，期待改善用户注册后的参与程度，如何验证？</li><li>想判断某项产品改动是否奏效，如新增了一个邀请好友的功能，观察是否有人因新增功能而多使用产品几个月？</li></ul><h3 id="5-趋势分析"><a href="#5-趋势分析" class="headerlink" title="5. 趋势分析"></a>5. 趋势分析</h3><p>通常我们在数据分析产品中建立一张数据指标的线图或者柱状图，然后持续观察，重点关注异常值。</p><p> 说明：</p><ul><li><p>在这个过程中，我们要选定第一关键指标，而不要被虚荣指标所迷惑。</p></li><li><p>以社交类APP为例，如果我们将下载量作为第一关键指标，可能就会走偏;因为用户下载APP并不代表他使用了你的产品。在这种情况下，建议将DAU(Daily Active Users，日活跃用户)作为第一关键指标，而且是启动并且执行了某个操作的用户才能算上去;这样的指标才有实际意义，运营人员要核心关注这类指标。</p></li></ul><h3 id="6-用户分群"><a href="#6-用户分群" class="headerlink" title="6.用户分群"></a>6.用户分群</h3><p>用户分群主要有两种分法：维度和行为组合。</p><ul><li><p>第一种根据用户的维度进行分群，比如从地区维度分，有北京、上海、广州、杭州等地的用户;从用户登录平台进行分群，有PC端、平板端和手机移动端用户。</p></li><li><p>第二种根据用户行为组合进行分群，比如说每周在社区签到3次的用户与每周在社区签到少于3次的用户的区别.</p></li></ul><h3 id="7-公式法"><a href="#7-公式法" class="headerlink" title="7.公式法"></a>7.公式法</h3><p> 将一切问题皆可量化，拆解成最小的维度，通过 +、-、*、/ 进行计算</p><p><img src="https://i.loli.net/2019/02/27/5c7698403238e.png" alt="公式法"></p><h3 id="8-用户细查"><a href="#8-用户细查" class="headerlink" title="8.用户细查"></a>8.用户细查</h3><p>用户行为数据是观察用户在你产品内的行为路径是一种非常直观的分析方法。</p><ul><li><p>在用户分群的基础上，一般抽取3-5个用户进行细查，即可覆盖分群用户大部分行为规律。</p></li><li><p>绝大多数产品都或多或少存在一些反人类的设计或者BUG，通过用户细查可以很好地发现产品中存在的问题并且及时解决。</p></li></ul><h3 id="9-A-B测试与A-A测试"><a href="#9-A-B测试与A-A测试" class="headerlink" title="9.A/B测试与A/A测试"></a>9.A/B测试与A/A测试</h3><p> A/B测试是为了达到一个目标，采取了两套方案，一组用户采用A方案，一组用户采用B方案。通过实验观察两组方案的数据效果，判断两组方案的好坏。</p><p> 说明：</p><ul><li>在A/B测试方面，谷歌是不遗余力地尝试;对于搜索结果的显示，谷歌会制定多种不同的方案(包括文案标题，字体大小，颜色等等)，不断来优化搜索结果中广告的点击率。</li></ul><p> 这里需要注意的一点，A/B测试之前最好有A/A测试或者类似准备。什么是A/A测试?A/A测试是评估两个实验组是否是处于相同的水平，这样A/B测试才有意义。其实这和学校里面的控制变量法、实验组与对照组、双盲试验本质一样的。</p><h3 id="10-假设法"><a href="#10-假设法" class="headerlink" title="10.假设法"></a>10.假设法</h3><p> 假设-验证-判断。 当没有直观数据时， 以假设先行的方式进行推断。<br> 说明：</p><p> 例如： 如果商品提价后， 公司收益会不会变化？</p><ul><li>假设流量不会发生变化， 那么商品价格会影响转化率，确定转化率的下降。 </li><li>计算日常的转化率， 针对不同的用户，如：忠诚用户、普通用户、羊毛用户， 预估各类别用户提价后的转化率变化。</li></ul><h3 id="11-指数法"><a href="#11-指数法" class="headerlink" title="11.指数法"></a>11.指数法</h3><p>指定一个标准， 解决衡量的问题</p><ul><li><p>线性加权：</p></li><li><p>反比例： 1-1/n， 范围为0-1</p></li><li><p>log指数法<br>  热度公式： log(uv+ 5*评论,2) +(time -初始时间) / 10</p></li></ul><!-- <!-- ### 结构分析### 对比分析### 时间序列分析### 相关性分析### 机器学习 -- --><hr><p>参考资料：</p><p><a href="https://mp.weixin.qq.com/s?__biz=MjM5NjcxMzIwMQ==&amp;mid=2649861486&amp;idx=1&amp;sn=e8c79ae936fc1f04fffed59f6be7e018&amp;chksm=bee00af0899783e64566d7b921b904ba18e5846a3ade62fa48a8ac89d923a517105d6fbc09a0#rd">数据分析的基本方法论</a></p>]]></content>
      
      
      <categories>
          
          <category> 数据分析方法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hive-SQL练习题</title>
      <link href="/2019/03/24/%E6%8A%80%E8%83%BD-Hive%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
      <url>/2019/03/24/%E6%8A%80%E8%83%BD-Hive%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="Hive概念考查"><a href="#Hive概念考查" class="headerlink" title="Hive概念考查"></a>Hive概念考查</h1><ol><li><p> between 和 having 的区别</p></li><li><p>inner join 和 outer join 的区别</p></li><li><p>Hive 如何优化</p></li><li><p>Hive 中常用的窗口函数都有哪些</p></li><li><p>如何进行行转列</p></li><li><p>如何进行列转行</p></li><li><p>sql 空缺值如何填充</p></li></ol><h1 id="join考查"><a href="#join考查" class="headerlink" title="join考查"></a>join考查</h1><h2 id="结合两个表"><a href="#结合两个表" class="headerlink" title="结合两个表"></a>结合两个表</h2><ol><li><strong>问题描述：</strong></li></ol><p>表1：Preson</p><table><thead><tr><th>Column Name</th><th>Type</th></tr></thead><tbody><tr><td>PersonId</td><td>int</td></tr><tr><td>FirstName</td><td>varchar</td></tr><tr><td>LastName</td><td>varchar</td></tr></tbody></table><p>表2： Address</p><table><thead><tr><th>Column Name</th><th>Type</th></tr></thead><tbody><tr><td>AddressId</td><td>int</td></tr><tr><td>PersonId</td><td>int</td></tr><tr><td>City</td><td>varchar</td></tr><tr><td>State</td><td>varchar</td></tr></tbody></table><p>要求： 为Person表中的每个人提供以下信息，无论每个人都有一个地址：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FirstName, LastName, City, State</span><br></pre></td></tr></tbody></table></figure><ol start="2"><li><strong>答案：</strong></li></ol><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    Person.FirstName,</span><br><span class="line">    Person.LastName,</span><br><span class="line">    Address.City,</span><br><span class="line">    Address.State</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    Person <span class="keyword">LEFT</span> <span class="keyword">join</span> Address </span><br><span class="line">    <span class="keyword">on</span> Person.PersonId <span class="operator">=</span> Address.PersonId;</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>考查点： 使用 <code>join</code> 对两表进行连接查询。</p><hr><h2 id="查询比经理薪资高的员工姓名"><a href="#查询比经理薪资高的员工姓名" class="headerlink" title="查询比经理薪资高的员工姓名"></a>查询比经理薪资高的员工姓名</h2><ol><li>问题</li></ol><p>表：Employee </p><blockquote><p>包含员工和经理的Id 与薪水</p></blockquote><table><thead><tr><th>Id</th><th>Name</th><th>Salary</th><th>ManagerId</th></tr></thead><tbody><tr><td>1</td><td>Joe</td><td>70000</td><td>3</td></tr><tr><td>2</td><td>Henry</td><td>80000</td><td>4</td></tr><tr><td>3</td><td>Sam</td><td>60000</td><td>NULL</td></tr><tr><td>4</td><td>Max</td><td>90000</td><td>NULL</td></tr></tbody></table><p>要求： 查找收入高于经理的员工，得到如下结果：</p><table><thead><tr><th>Employee</th></tr></thead><tbody><tr><td>Joe</td></tr></tbody></table><blockquote><p>前3列 来自a1, 后两列来自a2</p></blockquote><ol start="2"><li>答案</li></ol><ul><li>答案1：</li></ul><blockquote><p>利用 join 对表进行合并<br>前3列 来自a1, 后两列来自a2</p></blockquote><table><thead><tr><th>Name</th><th>Salary</th><th>ManagerId</th><th>Id</th><th>Salary</th></tr></thead><tbody><tr><td>Joe</td><td>70000</td><td>3</td><td>3</td><td>60000</td></tr><tr><td>Henry</td><td>80000</td><td>4</td><td>4</td><td>90000</td></tr></tbody></table><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">select</span><br><span class="line">    a1.name as Employee</span><br><span class="line">from    </span><br><span class="line">    Employee as a1 join employee as a2</span><br><span class="line">    on  a1.ManagerId = a2.Id</span><br><span class="line">where </span><br><span class="line">a1.Salary &gt; a2.Salary  </span><br></pre></td></tr></tbody></table></figure><ul><li> 答案2：<figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> a1 <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span></span><br><span class="line">        name,salary, ManagerId</span><br><span class="line">    <span class="keyword">from</span> </span><br><span class="line">    Employee),</span><br><span class="line">a2 <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span></span><br><span class="line">        managerid,</span><br><span class="line">        Id</span><br><span class="line">    <span class="keyword">from</span></span><br><span class="line">        Employee</span><br><span class="line">)</span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">    a1.name</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    a1 <span class="keyword">join</span> a2 <span class="keyword">on</span> a1.ManagerId <span class="operator">=</span> a2.Id</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">    a1.Salary <span class="operator">&gt;</span> a2.Salary</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></li></ul><ul><li>答案3：</li></ul><blockquote><p>步骤1：</p></blockquote><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> Employee <span class="keyword">AS</span> a1, Employee <span class="keyword">AS</span> a2</span><br></pre></td></tr></tbody></table></figure><p>此步骤输出结果为：</p><p>结果将获得这两个标的笛卡尔积，输出结果将使 4*4 = 16条记录， 我们对输出结果进行过滤。</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    a.Name <span class="keyword">AS</span> <span class="string">'Employee'</span></span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    Employee <span class="keyword">AS</span> a,</span><br><span class="line">    Employee <span class="keyword">AS</span> b</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">    a.ManagerId <span class="operator">=</span> b.Id</span><br><span class="line">        <span class="keyword">AND</span> a.Salary <span class="operator">&gt;</span> b.Salary</span><br></pre></td></tr></tbody></table></figure><hr><h1 id="排序函数"><a href="#排序函数" class="headerlink" title="排序函数"></a>排序函数</h1><h2 id="对数据进行排序"><a href="#对数据进行排序" class="headerlink" title="对数据进行排序"></a>对数据进行排序</h2><ol><li><strong>问题：</strong></li></ol><p>表： Scores</p><table><thead><tr><th>Id</th><th>Score</th></tr></thead><tbody><tr><td>1</td><td>3.50</td></tr><tr><td>2</td><td>3.65</td></tr><tr><td>3</td><td>4.00</td></tr><tr><td>4</td><td>3.85</td></tr><tr><td>5</td><td>4.00</td></tr><tr><td>6</td><td>3.65</td></tr></tbody></table><p>要求： 对以下 Scores 表中的分数进行排名，如果两数相同，则有相同的排名， 排名相等的不会留下空位。</p><p>输出结果为： </p><table><thead><tr><th>Score</th><th>Rank</th></tr></thead><tbody><tr><td>4.00</td><td>1</td></tr><tr><td>4.00</td><td>1</td></tr><tr><td>3.85</td><td>2</td></tr><tr><td>3.65</td><td>3</td></tr><tr><td>3.65</td><td>3</td></tr><tr><td>3.50</td><td>4</td></tr></tbody></table><ol start="2"><li>答案 </li></ol><ul><li>答案1：</li></ul><p>步骤1：  返回不同的成绩</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Select</span> <span class="keyword">Distinct</span> Score <span class="keyword">from</span> Scores</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>步骤2： 统计并计算排名</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Select</span> <span class="built_in">Count</span>(<span class="number">1</span>) <span class="operator">+</span> <span class="number">1</span> <span class="keyword">From</span> (<span class="keyword">Select</span> <span class="keyword">Distinct</span> Score <span class="keyword">from</span> Scores) <span class="keyword">as</span> uniqeScores <span class="keyword">where</span> Score <span class="operator">&gt;</span> sc.Score</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>步骤3： 汇总</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Select</span> </span><br><span class="line">    sc.Score,</span><br><span class="line">    (<span class="keyword">Select</span> <span class="built_in">Count</span>(<span class="number">1</span>) <span class="operator">+</span> <span class="number">1</span> </span><br><span class="line"><span class="keyword">From</span> (</span><br><span class="line">        <span class="keyword">Select</span> </span><br><span class="line">            <span class="keyword">Distinct</span> Score </span><br><span class="line">        <span class="keyword">from</span>  Scores) <span class="keyword">as</span> uniqeScores </span><br><span class="line"> <span class="keyword">where</span> Score <span class="operator">&gt;</span> sc.Score) <span class="keyword">as</span> rank </span><br><span class="line"><span class="keyword">From</span> Scores sc </span><br><span class="line"><span class="keyword">Order</span> <span class="keyword">by</span> sc.Score <span class="keyword">Desc</span>;</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><ul><li>答案2：<figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> s1.Score,</span><br><span class="line"> <span class="built_in">COUNT</span>(<span class="keyword">DISTINCT</span> s2.Score) Rank</span><br><span class="line"><span class="keyword">from</span> Scores s1</span><br><span class="line">       <span class="keyword">inner</span> <span class="keyword">join</span> Scores s2 <span class="keyword">on</span> s1.Score <span class="operator">&lt;=</span> s2.Score</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> s1.Id</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> s1.Score <span class="keyword">desc</span></span><br></pre></td></tr></tbody></table></figure></li></ul><ul><li>答案3：<figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">select </span><br><span class="line">    Score,</span><br><span class="line">    dense_rank() over(order by Score)  as Rank</span><br><span class="line">from </span><br><span class="line">    Scores</span><br></pre></td></tr></tbody></table></figure></li></ul><ol start="3"><li>延伸</li></ol><p>rank、dense_rank、 row_number 的区别</p><ul><li>rank函数， 返回数据项在分组中的排名， 排名相等的会留下空位。<blockquote><p> 如1、2、2、4</p></blockquote></li><li> dense_rank函数， 返回数据项在分组中的排名， 排名相等的不会留下空位。<blockquote><p> 如1、2、2、3</p></blockquote></li><li> row_number函数， 返回数据项在分组中的排名， 排名不管数据是否相等。<blockquote><p> 如1、2、3、4</p></blockquote></li></ul><hr><h2 id="连续-4-个月活跃的用户明细"><a href="#连续-4-个月活跃的用户明细" class="headerlink" title="连续 4 个月活跃的用户明细"></a>连续 4 个月活跃的用户明细</h2><ol><li><p>问题：<br>求出 1-4 月每月连续登陆客户端的用户数</p></li><li><p>思路</p></li></ol><p>将用户登录的月份按从小到大排序， 找出排序等于 4 的用户</p><ol start="3"><li>答案</li></ol><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">with</span> a1 <span class="keyword">as</span>(</span><br><span class="line"><span class="keyword">select</span>  </span><br><span class="line">    id, </span><br><span class="line">    <span class="keyword">month</span>(dt) <span class="keyword">as</span> <span class="keyword">month</span></span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    data</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">    dt <span class="keyword">between</span> <span class="string">'2019-01-01'</span> <span class="keyword">and</span> <span class="string">'2019-04-30'</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line">    id, <span class="keyword">month</span>(dt) </span><br><span class="line">),</span><br><span class="line">a2 <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span></span><br><span class="line">    id,</span><br><span class="line">    a1.month,</span><br><span class="line">    <span class="built_in">row_number</span>() <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span>  id <span class="keyword">order</span> <span class="keyword">by</span> a1.month) <span class="keyword">as</span> num</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">a1</span><br><span class="line">)</span><br><span class="line">    <span class="keyword">select</span></span><br><span class="line">    <span class="built_in">count</span>(<span class="keyword">distinct</span> id) <span class="keyword">as</span> uv</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">a2</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">    a2.num<span class="operator">=</span> <span class="number">4</span></span><br></pre></td></tr></tbody></table></figure><hr><h2 id="5月中连续7天登陆的用户数"><a href="#5月中连续7天登陆的用户数" class="headerlink" title="5月中连续7天登陆的用户数"></a>5月中连续7天登陆的用户数</h2><ol><li>问题:<br>根据用户登录表 data，取出连续登录了K天的用户uid</li></ol><table><thead><tr><th>id</th><th>dt</th></tr></thead><tbody><tr><td>A</td><td>2019-06-01</td></tr><tr><td>B</td><td>2019-06-03</td></tr><tr><td>B</td><td>2019-06-04</td></tr><tr><td>B</td><td>2019-06-05</td></tr><tr><td>B</td><td>2019-06-06</td></tr><tr><td>C</td><td>2019-06-05</td></tr><tr><td>C</td><td>2019-06-06</td></tr><tr><td>C</td><td>2019-06-07</td></tr></tbody></table><ol start="2"><li>答案：</li></ol><ol><li>将用户按照电话号进行排序</li></ol><table><thead><tr><th>id</th><th>dt</th><th>num</th></tr></thead><tbody><tr><td>A</td><td>2019-05-01</td><td>1</td></tr><tr><td>B</td><td>2019-05-03</td><td>1</td></tr><tr><td>B</td><td>2019-05-04</td><td>2</td></tr><tr><td>B</td><td>2019-05-05</td><td>3</td></tr><tr><td>B</td><td>2019-05-06</td><td>4</td></tr><tr><td>C</td><td>2019-05-05</td><td>1</td></tr><tr><td>C</td><td>2019-05-06</td><td>2</td></tr><tr><td>C</td><td>2019-05-07</td><td>3</td></tr></tbody></table><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">    id,</span><br><span class="line">    dt,</span><br><span class="line">    <span class="built_in">row_number</span>() <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> id <span class="keyword">order</span> <span class="keyword">by</span> dt) <span class="keyword">as</span> num</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    Data</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">    dt <span class="keyword">between</span> <span class="string">'2019-05-01'</span> <span class="keyword">and</span> <span class="string">'2019-05-07'</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line">    id,</span><br><span class="line">    dt</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>将日期与排序进行相减</li></ol><table><thead><tr><th>id</th><th>dt</th><th>num</th><th>diff</th></tr></thead><tbody><tr><td>A</td><td>2019-05-01</td><td>1</td><td>2019-04-30</td></tr><tr><td>B</td><td>2019-05-03</td><td>1</td><td>2019-05-02</td></tr><tr><td>B</td><td>2019-05-04</td><td>2</td><td>2019-05-02</td></tr><tr><td>B</td><td>2019-05-05</td><td>3</td><td>2019-05-02</td></tr><tr><td>B</td><td>2019-05-06</td><td>4</td><td>2019-05-02</td></tr><tr><td>C</td><td>2019-05-05</td><td>1</td><td>2019-05-04</td></tr><tr><td>C</td><td>2019-05-06</td><td>2</td><td>2019-05-04</td></tr><tr><td>C</td><td>2019-05-07</td><td>3</td><td>2019-05-04</td></tr></tbody></table><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> a1 <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span></span><br><span class="line">        id,</span><br><span class="line">        dt,</span><br><span class="line">        <span class="built_in">row_number</span>() <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> id <span class="keyword">order</span> <span class="keyword">by</span> dt) <span class="keyword">as</span> num</span><br><span class="line">    <span class="keyword">from</span> </span><br><span class="line">        computer_view.client_android_log_view</span><br><span class="line">        <span class="keyword">where</span> </span><br><span class="line">        dt <span class="keyword">between</span> <span class="string">'2019-06-01'</span> <span class="keyword">and</span> <span class="string">'2019-06-03'</span></span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line">        id,</span><br><span class="line">        dt</span><br><span class="line">)</span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">    id,</span><br><span class="line">    dt,</span><br><span class="line">    num,</span><br><span class="line">    (DATE_SUB(dt, num )) <span class="keyword">as</span> diff </span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">a1</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line">    id,</span><br><span class="line">    dt,</span><br><span class="line">    num</span><br><span class="line">limit <span class="number">100</span> </span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><ol start="3"><li>统计差值相同的数字个数，并大于等于3</li></ol><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> a1 <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span></span><br><span class="line">        user_account,</span><br><span class="line">         hit_date,</span><br><span class="line">        <span class="built_in">row_number</span>() <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> user_account <span class="keyword">order</span> <span class="keyword">by</span> hit_date) <span class="keyword">as</span> num</span><br><span class="line">    <span class="keyword">from</span> </span><br><span class="line">        computer_view.client_android_log_view</span><br><span class="line">        <span class="keyword">where</span> </span><br><span class="line">        hit_date <span class="keyword">between</span> <span class="string">'2019-06-01'</span> <span class="keyword">and</span> <span class="string">'2019-06-05'</span></span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line">        user_account,</span><br><span class="line">        hit_date</span><br><span class="line">),</span><br><span class="line">a2 <span class="keyword">as</span> (<span class="keyword">select</span></span><br><span class="line">    user_account,</span><br><span class="line">    hit_date,</span><br><span class="line">    num,</span><br><span class="line">    (DATE_SUB(hit_date, num )) <span class="keyword">as</span> diff </span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">a1</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line">    user_account,</span><br><span class="line">    hit_date,</span><br><span class="line">    num)</span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">    diff,</span><br><span class="line">    <span class="built_in">max</span>(num),</span><br><span class="line">    <span class="built_in">count</span>(<span class="keyword">distinct</span> user_account)</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    a2</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line">    diff</span><br><span class="line"><span class="keyword">having</span> </span><br><span class="line">    <span class="built_in">max</span>(num)  <span class="operator">&gt;=</span> <span class="number">1</span></span><br><span class="line">limit <span class="number">100</span> </span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><ol start="4"><li>找出连续登录4天以上的用户数</li></ol><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> a1 <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span></span><br><span class="line">        id,</span><br><span class="line">        dt,</span><br><span class="line">        <span class="built_in">row_number</span>() <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> id <span class="keyword">order</span> <span class="keyword">by</span> dt) <span class="keyword">as</span> num</span><br><span class="line">    <span class="keyword">from</span> </span><br><span class="line">        computer_view.client_android_log_view</span><br><span class="line">        <span class="keyword">where</span> </span><br><span class="line">        dt <span class="keyword">between</span> <span class="string">'2019-06-01'</span> <span class="keyword">and</span> <span class="string">'2019-06-05'</span></span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line">        id,</span><br><span class="line">        dt</span><br><span class="line">),</span><br><span class="line">a2 <span class="keyword">as</span> (<span class="keyword">select</span></span><br><span class="line">    id,</span><br><span class="line">    dt,</span><br><span class="line">    num,</span><br><span class="line">    (DATE_SUB(dt, num )) <span class="keyword">as</span> diff </span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">a1</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line">    id,</span><br><span class="line">    dt,</span><br><span class="line">    num)</span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">    id,</span><br><span class="line">    diff,</span><br><span class="line">    <span class="built_in">count</span>(diff) </span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    a2</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line">    id,</span><br><span class="line">    diff </span><br><span class="line"><span class="keyword">having</span> </span><br><span class="line">    <span class="built_in">count</span>(diff)  <span class="operator">&gt;=</span> <span class="number">4</span></span><br><span class="line">limit <span class="number">100</span> </span><br></pre></td></tr></tbody></table></figure><!-- sd --><table><thead><tr><th>id</th><th>diff</th><th>count(diff)</th></tr></thead><tbody><tr><td>B</td><td>2019-05-02</td><td>4</td></tr><tr><td>C</td><td>2019-05-04</td><td>3</td></tr></tbody></table><hr><h2 id="求连续任意天数的用户数"><a href="#求连续任意天数的用户数" class="headerlink" title="求连续任意天数的用户数"></a>求连续任意天数的用户数</h2><blockquote><p>sql分三层<br>第一层：根据条件查询一个时间区间的数据<br>     cha_day 统一计算出一个时间差，然后和当前行数相减。连续的天数和行数相减，结果是一样的<br>第二层：分组求出每个用户的连续天数，<br>     rows:排序找出一个用户最大连续天数<br>第三层：连续天数分组，求出人数。<br>     分组天数总人数，应该等于总人数</p></blockquote><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">    lx_day,</span><br><span class="line">    <span class="built_in">count</span>(user_account)</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">(</span><br><span class="line">    <span class="keyword">select</span></span><br><span class="line">        user_account,</span><br><span class="line">        cha_day,</span><br><span class="line">        <span class="built_in">count</span>(cha_day) <span class="keyword">as</span> lx_day,</span><br><span class="line">        <span class="built_in">row_number</span>() <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> user_account <span class="keyword">order</span> <span class="keyword">by</span> <span class="built_in">count</span>(cha_day) <span class="keyword">desc</span>) <span class="keyword">as</span> <span class="keyword">rows</span></span><br><span class="line">    <span class="keyword">from</span></span><br><span class="line">    (</span><br><span class="line">        <span class="keyword">select</span></span><br><span class="line">            datediff(hit_date,<span class="string">'2000-01-01'</span>)<span class="operator">-</span><span class="built_in">row_number</span>() <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> user_account <span class="keyword">order</span> <span class="keyword">by</span> hit_date) <span class="keyword">as</span> cha_day,</span><br><span class="line">            hit_date,</span><br><span class="line">            user_account</span><br><span class="line">        <span class="keyword">from</span></span><br><span class="line">            apache_computer_view.client_ios_log</span><br><span class="line">        <span class="keyword">where</span></span><br><span class="line">            hit_date <span class="keyword">between</span> <span class="string">'2019-10-15'</span> <span class="keyword">and</span> <span class="string">'2019-10-20'</span></span><br><span class="line">            <span class="keyword">and</span></span><br><span class="line">            nbtn_name <span class="operator">=</span> <span class="string">'签到有礼'</span></span><br><span class="line">        <span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">            hit_date,</span><br><span class="line">            user_account</span><br><span class="line">    )v</span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">        user_account,</span><br><span class="line">        cha_day</span><br><span class="line">)v</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">    <span class="keyword">rows</span> <span class="operator">=</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">    lx_day</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span></span><br><span class="line">    lx_day</span><br><span class="line">limit</span><br><span class="line">    <span class="number">1000</span></span><br></pre></td></tr></tbody></table></figure><hr><h1 id="取出排名第-2-高的数据"><a href="#取出排名第-2-高的数据" class="headerlink" title="取出排名第 2 高的数据"></a>取出排名第 2 高的数据</h1><ol><li><strong>问题描述</strong></li></ol><p>表： Employee</p><table><thead><tr><th>Id</th><th>Salary</th></tr></thead><tbody><tr><td>1</td><td>100</td></tr><tr><td>2</td><td>200</td></tr><tr><td>3</td><td>300</td></tr></tbody></table><p>要求： 根据上面的 Employee 表，查询返回 薪水工资第二高的数据：<code>200</code>, 如果没有第二高的薪水， 返回<code>Null</code>。</p><table><thead><tr><th>SecondHighestSalary</th></tr></thead><tbody><tr><td>200</td></tr></tbody></table><ol start="2"><li>答案</li></ol><ul><li>答案1</li></ul><p>解法： 在除过第一名薪水中，找出最高的薪水，也就是第二名。</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    <span class="built_in">MAX</span>(Salary) <span class="keyword">as</span> SecondHighestSalary</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    Employee</span><br><span class="line"><span class="keyword">WHERE</span> </span><br><span class="line">    Salary <span class="operator">&lt;</span> (<span class="keyword">SELECT</span>  <span class="built_in">MAX</span>(Salary)   <span class="keyword">FROM</span>   Employee);</span><br></pre></td></tr></tbody></table></figure><ul><li>答案2</li></ul><p>解法： 跳过排名第一的数据， 并取出1条数据，即读取第2条数据。</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">   <span class="keyword">DISTINCT</span>  Salary <span class="keyword">as</span> SecondHighestSalary</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    Employee</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> </span><br><span class="line">    Salary <span class="keyword">DESC</span></span><br><span class="line"> limit <span class="number">1</span> <span class="keyword">offset</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 可缩写为limit 1,1</span></span><br></pre></td></tr></tbody></table></figure><p><strong>但上式写法错误， 因为如果表中没有第二薪水的话，那<code>sql</code>运行报错，而不是返回<code>Null</code>。</strong></p><p>我们将其作为临时表可解决此问题：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    (<span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> </span><br><span class="line">    Salary </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    Employee</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> </span><br><span class="line">    Salary <span class="keyword">DESC</span></span><br><span class="line">limit <span class="number">1</span> <span class="keyword">offset</span> <span class="number">1</span>) <span class="keyword">AS</span> SecondHighestSalary</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>或者使用 <code>IFNULL</code></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    IFNULL(</span><br><span class="line">          (<span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> </span><br><span class="line">    Salary </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    Employee</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> </span><br><span class="line">    Salary <span class="keyword">DESC</span></span><br><span class="line">limit <span class="number">1</span>,<span class="number">1</span>), </span><br><span class="line">    <span class="keyword">NULL</span></span><br><span class="line">    ) <span class="keyword">AS</span> SecondHighestSalary</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><ol start="3"><li>延伸</li></ol><p>找出排名第三的薪水</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    IFNULL(</span><br><span class="line">          (<span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> </span><br><span class="line">    Salary </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    Employee</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> </span><br><span class="line">    Salary <span class="keyword">DESC</span></span><br><span class="line">limit <span class="number">2</span> <span class="keyword">offset</span> <span class="number">1</span>), </span><br><span class="line">    <span class="keyword">NULL</span></span><br><span class="line">    ) <span class="keyword">AS</span> SecondHighestSalary</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><hr><h1 id="留存率"><a href="#留存率" class="headerlink" title="留存率"></a>留存率</h1><ol><li>问题：<br> 写出6月5-10号每日客户端活跃用户的次1日、次3日、次7日留存</li></ol><ol start="2"><li>答案</li></ol><ul><li>答案1：<figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> a1 <span class="keyword">as</span> (<span class="keyword">select</span> </span><br><span class="line">    dt,</span><br><span class="line">    user_account</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    computer</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">    dt <span class="keyword">between</span> <span class="string">'2019-06-01'</span> <span class="keyword">and</span> <span class="string">'2019-06-17'</span>),</span><br><span class="line">a2 <span class="keyword">as</span> (<span class="keyword">select</span> </span><br><span class="line">    dt,</span><br><span class="line">    user_account</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    computer</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">    dt <span class="keyword">between</span> <span class="string">'2019-06-01'</span> <span class="keyword">and</span> <span class="string">'2019-06-17'</span>)</span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">a1.dt,</span><br><span class="line"><span class="built_in">count</span>(<span class="keyword">distinct</span> a1.user_account) uv,</span><br><span class="line"><span class="built_in">count</span>(<span class="keyword">distinct</span> <span class="keyword">case</span> <span class="keyword">when</span> datediff(a2.dt, a1.dt) <span class="operator">=</span> <span class="number">1</span> <span class="keyword">then</span> a1.user_account <span class="keyword">else</span> <span class="keyword">null</span> <span class="keyword">end</span> ) next_day,</span><br><span class="line"><span class="built_in">count</span>(<span class="keyword">distinct</span> <span class="keyword">case</span> <span class="keyword">when</span> datediff(a2.dt, a1.dt) <span class="operator">=</span> <span class="number">3</span> <span class="keyword">then</span> a1.user_account <span class="keyword">else</span> <span class="keyword">null</span> <span class="keyword">end</span> ) three_day,</span><br><span class="line"><span class="built_in">count</span>(<span class="keyword">distinct</span> <span class="keyword">case</span> <span class="keyword">when</span> datediff(a2.dt, a1.dt) <span class="operator">=</span> <span class="number">7</span> <span class="keyword">then</span> a1.user_account <span class="keyword">else</span> <span class="keyword">null</span> <span class="keyword">end</span> ) seven_day</span><br><span class="line"><span class="keyword">from</span> a1 <span class="keyword">join</span> a2 <span class="keyword">on</span> a1.user_account <span class="operator">=</span> a2.user_account</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> a1.dt</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> a1.dt</span><br><span class="line">limit <span class="number">100</span></span><br></pre></td></tr></tbody></table></figure></li></ul><p>输出结果为： </p><table><thead><tr><th>日期</th><th>uv</th><th>次1日</th><th>次3日</th><th>次7日</th></tr></thead><tbody><tr><td>2019/6/1</td><td>50231</td><td>6578</td><td>6642</td><td>5154</td></tr><tr><td>2019/6/2</td><td>42000</td><td>6293</td><td>5027</td><td>4304</td></tr><tr><td>2019/6/3</td><td>44312</td><td>6760</td><td>8331</td><td>5042</td></tr><tr><td>2019/6/4</td><td>37852</td><td>5298</td><td>7133</td><td>0</td></tr><tr><td>2019/6/5</td><td>30678</td><td>6082</td><td>4648</td><td>0</td></tr><tr><td>2019/6/6</td><td>39405</td><td>8173</td><td>4972</td><td>0</td></tr><tr><td>2019/6/7</td><td>31267</td><td>5352</td><td>4920</td><td>0</td></tr><tr><td>2019/6/8</td><td>25614</td><td>4451</td><td>0</td><td>0</td></tr><tr><td>2019/6/9</td><td>24113</td><td>4568</td><td>0</td><td>0</td></tr><tr><td>2019/6/10</td><td>26242</td><td>0</td><td>0</td><td>0</td></tr></tbody></table><ul><li>答案2：<br>步骤1：<figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>  </span><br><span class="line">    dt,</span><br><span class="line">    <span class="built_in">count</span>(<span class="keyword">distinct</span> user_account) <span class="keyword">as</span> uv</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    computer</span><br><span class="line"><span class="keyword">WHERE</span>   </span><br><span class="line">    dt <span class="keyword">between</span> <span class="string">'2019-06-01'</span> <span class="keyword">and</span> <span class="string">'2019-06-17'</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">BY</span> </span><br><span class="line">    dt</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">BY</span> </span><br><span class="line">    dt</span><br></pre></td></tr></tbody></table></figure></li></ul><p>步骤2：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 统计10-15号每天的次日留存数， 统计次3、7日留存只需将1换为3、7</span></span><br><span class="line"><span class="keyword">with</span> a1 <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> </span><br><span class="line">        user_account,</span><br><span class="line">        dt</span><br><span class="line">    <span class="keyword">from</span> </span><br><span class="line">        computer</span><br><span class="line">    <span class="keyword">where</span> </span><br><span class="line">        dt <span class="keyword">between</span> <span class="string">'2019-06-01'</span> <span class="keyword">and</span> <span class="string">'2019-06-17'</span></span><br><span class="line">),</span><br><span class="line">a2 <span class="keyword">as</span> (</span><br><span class="line">        <span class="keyword">select</span> </span><br><span class="line">        user_account,</span><br><span class="line">        dt</span><br><span class="line">    <span class="keyword">from</span> </span><br><span class="line">        computer_view.client_android_log_view</span><br><span class="line">    <span class="keyword">where</span> </span><br><span class="line">        dt <span class="keyword">between</span> <span class="string">'2019-06-01'</span> <span class="keyword">and</span> <span class="string">'2019-06-17'</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">    a1.dt,</span><br><span class="line">    <span class="built_in">count</span>(<span class="keyword">distinct</span> a1.user_account) <span class="keyword">as</span> uv</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    a1 <span class="keyword">join</span> a2 <span class="keyword">on</span> a1.user_account <span class="operator">=</span> a2.user_account</span><br><span class="line"><span class="keyword">WHERE</span>   </span><br><span class="line">    a2.dt <span class="operator">=</span>  date_add(a1.dt, <span class="number">1</span>) </span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line">    a1.dt</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">BY</span></span><br><span class="line">    a1.dt</span><br></pre></td></tr></tbody></table></figure><p>步骤3： </p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">留存率 = 用步骤2结果/ 步骤1 结果</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><hr><h1 id="连续出现三次的数字"><a href="#连续出现三次的数字" class="headerlink" title="连续出现三次的数字"></a>连续出现三次的数字</h1><ol><li>问题： </li></ol><p>查找出连续出现至少三次的所有数字</p><p>表 Logs 如下：</p><table><thead><tr><th>Id</th><th>Num</th></tr></thead><tbody><tr><td>1</td><td>1</td></tr><tr><td>2</td><td>1</td></tr><tr><td>3</td><td>1</td></tr><tr><td>4</td><td>2</td></tr><tr><td>5</td><td>1</td></tr><tr><td>6</td><td>2</td></tr><tr><td>7</td><td>2</td></tr></tbody></table><p>得到如下结果：</p><table><thead><tr><th>ConsecutiveNums</th></tr></thead><tbody><tr><td>1</td></tr></tbody></table><ol start="2"><li>答案</li></ol><ul><li>答案1：</li></ul><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">    <span class="keyword">distinct</span>  a1.Num <span class="keyword">as</span>  ConsecutiveNums</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    Logs <span class="keyword">as</span> a1</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> </span><br><span class="line">    Logs <span class="keyword">as</span> a2 <span class="keyword">on</span> a1.Id <span class="operator">=</span> a2.Id<span class="number">-1</span></span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> </span><br><span class="line">    Logs <span class="keyword">as</span> a3 <span class="keyword">on</span> a1.Id <span class="operator">=</span> a3.Id <span class="number">-2</span></span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">    a1.Num <span class="operator">=</span> a2.Num <span class="keyword">and</span> a2.Num <span class="operator">=</span> a3.Num</span><br></pre></td></tr></tbody></table></figure><ul><li>答案2：</li></ul><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">    <span class="keyword">distinct</span> a1.Num <span class="keyword">as</span>  ConsecutiveNums</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    Logs a1,</span><br><span class="line">    Logs a2,</span><br><span class="line">    Logs a3</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">    a1.Id <span class="operator">=</span> a2.Id <span class="number">-1</span></span><br><span class="line">    <span class="keyword">and</span> </span><br><span class="line">    a2.Id <span class="operator">=</span> a3.Id <span class="number">-1</span></span><br><span class="line">    <span class="keyword">and</span> </span><br><span class="line">    a1.Num <span class="operator">=</span> a2.Num</span><br><span class="line">    <span class="keyword">and</span> </span><br><span class="line">    a2.Num <span class="operator">=</span> a3.Num</span><br></pre></td></tr></tbody></table></figure><ul><li>答案3：<figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">---连续 N 次出现， 则将 3 改为 N 即可。</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    <span class="keyword">distinct</span> num <span class="keyword">as</span> ConsecutiveNums</span><br><span class="line"><span class="keyword">FROM</span>(</span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    id, num, </span><br><span class="line">    <span class="variable">@pre</span> :<span class="operator">=</span> <span class="variable">@cur</span>,</span><br><span class="line">    <span class="variable">@cur</span> :<span class="operator">=</span> num,</span><br><span class="line">    <span class="variable">@rep</span>_ct :<span class="operator">=</span> IF(<span class="variable">@pre</span> <span class="operator">=</span> <span class="variable">@cur</span>, <span class="variable">@rep</span>_ct <span class="operator">+</span> <span class="number">1</span>, <span class="number">1</span>) <span class="keyword">as</span> rep_ct</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">    `Logs` l, </span><br><span class="line">    (<span class="keyword">SELECT</span> <span class="variable">@pre</span> :<span class="operator">=</span> <span class="keyword">null</span>, <span class="variable">@cur</span> :<span class="operator">=</span> <span class="number">0</span>, <span class="variable">@rep</span>_ct :<span class="operator">=</span> <span class="number">1</span>) init</span><br><span class="line">)   temp </span><br><span class="line"><span class="keyword">WHERE</span> rep_ct <span class="operator">&gt;=</span> <span class="number">3</span></span><br></pre></td></tr></tbody></table></figure></li></ul><hr><h1 id="找出重复邮件"><a href="#找出重复邮件" class="headerlink" title="找出重复邮件"></a>找出重复邮件</h1><ol><li>问题</li></ol><p>表： Person</p><table><thead><tr><th>Id</th><th>Email</th></tr></thead><tbody><tr><td>1</td><td><a href="mailto:a@b.com">a@b.com</a></td></tr><tr><td>2</td><td><a href="mailto:c@d.com">c@d.com</a></td></tr><tr><td>3</td><td><a href="mailto:a@b.com">a@b.com</a></td></tr></tbody></table><p>要求： 找出Person 表中所有重复电子邮件，得到如下结果：</p><table><thead><tr><th>Email</th></tr></thead><tbody><tr><td><a href="mailto:a@b.com">a@b.com</a></td></tr></tbody></table><ol start="2"><li>答案</li></ol><ul><li><p>答案1：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">    a1.Email</span><br><span class="line"><span class="keyword">from</span>(</span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">    Email,</span><br><span class="line">    <span class="built_in">count</span>(Email) <span class="keyword">as</span> num</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    Person</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line">    Email) <span class="keyword">as</span> a1</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">    a1.num <span class="operator">!=</span><span class="number">1</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></li><li><p>答案2：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">select</span><br><span class="line">    Email</span><br><span class="line">from</span><br><span class="line">    Person</span><br><span class="line">group by </span><br><span class="line">    Email</span><br><span class="line">having </span><br><span class="line">    count(Email) !=1</span><br></pre></td></tr></tbody></table></figure></li></ul><hr><h1 id="找出未订购任何内容的用户"><a href="#找出未订购任何内容的用户" class="headerlink" title="找出未订购任何内容的用户"></a>找出未订购任何内容的用户</h1><ol><li>问题：</li></ol><p>表： Customers</p><table><thead><tr><th>Id</th><th>Name</th></tr></thead><tbody><tr><td>1</td><td>Joe</td></tr><tr><td>2</td><td>Henry</td></tr><tr><td>3</td><td>Sam</td></tr><tr><td>4</td><td>Max</td></tr></tbody></table><p>表： Orders</p><table><thead><tr><th>Id</th><th>CustomerId</th></tr></thead><tbody><tr><td>1</td><td>3</td></tr><tr><td>2</td><td>1</td></tr></tbody></table><p>要求： 根据上面两个表，找出从未订购任何内容的所有客户。输出结果如下：</p><table><thead><tr><th>Customers</th></tr></thead><tbody><tr><td>Henry</td></tr><tr><td>Max</td></tr></tbody></table><ol start="2"><li>答案</li></ol><ul><li>答案1：</li></ul><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    Name <span class="keyword">as</span> Customers</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">     Customers <span class="keyword">left</span> <span class="keyword">JOIN</span> Orders <span class="keyword">on</span> Customers.Id <span class="operator">=</span> Orders.CustomerId</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">    Orders.CustomerId <span class="keyword">is</span> <span class="keyword">NULL</span> </span><br></pre></td></tr></tbody></table></figure><ul><li> 答案2：</li></ul><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">    customers.name <span class="keyword">as</span> Customers</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    customers</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">    customers.Id <span class="keyword">not</span> <span class="keyword">in</span> </span><br><span class="line">    (<span class="keyword">select</span></span><br><span class="line">        CustomerId</span><br><span class="line">    <span class="keyword">from</span></span><br><span class="line">        Orders)</span><br></pre></td></tr></tbody></table></figure><hr><h1 id="找出各部门薪水最高的员工"><a href="#找出各部门薪水最高的员工" class="headerlink" title="找出各部门薪水最高的员工"></a>找出各部门薪水最高的员工</h1><ol><li>问题：</li></ol><p>表： Employee</p><table><thead><tr><th>Id</th><th>Name</th><th>Salary</th><th>DepartmentId</th></tr></thead><tbody><tr><td>1</td><td>Joe</td><td>70000</td><td>1</td></tr><tr><td>2</td><td>Jim</td><td>90000</td><td>1</td></tr><tr><td>3</td><td>Henry</td><td>80000</td><td>2</td></tr><tr><td>4</td><td>Sam</td><td>60000</td><td>2</td></tr><tr><td>5</td><td>Max</td><td>90000</td><td>1</td></tr></tbody></table><p>表： Department</p><table><thead><tr><th>Id</th><th>Name</th></tr></thead><tbody><tr><td>1</td><td>IT</td></tr><tr><td>2</td><td>Sales</td></tr></tbody></table><p> 要求：找出各部门薪水最高的员工</p><table><thead><tr><th>Department</th><th>Employee</th><th>Salary</th></tr></thead><tbody><tr><td>IT</td><td>Max</td><td>90000</td></tr><tr><td>IT</td><td>Jim</td><td>90000</td></tr><tr><td>Sales</td><td>Henry</td><td>80000</td></tr></tbody></table><ol start="2"><li>答案</li></ol><p>步骤1： 查出各部门最高薪水</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    DepartmentId,</span><br><span class="line">    <span class="built_in">MAX</span>(Salary)</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">   Employee</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">    DepartmentId</span><br></pre></td></tr></tbody></table></figure><p>步骤2： </p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">Employee.Name <span class="keyword">as</span> Department,</span><br><span class="line">Department.Name <span class="keyword">as</span> Employee,</span><br><span class="line">Salary </span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    Employee <span class="keyword">join</span> Department <span class="keyword">on</span> Employee.DepartmentId<span class="operator">=</span> Department.Id</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">    ((Employee.DepartmentId, Salary) <span class="keyword">in</span> </span><br><span class="line">    (<span class="keyword">SELECT</span></span><br><span class="line">    DepartmentId,</span><br><span class="line">    <span class="built_in">MAX</span>(Salary)</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">   Employee</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">    DepartmentId))</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line">Department,</span><br><span class="line">Employee,</span><br><span class="line">Salary </span><br></pre></td></tr></tbody></table></figure><hr><h1 id="获取每个部门中薪水前三名的员工"><a href="#获取每个部门中薪水前三名的员工" class="headerlink" title="获取每个部门中薪水前三名的员工"></a>获取每个部门中薪水前三名的员工</h1><ol><li>问题：</li></ol><p>表：Employee</p><table><thead><tr><th>Id</th><th>Name</th><th>Salary</th><th>DepartmentId</th></tr></thead><tbody><tr><td>1</td><td>Joe</td><td>85000</td><td>1</td></tr><tr><td>2</td><td>Henry</td><td>80000</td><td>2</td></tr><tr><td>3</td><td>Sam</td><td>60000</td><td>2</td></tr><tr><td>4</td><td>Max</td><td>90000</td><td>1</td></tr><tr><td>5</td><td>Janet</td><td>69000</td><td>1</td></tr><tr><td>6</td><td>Randy</td><td>85000</td><td>1</td></tr><tr><td>7</td><td>Will</td><td>70000</td><td>1</td></tr></tbody></table><p>表： Department</p><table><thead><tr><th>Id</th><th>Name</th></tr></thead><tbody><tr><td>1</td><td>IT</td></tr><tr><td>2</td><td>Sales</td></tr></tbody></table><p>要求： 找出各部门薪水前三的员工， 输出结果如下：</p><table><thead><tr><th>Department</th><th>Employee</th><th>Salary</th></tr></thead><tbody><tr><td>IT</td><td>Max</td><td>90000</td></tr><tr><td>IT</td><td>Randy</td><td>85000</td></tr><tr><td>IT</td><td>Joe</td><td>85000</td></tr><tr><td>IT</td><td>Will</td><td>70000</td></tr><tr><td>Sales</td><td>Henry</td><td>80000</td></tr><tr><td>Sales</td><td>Sam</td><td>60000</td></tr></tbody></table><ol start="2"><li> 答案</li></ol><p>步骤1：对各部门薪水进行排序</p><ul><li>合并<figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">       Employee.Name <span class="keyword">AS</span> Employee,</span><br><span class="line">        Employee.Salary <span class="keyword">AS</span> Salary,</span><br><span class="line">        Department.Name <span class="keyword">AS</span> Department </span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    Employee <span class="keyword">join</span> Department <span class="keyword">on</span> Employee.DepartmentId <span class="operator">=</span> Department.Id </span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line">           Employee,</span><br><span class="line">        Salary,</span><br><span class="line">        Department</span><br></pre></td></tr></tbody></table></figure></li></ul><table><thead><tr><th>Employee</th><th>Salary</th><th>Department</th></tr></thead><tbody><tr><td>Joe</td><td>85000</td><td>IT</td></tr><tr><td>Henry</td><td>80000</td><td>Sales</td></tr><tr><td>Sam</td><td>60000</td><td>Sales</td></tr><tr><td>Max</td><td>90000</td><td>IT</td></tr><tr><td>Janet</td><td>69000</td><td>IT</td></tr><tr><td>Randy</td><td>85000</td><td>IT</td></tr><tr><td>Will</td><td>70000</td><td>IT</td></tr></tbody></table><p>步骤2 ： 找出排名前三的</p><blockquote><p>思路：</p><ul><li>再添加一张Employee 表，与步骤1中的 A 表进行对比， 令 B 表中的 salary 大于 A 表中的 salary</li><li>条件限制：B表中 salary 大于 A 表中salary 的个数小于3</li></ul></blockquote><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">       A.Name <span class="keyword">AS</span> Employee,</span><br><span class="line">        A.Salary <span class="keyword">AS</span> Salary,</span><br><span class="line">        Department.Name <span class="keyword">AS</span> Department </span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    Employee <span class="keyword">as</span> A <span class="keyword">join</span> Department <span class="keyword">on</span> A.DepartmentId <span class="operator">=</span> Department.Id </span><br><span class="line"><span class="keyword">WHERE</span> </span><br><span class="line">    (<span class="keyword">select</span> </span><br><span class="line">        <span class="built_in">count</span>(<span class="keyword">distinct</span> B.Salary)</span><br><span class="line">    <span class="keyword">from</span></span><br><span class="line">        Employee <span class="keyword">as</span> B</span><br><span class="line">    <span class="keyword">WHERE</span> </span><br><span class="line">        B.Salary <span class="operator">&gt;</span> A.Salary</span><br><span class="line">        <span class="keyword">and</span> </span><br><span class="line">        B.DepartmentId <span class="operator">=</span> A.DepartmentId) <span class="operator">&lt;</span><span class="number">3</span></span><br></pre></td></tr></tbody></table></figure><hr><p><a href="https://www.yanxurui.cc/posts/mysql/2016-11-10-10-sql-interview-questions/">sql题</a></p><h1 id="学生-课程-成绩案例"><a href="#学生-课程-成绩案例" class="headerlink" title="学生-课程-成绩案例"></a>学生-课程-成绩案例</h1><ol><li>内容：<br>表： student</li></ol><table><thead><tr><th>id</th><th>name</th></tr></thead><tbody><tr><td>1</td><td>zy</td></tr><tr><td>2</td><td>hz</td></tr><tr><td>3</td><td>zy</td></tr><tr><td>4</td><td>lx</td></tr><tr><td>5</td><td>lx</td></tr></tbody></table><p>表： course</p><table><thead><tr><th>id</th><th>name</th></tr></thead><tbody><tr><td>1</td><td>match</td></tr><tr><td>2</td><td>python</td></tr><tr><td>3</td><td>java</td></tr></tbody></table><p>表: student_course</p><table><thead><tr><th>sid</th><th>cid</th><th>score</th></tr></thead><tbody><tr><td>1</td><td>1</td><td>60</td></tr><tr><td>1</td><td>2</td><td>50</td></tr><tr><td>2</td><td>2</td><td>80</td></tr><tr><td>4</td><td>3</td><td>90</td></tr><tr><td>2</td><td>2</td><td>80</td></tr><tr><td>3</td><td>3</td><td>50</td></tr></tbody></table><ol start="2"><li>问题</li></ol><ul><li>问题1：</li></ul><p> 查询 student表中重名的学生， 结果包含id 和name, 按 name 升序</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">    name,</span><br><span class="line">    id</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    student</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">    name <span class="keyword">in</span> (<span class="keyword">select</span> name <span class="keyword">from</span> student <span class="keyword">group</span> <span class="keyword">by</span> name <span class="keyword">having</span> <span class="built_in">count</span>(name) <span class="operator">&gt;</span> <span class="number">1</span>)</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> </span><br><span class="line">    name</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><ul><li>问题2：</li></ul><p>查询 student_course 表中的平均份不及格的学生， 列出学生的 id 和平均分</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">select</span><br><span class="line">    sid,</span><br><span class="line">    avg(score) as avg_score</span><br><span class="line">from </span><br><span class="line">    student_course</span><br><span class="line">group by </span><br><span class="line">    sid</span><br><span class="line">having</span><br><span class="line">    avg_score &lt; 60</span><br></pre></td></tr></tbody></table></figure><ul><li>问题3：</li></ul><p>查询每门课成绩都不低于80的学生id</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">    <span class="keyword">distinct</span> sid</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    student_course</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">    sid <span class="keyword">not</span> <span class="keyword">in</span> </span><br><span class="line">        (<span class="keyword">select</span></span><br><span class="line">            score</span><br><span class="line">        <span class="keyword">from</span></span><br><span class="line">            student_course</span><br><span class="line">        <span class="keyword">where</span> </span><br><span class="line">            score <span class="operator">&lt;</span><span class="number">80</span>)</span><br></pre></td></tr></tbody></table></figure><ul><li>问题4：</li></ul><p>查询每个学生的总成绩，列出学生名称和总成绩</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">    student.name,</span><br><span class="line">    <span class="built_in">sum</span>(student_course.score)</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    student  <span class="keyword">left</span> <span class="keyword">join</span> student_course <span class="keyword">on</span> student.id <span class="operator">=</span> student_course.sid</span><br></pre></td></tr></tbody></table></figure><ul><li>问题5：查出总成绩最高的学生</li></ul><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">    sid, <span class="built_in">sum</span>(score)</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    student_course</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line">    sid</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span></span><br><span class="line">    <span class="built_in">sum</span>(score) <span class="keyword">desc</span></span><br><span class="line">limit <span class="number">1</span>;</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><ul><li>问题6：  查询课程1,成绩第二高的学生</li></ul><p>方法1：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">---在除过第一高的成绩中，找出最高的成绩</span></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">    cid,</span><br><span class="line">    <span class="built_in">max</span>(score)</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    stuent_score</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">    cid <span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> </span><br><span class="line">    score <span class="operator">&lt;</span></span><br><span class="line">    (<span class="keyword">select</span> <span class="built_in">max</span>(score)</span><br><span class="line">    <span class="keyword">from</span></span><br><span class="line">        student_score)</span><br></pre></td></tr></tbody></table></figure><p>方法2：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">---跳过排名第一的数据， 取1条数据</span></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">    <span class="built_in">max</span>(score)</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    stuent_score</span><br><span class="line"><span class="keyword">where</span>   </span><br><span class="line">    cid <span class="operator">=</span> <span class="number">1</span> </span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">        score</span><br><span class="line">    <span class="keyword">order</span> <span class="keyword">by</span> </span><br><span class="line">        score <span class="keyword">desc</span> </span><br><span class="line">    limit <span class="number">1</span> <span class="keyword">offset</span> <span class="number">1</span> </span><br><span class="line">    <span class="comment">--limit 1,1</span></span><br></pre></td></tr></tbody></table></figure><ul><li>问题7： 查看各科成绩最高的学生id与课程id </li></ul><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">select </span><br><span class="line">    cid,</span><br><span class="line">    sid,</span><br><span class="line">    score</span><br><span class="line">from </span><br><span class="line">    student_course as a1</span><br><span class="line">where </span><br><span class="line">    score &gt;=</span><br><span class="line">    (select</span><br><span class="line">        max(score)</span><br><span class="line">    from</span><br><span class="line">        stuent_score as a2</span><br><span class="line">    where  </span><br><span class="line">        a1.id = ax.id)</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>错误写法：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">select </span><br><span class="line">    sid,</span><br><span class="line">    cid,</span><br><span class="line">    max(score)</span><br><span class="line">from </span><br><span class="line">    student_score</span><br><span class="line">group by </span><br><span class="line">    cid</span><br></pre></td></tr></tbody></table></figure><ul><li> 问题8： 在student_course 表中查询每门课的前2名，结果按照课程id 升序， 同一课程按照成绩降序。 </li></ul><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">select </span><br><span class="line">    *</span><br><span class="line">from </span><br><span class="line">    student_course x</span><br><span class="line">where </span><br><span class="line">    2 &gt;(</span><br><span class="line">        select</span><br><span class="line">            count(*)</span><br><span class="line">        from</span><br><span class="line">            student_course y</span><br><span class="line">        where </span><br><span class="line">            y.cid = x.cid and y.score &gt; x.score)</span><br><span class="line">order by </span><br><span class="line">    cid,</span><br><span class="line">    score DESC </span><br></pre></td></tr></tbody></table></figure><hr><h1 id="对每季度数据进行汇总"><a href="#对每季度数据进行汇总" class="headerlink" title="对每季度数据进行汇总"></a>对每季度数据进行汇总</h1><ol><li>问题：</li></ol><p>表： sales</p><table><thead><tr><th>年</th><th>季度</th><th>销售</th></tr></thead><tbody><tr><td>1991</td><td>1</td><td>11</td></tr><tr><td>1991</td><td>2</td><td>12</td></tr><tr><td>1991</td><td>3</td><td>13</td></tr><tr><td>1991</td><td>4</td><td>14</td></tr><tr><td>1992</td><td>1</td><td>21</td></tr><tr><td>1992</td><td>2</td><td>22</td></tr><tr><td>1992</td><td>3</td><td>23</td></tr><tr><td>1992</td><td>4</td><td>24</td></tr></tbody></table><p>要求： 通过 SQL 语句显示以下结果：</p><table><thead><tr><th>年</th><th>一季度</th><th>二季度</th><th>三季度</th><th>四季度</th></tr></thead><tbody><tr><td>1991</td><td>11</td><td>12</td><td>13</td><td>14</td></tr><tr><td>1992</td><td>21</td><td>22</td><td>23</td><td>24</td></tr></tbody></table><ol start="2"><li> 答案：</li></ol><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> 年, </span><br><span class="line"><span class="built_in">sum</span>(<span class="keyword">case</span> <span class="keyword">when</span> 季度<span class="operator">=</span><span class="number">1</span> <span class="keyword">then</span> 销售量 <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">end</span>) <span class="keyword">as</span> 一季度, </span><br><span class="line"><span class="built_in">sum</span>(<span class="keyword">case</span> <span class="keyword">when</span> 季度<span class="operator">=</span><span class="number">2</span> <span class="keyword">then</span> 销售量 <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">end</span>) <span class="keyword">as</span> 二季度, </span><br><span class="line"><span class="built_in">sum</span>(<span class="keyword">case</span> <span class="keyword">when</span> 季度<span class="operator">=</span><span class="number">3</span> <span class="keyword">then</span> 销售量 <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">end</span>) <span class="keyword">as</span> 三季度, </span><br><span class="line"><span class="built_in">sum</span>(<span class="keyword">case</span> <span class="keyword">when</span> 季度<span class="operator">=</span><span class="number">4</span> <span class="keyword">then</span> 销售量 <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">end</span>) <span class="keyword">as</span> 四季度 </span><br><span class="line"><span class="keyword">from</span> sales <span class="keyword">group</span> <span class="keyword">by</span> 年</span><br></pre></td></tr></tbody></table></figure><hr><h1 id="解释-lateral-view-函数"><a href="#解释-lateral-view-函数" class="headerlink" title="解释 lateral view 函数"></a>解释 lateral view 函数</h1><ul><li>描述：<br>   lateral view 用于和 split、explode、collect_set 函数 等一起使用， 能够将一行数据拆成多行数据，在此基础上对拆分后的数据进行聚合。 </li></ul><ul><li>问题1：<br>将 表 table 中的 <code>adid_list</code> 转换为单独的行。</li></ul><p> 表： table</p><table><thead><tr><th>pageid</th><th>adid_list</th></tr></thead><tbody><tr><td>front_page</td><td>[1,2,3]</td></tr><tr><td>contact_page</td><td>[3,4]</td></tr></tbody></table><p> 答案：</p> <figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    pageid, adid</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">    <span class="keyword">table</span></span><br><span class="line"><span class="keyword">lateral</span>  <span class="keyword">view</span> explode(adid_list) adTable  <span class="keyword">as</span> adid</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p> 输出结果为： </p><table><thead><tr><th>pageid</th><th>adid_list</th></tr></thead><tbody><tr><td>front_page</td><td>1</td></tr><tr><td>front_page</td><td>2</td></tr><tr><td>front_page</td><td>3</td></tr><tr><td>contact_page</td><td>3</td></tr><tr><td>contact_page</td><td>4</td></tr></tbody></table><hr><ul><li>问题2：<br>要求：  计算特定广告的展现次数</li></ul><p> 答案：</p> <figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    adid, <span class="built_in">count</span>(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    <span class="keyword">table</span></span><br><span class="line"><span class="keyword">lateral</span> <span class="keyword">view</span> explode(adid_list) adTable <span class="keyword">as</span> adid</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> </span><br><span class="line">    adid</span><br></pre></td></tr></tbody></table></figure><p> 输出结果为： </p><table><thead><tr><th>adid</th><th>count(1)</th></tr></thead><tbody><tr><td>1</td><td>1</td></tr><tr><td>2</td><td>1</td></tr><tr><td>3</td><td>2</td></tr><tr><td>4</td><td>1</td></tr></tbody></table><p>问题3：<br> 多个 lateral view 查询</p><p> 表： table2</p><table><thead><tr><th>array</th><th>col2</th></tr></thead><tbody><tr><td>[1,2]</td><td>[“a”，”b”]</td></tr><tr><td>[3,4]</td><td>[“c”, “d”]</td></tr></tbody></table><p> 答案：</p> <figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    myCol1, myCol2</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">    baseTable</span><br><span class="line"><span class="keyword">LATERAL</span> <span class="keyword">VIEW</span> explode(col1) myTable1 <span class="keyword">AS</span> myCol1</span><br><span class="line"><span class="keyword">LATERAL</span> <span class="keyword">VIEW</span> explode(col2) myTable2 <span class="keyword">AS</span> myCol2</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>输出结果为： </p><table><thead><tr><th>myCol1</th><th>myCol2</th></tr></thead><tbody><tr><td>1</td><td>“a”</td></tr><tr><td>1</td><td>“b”</td></tr><tr><td>2</td><td>“a”</td></tr><tr><td>2</td><td>“b”</td></tr><tr><td>3</td><td>“c”</td></tr><tr><td>3</td><td>“d”</td></tr><tr><td>4</td><td>“c”</td></tr><tr><td>4</td><td>“d”</td></tr></tbody></table><hr><h1 id="删除重复的电子邮箱"><a href="#删除重复的电子邮箱" class="headerlink" title="删除重复的电子邮箱"></a>删除重复的电子邮箱</h1><ol><li>问题</li></ol><p>表：Person</p><table><thead><tr><th>Id</th><th>Email</th></tr></thead><tbody><tr><td>1</td><td><a href="mailto:zhang@qq.com">zhang@qq.com</a></td></tr><tr><td>2</td><td><a href="mailto:yu@gmailc.om">yu@gmailc.om</a></td></tr><tr><td>3</td><td><a href="mailto:zhang@qq.com">zhang@qq.com</a></td></tr></tbody></table><p>要求: 删除 Person 表中所有重复的电子邮箱，只保留 Id 最小的那个。 </p><table><thead><tr><th>Id</th><th>Email</th></tr></thead><tbody><tr><td>1</td><td><a href="mailto:zhang@qq.com">zhang@qq.com</a></td></tr><tr><td>2</td><td><a href="mailto:yu@gmailc.om">yu@gmailc.om</a></td></tr></tbody></table><ol start="2"><li>答案：</li></ol><ul><li>答案1：</li></ul><p>步骤1：找出 Id 大的重复邮箱</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">    a1.<span class="operator">*</span></span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    Person a1 <span class="keyword">join</span> Person a2 </span><br><span class="line">    <span class="keyword">on</span> a1.Email <span class="operator">=</span> a2. Email</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">    a1. Id <span class="operator">&gt;</span> a2.Id</span><br></pre></td></tr></tbody></table></figure><p>步骤2： 删除 Id 较大的重复邮箱。</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> a1</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">    Person a1 <span class="keyword">join</span> Person a2 </span><br><span class="line">    <span class="keyword">on</span> a1.Email <span class="operator">=</span> a2. Email</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">    a1. Id <span class="operator">&gt;</span> a2.Id</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>答案2：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">DELETE a1</span><br><span class="line">FROM </span><br><span class="line">    Person a1,</span><br><span class="line">     Person a2 </span><br><span class="line">where </span><br><span class="line">   a1.Email = a2. Email and  a1. Id &gt; a2.Id</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h1 id="上升的温度"><a href="#上升的温度" class="headerlink" title="上升的温度"></a>上升的温度</h1><ol><li><a href="https://leetcode-cn.com/problems/rising-temperature/">问题</a></li></ol><p>表： Weather</p><table><thead><tr><th>Id(INT)</th><th>RecordDate(DATE)</th><th>Temperature(INT)</th></tr></thead><tbody><tr><td>1</td><td>2015-01-01</td><td>10</td></tr><tr><td>2</td><td>2015-01-02</td><td>25</td></tr><tr><td>3</td><td>2015-01-03</td><td>20</td></tr><tr><td>4</td><td>2015-01-04</td><td>30</td></tr></tbody></table><p>要求：查找与昨天日期相比温度更高的所有日期的 Id, 返回结果如下：</p><table><thead><tr><th>Id</th></tr></thead><tbody><tr><td>2</td></tr><tr><td>4</td></tr></tbody></table><ol start="2"><li>答案：</li></ol><p>答案1： datediff 函数</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    a1.Id</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    Weather a1  <span class="keyword">join</span> Weather a2 <span class="keyword">on</span>  datediff(a1.RecordDate, a2.RecordDate) <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">and</span> </span><br><span class="line">    a1.Temperature <span class="operator">&gt;</span> a2.Temperature</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>答案2： ADDDATE 函数</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    a1.Id</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    Weather a1  <span class="keyword">join</span> Weather a2 <span class="keyword">on</span>   a1.RecordDate<span class="operator">=</span>    date_add(a2.RecordDate,<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">and</span> </span><br><span class="line">    a1.Temperature <span class="operator">&gt;</span> a2.Temperature</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><hr><h1 id="游戏玩家分析1"><a href="#游戏玩家分析1" class="headerlink" title="游戏玩家分析1"></a>游戏玩家分析1</h1><p>此表显示某些游戏玩家的活动。每一行都是某天用某些设备登陆并玩多个游戏的玩家记录。 </p><p>表： Activity</p><table><thead><tr><th>player_id</th><th>device_id</th><th>event_date</th><th>games_played</th></tr></thead><tbody><tr><td>1</td><td>2</td><td>2016-03-01</td><td>5</td></tr><tr><td>1</td><td>2</td><td>2016-05-02</td><td>6</td></tr><tr><td>2</td><td>3</td><td>2017-06-25</td><td>1</td></tr><tr><td>3</td><td>1</td><td>2016-03-02</td><td>0</td></tr><tr><td>3</td><td>4</td><td>2018-07-03</td><td>5</td></tr></tbody></table><p>要求： 显示每个玩家的第一次登陆日期， 输出如下结果</p><table><thead><tr><th>player_id</th><th>first_login</th></tr></thead><tbody><tr><td>1</td><td>2016-03-01</td></tr><tr><td>2</td><td>2017-06-25</td></tr><tr><td>3</td><td>2016-03-02</td></tr></tbody></table><p>答案：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> a1.player_id, a1.event_date <span class="keyword">as</span> first_login</span><br><span class="line"><span class="keyword">FROM</span> activity a1 <span class="keyword">left</span> <span class="keyword">join</span> activity a2 <span class="keyword">on</span> a1.player_id<span class="operator">=</span>a2.player_id <span class="keyword">and</span> a1.event_date<span class="operator">&gt;</span>a2.event_date</span><br><span class="line"><span class="keyword">WHERE</span> a2.event_date <span class="keyword">is</span> <span class="keyword">NULL</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">player_id,</span><br><span class="line">to_char(event_date, <span class="string">'yyyy-mm-dd'</span>) <span class="keyword">as</span> first_login</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">(<span class="keyword">select</span></span><br><span class="line">player_id,</span><br><span class="line">event_date,</span><br><span class="line"><span class="built_in">row_number</span>() <span class="keyword">over</span> (<span class="keyword">partition</span> <span class="keyword">by</span> player_id <span class="keyword">order</span> <span class="keyword">by</span> event_date <span class="keyword">asc</span>) rn</span><br><span class="line"><span class="keyword">from</span> Activity)</span><br><span class="line"><span class="keyword">where</span> rn <span class="operator">=</span> <span class="number">1</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p><a href="https://codeday.me/bug/20190309/737795.html">https://codeday.me/bug/20190309/737795.html</a></p><hr><h1 id="游戏玩家分析2"><a href="#游戏玩家分析2" class="headerlink" title="游戏玩家分析2"></a>游戏玩家分析2</h1><p>表： Activity</p><table><thead><tr><th>player_id</th><th>device_id</th><th>event_date</th><th>games_played</th></tr></thead><tbody><tr><td>1</td><td>2</td><td>2016-03-01</td><td>5</td></tr><tr><td>1</td><td>2</td><td>2016-05-02</td><td>6</td></tr><tr><td>2</td><td>3</td><td>2017-06-25</td><td>1</td></tr><tr><td>3</td><td>1</td><td>2016-03-02</td><td>0</td></tr><tr><td>3</td><td>4</td><td>2018-07-03</td><td>5</td></tr></tbody></table><p>要求： 写取出每个玩家第一次玩游戏的设备号</p><p>输出结果如下： </p><table><thead><tr><th>player_id</th><th>device_id</th></tr></thead><tbody><tr><td>1</td><td>2</td></tr><tr><td>2</td><td>3</td></tr><tr><td>3</td><td>1</td></tr></tbody></table><p>答案：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    a1.player_id, </span><br><span class="line">    a1.device_id</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">    activity a1 </span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> activity a2 <span class="keyword">on</span> a1.player_id<span class="operator">=</span>a2.player_id <span class="keyword">and</span> a1.event_date<span class="operator">&gt;</span>a2.event_date</span><br><span class="line"><span class="keyword">WHERE</span> </span><br><span class="line">    a2.event_date <span class="keyword">is</span> <span class="keyword">NULL</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> player_id, device_id</span><br><span class="line"> <span class="keyword">from</span> </span><br><span class="line"> (</span><br><span class="line">     <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> Activity <span class="keyword">where</span> (player_id,event_date) </span><br><span class="line"> <span class="keyword">in</span> </span><br><span class="line"> (<span class="keyword">select</span> player_id, <span class="built_in">min</span>(event_date) </span><br><span class="line"> <span class="keyword">from</span> Activity <span class="keyword">group</span> <span class="keyword">by</span> player_id) </span><br><span class="line"> ) <span class="keyword">as</span> t</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">player_id, device_id</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">(<span class="keyword">select</span></span><br><span class="line">player_id,</span><br><span class="line">device_id,</span><br><span class="line"><span class="built_in">row_number</span>() <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> player_id <span class="keyword">order</span> <span class="keyword">by</span> event_date <span class="keyword">asc</span>) rn</span><br><span class="line"><span class="keyword">from</span> Activity)</span><br><span class="line"><span class="keyword">where</span> rn <span class="operator">=</span> <span class="number">1</span></span><br></pre></td></tr></tbody></table></figure><hr><h1 id="游戏分析3"><a href="#游戏分析3" class="headerlink" title="游戏分析3"></a>游戏分析3</h1><p>表：Activity</p><table><thead><tr><th>player_id</th><th>device_id</th><th>event_date</th><th>games_played</th></tr></thead><tbody><tr><td>1</td><td>2</td><td>2016-03-01</td><td>5</td></tr><tr><td>1</td><td>2</td><td>2016-05-02</td><td>6</td></tr><tr><td>1</td><td>3</td><td>2017-06-25</td><td>1</td></tr><tr><td>3</td><td>1</td><td>2016-03-02</td><td>0</td></tr><tr><td>3</td><td>4</td><td>2018-07-03</td><td>5</td></tr></tbody></table><p>要求： 取出每个玩家在不同日期下的累积玩游戏次数。</p><blockquote><p>例如： 玩家 id 为 1 的玩家， 在 2016-05-02 时，玩游戏的总次数为 5+6=11， 在2017-06-25 时，玩游戏的总次数为 5+6+1=12。</p></blockquote><p>输出结果如下：</p><table><thead><tr><th>player_id</th><th>event_date</th><th>games_played_so_far</th></tr></thead><tbody><tr><td>1</td><td>2016-03-01</td><td>5</td></tr><tr><td>1</td><td>2016-05-02</td><td>11</td></tr><tr><td>1</td><td>2017-06-25</td><td>12</td></tr><tr><td>3</td><td>2016-03-02</td><td>0</td></tr><tr><td>3</td><td>2018-07-03</td><td>5</td></tr></tbody></table><p>答案： </p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">    player_id,</span><br><span class="line">    to_char(event_date, <span class="string">'yyyy-mm-dd'</span>) <span class="keyword">as</span> event_date,</span><br><span class="line">    <span class="built_in">sum</span>(games_played) <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> player_id <span class="keyword">order</span> <span class="keyword">by</span> event_date) games_played_so_far</span><br><span class="line"><span class="keyword">from</span> activity</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> a.player_id ,a.event_date,(<span class="keyword">case</span> <span class="keyword">when</span> <span class="variable">@player</span>_id<span class="operator">=</span>a.player_id <span class="keyword">then</span> <span class="variable">@value</span>:<span class="operator">=</span><span class="variable">@value</span><span class="operator">+</span>a.games_played <span class="keyword">when</span> <span class="variable">@player</span>_id:<span class="operator">=</span>a.player_id <span class="keyword">then</span> <span class="variable">@value</span>:<span class="operator">=</span>a.games_played <span class="keyword">end</span> ) <span class="keyword">as</span> games_played_so_far <span class="keyword">from</span> (<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> Activity <span class="keyword">order</span> <span class="keyword">by</span> player_id,event_date) a, (<span class="keyword">select</span> <span class="variable">@player</span>_id:<span class="operator">=</span><span class="keyword">Null</span>,<span class="variable">@value</span>:<span class="operator">=</span><span class="number">0</span>)s</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><hr><h1 id="游戏分析4"><a href="#游戏分析4" class="headerlink" title="游戏分析4"></a>游戏分析4</h1><p>表： Activity</p><table><thead><tr><th>player_id</th><th>device_id</th><th>event_date</th><th>games_played</th></tr></thead><tbody><tr><td>1</td><td>2</td><td>2016-03-01</td><td>5</td></tr><tr><td>1</td><td>2</td><td>2016-03-02</td><td>6</td></tr><tr><td>2</td><td>3</td><td>2017-06-25</td><td>1</td></tr><tr><td>3</td><td>1</td><td>2016-03-02</td><td>0</td></tr><tr><td>3</td><td>4</td><td>2018-07-03</td><td>5</td></tr></tbody></table><p>要求： 查询在首次登陆后第二天再次登陆的玩家比例， 四舍五入到小数点后两位。 换句话说： 你需要计算从首次登陆日期开始至少连续两天登陆的玩家数量， 然后将该数量除以玩家总数。</p><p>输出结果如下：</p><table><thead><tr><th>fraction</th></tr></thead><tbody><tr><td>0.33</td></tr></tbody></table><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--- 错误</span></span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">  <span class="built_in">CAST</span>( <span class="built_in">count</span>(b.player_id) <span class="operator">/</span> <span class="built_in">count</span>(<span class="keyword">distinct</span> a.player_id)  <span class="keyword">as</span> <span class="type">decimal</span>(<span class="number">38</span>, <span class="number">2</span>))  <span class="keyword">as</span> fraction</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    Activity <span class="keyword">as</span> a</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> </span><br><span class="line">    Activity <span class="keyword">as</span> b</span><br><span class="line">    <span class="keyword">on</span> a.player_id <span class="operator">=</span> b.player_id <span class="keyword">and</span> a.event_date <span class="operator">=</span> b.event_date<span class="operator">+</span><span class="number">1</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">    round(<span class="built_in">count</span>(if(datediff(a2.event_date ,a1.event_date )<span class="operator">=</span><span class="number">1</span>,<span class="number">1</span>,<span class="keyword">null</span>))<span class="operator">/</span><span class="built_in">count</span>(<span class="keyword">distinct</span> a1.player_id ),<span class="number">2</span>)  <span class="keyword">as</span> fraction</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    Activity a1, Activity a2</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">    a1.player_id <span class="operator">=</span>a2.player_id </span><br><span class="line">    <span class="keyword">and</span></span><br><span class="line">    (a1.player_id,a1.event_date) <span class="keyword">in</span> (</span><br><span class="line">            <span class="keyword">select</span> </span><br><span class="line">                player_id ,</span><br><span class="line">                <span class="built_in">min</span>(event_date) event_date </span><br><span class="line">            <span class="keyword">from</span> </span><br><span class="line">                Activity a3</span><br><span class="line">            <span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line">                player_id )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><hr><h1 id="求中位数"><a href="#求中位数" class="headerlink" title="求中位数"></a>求中位数</h1><p>表： Employee </p><table><thead><tr><th>Id</th><th>Company</th><th>Salary</th></tr></thead><tbody><tr><td>1</td><td>A</td><td>2341</td></tr><tr><td>2</td><td>A</td><td>341</td></tr><tr><td>3</td><td>A</td><td>15</td></tr><tr><td>4</td><td>A</td><td>15314</td></tr><tr><td>5</td><td>A</td><td>451</td></tr><tr><td>6</td><td>A</td><td>513</td></tr><tr><td>7</td><td>B</td><td>15</td></tr><tr><td>8</td><td>B</td><td>13</td></tr><tr><td>9</td><td>B</td><td>1154</td></tr><tr><td>10</td><td>B</td><td>1345</td></tr><tr><td>11</td><td>B</td><td>1221</td></tr><tr><td>12</td><td>B</td><td>234</td></tr><tr><td>13</td><td>C</td><td>2345</td></tr><tr><td>14</td><td>C</td><td>2645</td></tr><tr><td>15</td><td>C</td><td>2645</td></tr><tr><td>16</td><td>C</td><td>2652</td></tr><tr><td>17</td><td>C</td><td>65</td></tr></tbody></table><p>要求：查找每个公司的薪水中位数</p><table><thead><tr><th>Id</th><th>Company</th><th>Salary</th></tr></thead><tbody><tr><td>5</td><td>A</td><td>451</td></tr><tr><td>6</td><td>A</td><td>513</td></tr><tr><td>12</td><td>B</td><td>234</td></tr><tr><td>9</td><td>B</td><td>1154</td></tr><tr><td>14</td><td>C</td><td>2645</td></tr></tbody></table><p>答案：<br><a href="https://www.cnblogs.com/jxlwqq/p/5868206.html">https://www.cnblogs.com/jxlwqq/p/5868206.html</a><br><a href="https://www.oschina.net/translate/how-to-calculate-median-value-in-mysql-using-a-simple-sql-query">https://www.oschina.net/translate/how-to-calculate-median-value-in-mysql-using-a-simple-sql-query</a></p><ol><li>进行排序<figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">    Id,</span><br><span class="line">    Company,</span><br><span class="line">    Salary,</span><br><span class="line">    <span class="built_in">ROW_NUMBER</span> ( ) <span class="keyword">OVER</span> (<span class="keyword">PARTITION</span> <span class="keyword">BY</span> Company  <span class="keyword">order</span> <span class="keyword">by</span>  Salary) <span class="keyword">as</span> rank_name,</span><br><span class="line">    <span class="built_in">count</span>(<span class="number">1</span>) <span class="keyword">over</span> (<span class="keyword">partition</span> <span class="keyword">by</span> company) <span class="keyword">as</span> num</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    Employee</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></li></ol><p>|Id|Company|Salary|rank_name|num|<br>|—–|——|——–|—–|<br>|3|A|15|1|6|<br>|2|A|341|2|6|<br>|5|A|451|3|6|<br>|6|A|513|4|6|<br>|1|A|2341|5|6|<br>|4|A|15314|6|6|<br>|8|B|13|1|6|<br>|7|B|15|2|6|<br>|12|B|234|3|6|<br>|9|B|1154|4|6|<br>|11|B|1221|5|6|<br>|10|B|1345|6|6|<br>|17|C|65|1|6|<br>|13|C|2345|2|6|<br>|14|C|2645|3|6|<br>|15|C|2645|4|6|<br>|16|C|2652|5|6|</p><ol start="2"><li>找到中位数</li></ol><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">id, company, salary</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">(<span class="keyword">select</span></span><br><span class="line">id, company, salary,</span><br><span class="line"><span class="built_in">row_number</span>() <span class="keyword">over</span> (<span class="keyword">partition</span> <span class="keyword">by</span> company <span class="keyword">order</span> <span class="keyword">by</span> salary) <span class="keyword">as</span> rank_name,</span><br><span class="line"><span class="built_in">count</span>(<span class="number">1</span>) <span class="keyword">over</span> (<span class="keyword">partition</span> <span class="keyword">by</span> company) <span class="keyword">as</span> num </span><br><span class="line"><span class="keyword">from</span> employee</span><br><span class="line">)</span><br><span class="line"><span class="keyword">where</span> <span class="built_in">abs</span>(rank_name <span class="operator">-</span> (num<span class="operator">+</span><span class="number">1</span>)<span class="operator">/</span><span class="number">2</span>) <span class="operator">&lt;</span> <span class="number">1</span> <span class="comment">-- 顺序编号在公司薪水记录数中间的，即为中位数</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><hr><h1 id="查找至少有5名直接下属的经理"><a href="#查找至少有5名直接下属的经理" class="headerlink" title="查找至少有5名直接下属的经理"></a>查找至少有5名直接下属的经理</h1><p>表：Employee</p><table><thead><tr><th>Id</th><th>Name</th><th>Department</th><th>ManagerId</th></tr></thead><tbody><tr><td>101</td><td>John</td><td>A</td><td>null</td></tr><tr><td>102</td><td>Dan</td><td>A</td><td>101</td></tr><tr><td>103</td><td>James</td><td>A</td><td>101</td></tr><tr><td>104</td><td>Amy</td><td>A</td><td>101</td></tr><tr><td>105</td><td>Anne</td><td>A</td><td>101</td></tr><tr><td>106</td><td>Ron</td><td>B</td><td>101</td></tr></tbody></table><p>要求： 查询来查找至少有5名直接下属的经理</p><p>输出结果为： </p><table><thead><tr><th>Name</th></tr></thead><tbody><tr><td>John</td></tr></tbody></table><p>答案：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">    a2.Name</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    Employee a1 <span class="keyword">join</span> Employee a2</span><br><span class="line"><span class="keyword">on</span> a1.ManagerId <span class="operator">=</span> a2.Id</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line">    a1.ManagerId</span><br><span class="line"><span class="keyword">having</span> </span><br><span class="line">    <span class="built_in">count</span>(<span class="operator">*</span>) <span class="operator">&gt;=</span><span class="number">5</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><hr><h1 id="给定数字的频率查中位数"><a href="#给定数字的频率查中位数" class="headerlink" title="给定数字的频率查中位数"></a>给定数字的频率查中位数</h1><p>表： Numbers</p><table><thead><tr><th>Number</th><th>Frequency</th></tr></thead><tbody><tr><td>0</td><td>7</td></tr><tr><td>1</td><td>1</td></tr><tr><td>2</td><td>3</td></tr><tr><td>3</td><td>1</td></tr></tbody></table><p>要求： 数字为 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 3，所以中位数是 (0 + 0) / 2 = 0，输出结果如下</p><table><thead><tr><th>median</th></tr></thead><tbody><tr><td>0.0000</td></tr></tbody></table><p>答案：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">avg</span>(n2.number) median</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">(</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">min</span>(n.number) number</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">(<span class="keyword">select</span> number, frequency, (<span class="variable">@cumsum</span>:<span class="operator">=</span><span class="variable">@cumsum</span><span class="operator">+</span>frequency) <span class="string">'cumsum'</span></span><br><span class="line"><span class="keyword">from</span> numbers ,(<span class="keyword">select</span> <span class="variable">@cumsum</span>:<span class="operator">=</span><span class="number">0</span>) temp </span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> number)  n</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">n.cumsum <span class="operator">&gt;=</span> (<span class="built_in">floor</span>(((<span class="keyword">SELECT</span> <span class="built_in">SUM</span>(frequency) <span class="keyword">FROM</span> numbers) <span class="operator">+</span><span class="number">1</span> ) <span class="operator">/</span> <span class="number">2</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">union</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">min</span>(n1.number) number</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">(<span class="keyword">select</span> number, frequency, (<span class="variable">@cumsum1</span>:<span class="operator">=</span><span class="variable">@cumsum1</span><span class="operator">+</span>frequency) <span class="string">'cumsum'</span></span><br><span class="line"><span class="keyword">from</span> numbers ,(<span class="keyword">select</span> <span class="variable">@cumsum1</span>:<span class="operator">=</span><span class="number">0</span>) temp </span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> number)  n1</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">n1.cumsum <span class="operator">&gt;=</span> (<span class="built_in">ceil</span>(((<span class="keyword">SELECT</span> <span class="built_in">SUM</span>(frequency) <span class="keyword">FROM</span> numbers) <span class="operator">+</span><span class="number">1</span> ) <span class="operator">/</span> <span class="number">2</span>))) n2;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><hr><h1 id="找出当选最多的人名称"><a href="#找出当选最多的人名称" class="headerlink" title="找出当选最多的人名称"></a>找出当选最多的人名称</h1><p>表： Candidate</p><table><thead><tr><th>id</th><th>Name</th></tr></thead><tbody><tr><td>1</td><td>A</td></tr><tr><td>2</td><td>B</td></tr><tr><td>3</td><td>C</td></tr><tr><td>4</td><td>D</td></tr><tr><td>5</td><td>E</td></tr></tbody></table><p>表： Vote</p><table><thead><tr><th>id</th><th>CandidateId</th></tr></thead><tbody><tr><td>1</td><td>2</td></tr><tr><td>2</td><td>4</td></tr><tr><td>3</td><td>3</td></tr><tr><td>4</td><td>2</td></tr><tr><td>5</td><td>5</td></tr></tbody></table><blockquote><p>表 <code>Candidate</code> 为候选人名称表， 表 <code>Vote</code> 中<code>CandidateId</code> 是 <code>Candidate </code>表中的 <code>id</code>。</p></blockquote><p>要求： 找出当选者的名称，返回结果为当选者<code>B</code>。输出结果如下：<br>| Name |<br>|——|<br>| B    |</p><p>答案：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">    Name</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    Candidate</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">    id <span class="operator">=</span> (</span><br><span class="line">        <span class="keyword">select</span></span><br><span class="line">            CandidateId</span><br><span class="line">        <span class="keyword">from</span></span><br><span class="line">            Vote</span><br><span class="line">        <span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line">            CandidateId</span><br><span class="line">        <span class="keyword">order</span> <span class="keyword">by</span> </span><br><span class="line">            <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">DESC</span> </span><br><span class="line">        LIMIT <span class="number">1</span></span><br><span class="line">    )</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h1 id="选出所有-bonus-lt-1000的员工的-name-以及-bonus"><a href="#选出所有-bonus-lt-1000的员工的-name-以及-bonus" class="headerlink" title="选出所有 bonus < 1000的员工的 name 以及 bonus"></a>选出所有 bonus &lt; 1000的员工的 name 以及 bonus</h1><p>表：Employee</p><table><thead><tr><th>empId</th><th>name</th><th>supervisor</th><th>salary</th></tr></thead><tbody><tr><td>1</td><td>John</td><td>3</td><td>1000</td></tr><tr><td>2</td><td>Dan</td><td>3</td><td>2000</td></tr><tr><td>3</td><td>Brad</td><td>null</td><td>4000</td></tr><tr><td>4</td><td>Thomas</td><td>3</td><td>4000</td></tr></tbody></table><p>表：Bonus</p><table><thead><tr><th>empId</th><th>bonus</th></tr></thead><tbody><tr><td>2</td><td>500</td></tr><tr><td>4</td><td>2000</td></tr></tbody></table><p>要求： 选出所有 bonus &lt; 1000的员工的 name 以及 bonus。输出结果如下</p><table><thead><tr><th>name</th><th>bonus</th></tr></thead><tbody><tr><td>John</td><td>null</td></tr><tr><td>Dan</td><td>500</td></tr><tr><td>Brad</td><td>null</td></tr></tbody></table><p>答案：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">    a1.name,</span><br><span class="line">    a2.bonus</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    Employee <span class="keyword">as</span> a1</span><br><span class="line">    <span class="keyword">left</span> <span class="keyword">join</span> Bonus <span class="keyword">as</span> a2</span><br><span class="line">    <span class="keyword">on</span> a1.empid <span class="operator">=</span> a2.empid </span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">    ifnull (bonus, <span class="number">0</span>) <span class="operator">&lt;</span> <span class="number">1000</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">    a1.name,</span><br><span class="line">    a2.bonus</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    Employee <span class="keyword">as</span> a1</span><br><span class="line">    <span class="keyword">left</span> <span class="keyword">join</span> Bonus <span class="keyword">as</span> a2</span><br><span class="line">    <span class="keyword">on</span> a1.empid <span class="operator">=</span> a2.empid </span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">    nvl (bonus, <span class="number">0</span>) <span class="operator">&lt;</span> <span class="number">1000</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h1 id="谁有最多的好友"><a href="#谁有最多的好友" class="headerlink" title="谁有最多的好友"></a>谁有最多的好友</h1><p>表： request_accepted </p><blockquote><p>表中存储了所有好友申请通过的数据记录，其中，requester_id 和 accepter_id 都是用户的编号。</p></blockquote><table><thead><tr><th>requester_id</th><th>accepter_id</th><th>accept_date</th></tr></thead><tbody><tr><td>1</td><td>2</td><td>2016_06-03</td></tr><tr><td>1</td><td>3</td><td>2016-06-08</td></tr><tr><td>2</td><td>3</td><td>2016-06-08</td></tr><tr><td>3</td><td>4</td><td>2016-06-09</td></tr></tbody></table><p>要求： 求出谁拥有最多的好友和他拥有的好友数目。输出结果如下</p><table><thead><tr><th>id</th><th>num</th></tr></thead><tbody><tr><td>3</td><td>3</td></tr></tbody></table><p>答案：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> id <span class="keyword">as</span> id, ucnt <span class="keyword">as</span> num</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">(</span><br><span class="line">    <span class="keyword">select</span> id, <span class="built_in">count</span>(<span class="number">1</span>) <span class="keyword">as</span> ucnt</span><br><span class="line">    <span class="keyword">from</span></span><br><span class="line">    (</span><br><span class="line">        <span class="keyword">select</span> requester_id <span class="keyword">as</span> id <span class="keyword">from</span> request_accepted</span><br><span class="line">        <span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line">        <span class="keyword">select</span> accepter_id <span class="keyword">as</span> id <span class="keyword">from</span> request_accepted</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span> id</span><br><span class="line">    <span class="keyword">order</span> <span class="keyword">by</span> ucnt <span class="keyword">desc</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">where</span> rownum <span class="operator">=</span> <span class="number">1</span></span><br></pre></td></tr></tbody></table></figure><h1 id="找出人流量的高峰期"><a href="#找出人流量的高峰期" class="headerlink" title="找出人流量的高峰期"></a>找出人流量的高峰期</h1><p>表：stadium</p><table><thead><tr><th>id</th><th>visit_date</th><th>people</th></tr></thead><tbody><tr><td>1</td><td>2017-01-01</td><td>10</td></tr><tr><td>2</td><td>2017-01-02</td><td>109</td></tr><tr><td>3</td><td>2017-01-03</td><td>150</td></tr><tr><td>4</td><td>2017-01-04</td><td>99</td></tr><tr><td>5</td><td>2017-01-05</td><td>145</td></tr><tr><td>6</td><td>2017-01-06</td><td>1455</td></tr><tr><td>7</td><td>2017-01-07</td><td>199</td></tr><tr><td>8</td><td>2017-01-08</td><td>188</td></tr></tbody></table><p>要求： 找出人流量的高峰期。高峰期时， 至少连续三行记录中的人流量不少于100。得出结果如下</p><table><thead><tr><th>id</th><th>visit_date</th><th>people</th></tr></thead><tbody><tr><td>5</td><td>2017-01-05</td><td>145</td></tr><tr><td>6</td><td>2017-01-06</td><td>1455</td></tr><tr><td>7</td><td>2017-01-07</td><td>199</td></tr><tr><td>8</td><td>2017-01-08</td><td>188</td></tr></tbody></table><p>答案：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">distinct</span> a.<span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> stadium <span class="keyword">as</span> a,stadium <span class="keyword">as</span> b,stadium <span class="keyword">as</span> c</span><br><span class="line"><span class="keyword">where</span> ((a.id <span class="operator">=</span> b.id<span class="number">-1</span> <span class="keyword">and</span> b.id<span class="operator">+</span><span class="number">1</span> <span class="operator">=</span> c.id) <span class="keyword">or</span></span><br><span class="line">       (a.id<span class="number">-1</span> <span class="operator">=</span> b.id <span class="keyword">and</span> a.id<span class="operator">+</span><span class="number">1</span> <span class="operator">=</span> c.id) <span class="keyword">or</span></span><br><span class="line">       (a.id<span class="number">-1</span> <span class="operator">=</span> c.id <span class="keyword">and</span> c.id<span class="number">-1</span> <span class="operator">=</span> b.id))</span><br><span class="line">  <span class="keyword">and</span> (a.people<span class="operator">&gt;=</span><span class="number">100</span> <span class="keyword">and</span> b.people<span class="operator">&gt;=</span><span class="number">100</span> <span class="keyword">and</span> c.people<span class="operator">&gt;=</span><span class="number">100</span>)</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> a.id;</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">id, to_char(visit_date, <span class="string">'yyyy-mm-dd'</span>) <span class="keyword">as</span> visit_date, people</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">(<span class="keyword">select</span></span><br><span class="line">id, visit_date, people,</span><br><span class="line"><span class="built_in">count</span>(<span class="number">1</span>) <span class="keyword">over</span> (<span class="keyword">partition</span> <span class="keyword">by</span> <span class="keyword">offset</span>) cnt</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">(<span class="keyword">select</span></span><br><span class="line">id, visit_date, people,</span><br><span class="line">(<span class="built_in">row_number</span>() <span class="keyword">over</span> (<span class="keyword">order</span> <span class="keyword">by</span> id) <span class="operator">-</span> id) <span class="keyword">offset</span></span><br><span class="line"><span class="keyword">from</span> stadium</span><br><span class="line"><span class="keyword">where</span> people <span class="operator">&gt;=</span> <span class="number">100</span></span><br><span class="line">)</span><br><span class="line">)</span><br><span class="line"><span class="keyword">where</span> cnt <span class="operator">&gt;=</span> <span class="number">3</span>   <span class="comment">-- 连续 3 天（及以上）</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> id</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><hr><h1 id="预约连续空余座位"><a href="#预约连续空余座位" class="headerlink" title="预约连续空余座位"></a>预约连续空余座位</h1><p>表：cinema</p><table><thead><tr><th>seat_id</th><th>free</th></tr></thead><tbody><tr><td>1</td><td>1</td></tr><tr><td>2</td><td>0</td></tr><tr><td>3</td><td>1</td></tr><tr><td>4</td><td>1</td></tr><tr><td>5</td><td>1</td></tr></tbody></table><p>要求：获取所有空余座位，并将它们按照 seat_id 排序。输出结果如下</p><blockquote><p>连续空余座位的定义是大于等于 2 个连续空余的座位。1 表示空余，0 表示已被占据。</p></blockquote><table><thead><tr><th>seat_id</th></tr></thead><tbody><tr><td>3</td></tr><tr><td>4</td></tr><tr><td>5</td></tr></tbody></table><p>答案：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">    seat_id</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">(</span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">    seat_id,</span><br><span class="line">    <span class="built_in">count</span>(<span class="number">1</span>) <span class="keyword">over</span> (<span class="keyword">partition</span> <span class="keyword">by</span> num) <span class="keyword">as</span> cum</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">( </span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">    seat_id,</span><br><span class="line">    (<span class="built_in">row_number</span>() <span class="keyword">over</span> (<span class="keyword">order</span> <span class="keyword">by</span> seat_id) <span class="operator">-</span> seat_id) <span class="keyword">as</span> num</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    cinema</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">    <span class="keyword">free</span> <span class="operator">=</span> <span class="number">1</span>))</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">    cum <span class="operator">&gt;=</span> <span class="number">2</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> </span><br><span class="line">    seat_id</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><hr><h1 id="找出符合条件的电影"><a href="#找出符合条件的电影" class="headerlink" title="找出符合条件的电影"></a>找出符合条件的电影</h1><p>表：cinema</p><table><thead><tr><th>id</th><th>movie</th><th>description</th><th>rating</th></tr></thead><tbody><tr><td>1</td><td>War</td><td>great 3D</td><td>8.9</td></tr><tr><td>2</td><td>Science</td><td>fiction</td><td>8.5</td></tr><tr><td>3</td><td>irish</td><td>boring</td><td>6.2</td></tr><tr><td>4</td><td>Ice song</td><td>Fantacy</td><td>8.6</td></tr><tr><td>5</td><td>House card</td><td>Interesting</td><td>9.1</td></tr></tbody></table><p>要求： 找出所有影片描述为非 boring (不无聊) 的并且 id 为奇数 的影片，结果请按等级 rating 排列。输出结果如下</p><table><thead><tr><th>id</th><th>movie</th><th>description</th><th>rating</th></tr></thead><tbody><tr><td>5</td><td>House card</td><td>Interesting</td><td>9.1</td></tr><tr><td>1</td><td>War</td><td>great 3D</td><td>8.9</td></tr></tbody></table><p>答案1：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">     <span class="operator">*</span></span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    cinema</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">     <span class="built_in">mod</span>(id, <span class="number">2</span>) <span class="operator">=</span> <span class="number">1</span> </span><br><span class="line">     <span class="keyword">and</span> </span><br><span class="line">     description <span class="operator">!=</span> <span class="string">'boring'</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> </span><br><span class="line">    rating <span class="keyword">DESC</span></span><br></pre></td></tr></tbody></table></figure><p>答案2：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">    <span class="operator">*</span></span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    cinema</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">   description <span class="operator">!=</span> <span class="string">'boring'</span></span><br><span class="line">   <span class="keyword">and</span></span><br><span class="line">   id <span class="operator">%</span> <span class="number">2</span> <span class="operator">!=</span><span class="number">0</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> </span><br><span class="line">    rating <span class="keyword">DESC</span> </span><br></pre></td></tr></tbody></table></figure><hr><h1 id=""><a href="#" class="headerlink" title=""></a></h1><p>表：Sales</p><table><thead><tr><th>sale_id</th><th>product_id</th><th>year</th><th>quantity</th><th>price</th></tr></thead><tbody><tr><td>1</td><td>100</td><td>2008</td><td>10</td><td>5000</td></tr><tr><td>2</td><td>100</td><td>2009</td><td>12</td><td>5000</td></tr><tr><td>7</td><td>200</td><td>2011</td><td>15</td><td>9000</td></tr></tbody></table><p>表：Product</p><table><thead><tr><th>product_id</th><th>product_name</th></tr></thead><tbody><tr><td>100</td><td>Nokia</td></tr><tr><td>200</td><td>Apple</td></tr><tr><td>300</td><td>Samsung</td></tr></tbody></table><p>要求： 编写sql查询， 选择每个销售产品的第一年的数据， 输出结果如下</p><table><thead><tr><th>product_id</th><th>first_year</th><th>quantity</th><th>price</th></tr></thead><tbody><tr><td>100</td><td>2008</td><td>10</td><td>5000</td></tr><tr><td>200</td><td>2011</td><td>15</td><td>9000</td></tr></tbody></table><p>答案：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">    product_id,</span><br><span class="line">    <span class="keyword">year</span>  <span class="keyword">as</span> first_year,</span><br><span class="line">    quantity,</span><br><span class="line">    price</span><br><span class="line"><span class="keyword">from</span> (</span><br><span class="line">    <span class="keyword">select</span> </span><br><span class="line">        product_id,</span><br><span class="line">        <span class="keyword">year</span>,</span><br><span class="line">        quantity,price,</span><br><span class="line">        <span class="built_in">rank</span>() <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> product_id <span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">year</span>) rn</span><br><span class="line">    <span class="keyword">from</span> </span><br><span class="line">        sales)</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">    rn<span class="operator">=</span><span class="number">1</span></span><br></pre></td></tr></tbody></table></figure><h1 id="找到购买所有产品的顾客"><a href="#找到购买所有产品的顾客" class="headerlink" title="找到购买所有产品的顾客"></a>找到购买所有产品的顾客</h1><p>表1： customer</p><table><thead><tr><th>customer_id</th><th>product_key</th></tr></thead><tbody><tr><td>1</td><td>5</td></tr><tr><td>2</td><td>6</td></tr><tr><td>3</td><td>5</td></tr><tr><td>3</td><td>6</td></tr><tr><td>1</td><td>6</td></tr></tbody></table><p>表2： product</p><p>| product_key |<br>+————-+<br>| 5           |<br>| 6           |</p><p>要求：  找出从 customer 表中购买了 product 表所有产品的客户id。 输出结果如下</p><table><thead><tr><th>customer_id</th></tr></thead><tbody><tr><td>1</td></tr><tr><td>3</td></tr></tbody></table><p>答案：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">    customer_id</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    customer</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line">    customer_id</span><br><span class="line"><span class="keyword">having</span> </span><br><span class="line">    <span class="built_in">count</span>(<span class="keyword">distinct</span> product_key) <span class="operator">=</span></span><br><span class="line">    (<span class="keyword">select</span> </span><br><span class="line">        <span class="built_in">count</span>(<span class="keyword">distinct</span> product_key)</span><br><span class="line">    <span class="keyword">from</span> </span><br><span class="line">        product )</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">    customer_id</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    (<span class="keyword">select</span> </span><br><span class="line">        customer_id, <span class="built_in">count</span>(<span class="keyword">distinct</span> product_key) <span class="keyword">as</span> num </span><br><span class="line">    <span class="keyword">from</span> </span><br><span class="line">        customer</span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line">        customer_id) <span class="keyword">as</span> a1</span><br><span class="line"><span class="keyword">join</span> (</span><br><span class="line">    <span class="keyword">select</span></span><br><span class="line">        <span class="built_in">count</span>(product_key) <span class="keyword">as</span> num</span><br><span class="line">    <span class="keyword">from</span></span><br><span class="line">        product</span><br><span class="line">) <span class="keyword">as</span> a2</span><br><span class="line"><span class="keyword">on</span> a1.num <span class="operator">=</span> a2.num</span><br></pre></td></tr></tbody></table></figure><hr><h1 id="查询关注者的关注数据"><a href="#查询关注者的关注数据" class="headerlink" title="查询关注者的关注数据"></a>查询关注者的关注数据</h1><p>表：follow</p><table><thead><tr><th>followee (博主)</th><th>follower(关注者)</th></tr></thead><tbody><tr><td>A</td><td>B</td></tr><tr><td>B</td><td>C</td></tr><tr><td>B</td><td>D</td></tr><tr><td>D</td><td>E</td></tr></tbody></table><p>要求： 查询每个关注者， 被多少人关注。 输出结果如下：</p><table><thead><tr><th>follower</th><th>num</th></tr></thead><tbody><tr><td>B</td><td>2</td></tr><tr><td>D</td><td>1</td></tr></tbody></table><blockquote><p>B 和 D 都在在&nbsp;follower&nbsp;字段中出现，作为博主，B 被 C 和 D 关注，D 被 E 关注。A 不在 follower&nbsp;字段内，所以A不在输出列表中。</p></blockquote><p>答案：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">    f1.follower, </span><br><span class="line">    <span class="built_in">count</span>(<span class="keyword">distinct</span> f2.follower) <span class="keyword">as</span> num</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    follow f1</span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span></span><br><span class="line">    follow f2</span><br><span class="line">    <span class="keyword">on</span> f1.follower <span class="operator">=</span> f2.followee</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line">    f1.follower</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span>   </span><br><span class="line">    f1.follower</span><br></pre></td></tr></tbody></table></figure><hr><h1 id="如何用python操作mysql"><a href="#如何用python操作mysql" class="headerlink" title="如何用python操作mysql"></a>如何用python操作mysql</h1><p>步骤</p><ol><li>安装 mysql-connector</li></ol><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install mysql-connector</span><br></pre></td></tr></tbody></table></figure><ol start="2"><li> 连接数据库<blockquote><p>通过 connection 对数据库的连接进行管理， 通过 cursor 创建游标对数据库中的数据进行操作。 </p></blockquote></li></ol><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> mysql.connector</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建数据库连接</span></span><br><span class="line"></span><br><span class="line">db = mysql.connector.connect(</span><br><span class="line">    host=<span class="string">'ip地址'</span>,</span><br><span class="line">    user = <span class="string">"root"</span>, </span><br><span class="line">    passwd = <span class="string">"1234"</span>, <span class="comment"># 数据库密码</span></span><br><span class="line">    database = <span class="string">'default'</span>, <span class="comment"># 连接的数据库</span></span><br><span class="line">    auth_plugin = <span class="string">'mysql_native_password" )</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 获取操作游标</span></span><br><span class="line"><span class="string">cursor = db.cursor()</span></span><br></pre></td></tr></tbody></table></figure><ol start="3"><li>编写sql语句</li></ol><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 输出sql 语句</span></span><br><span class="line">sql = <span class="string">"""select</span></span><br><span class="line"><span class="string">     btn_name</span></span><br><span class="line"><span class="string">from </span></span><br><span class="line"><span class="string">    cinema</span></span><br><span class="line"><span class="string">where</span></span><br><span class="line"><span class="string">    hit_date = "2019-07-26"</span></span><br><span class="line"><span class="string">    """</span></span><br></pre></td></tr></tbody></table></figure><ol start="4"><li>执行sql语句并返回结果</li></ol><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 执行sql语句</span></span><br><span class="line">cursor.execute(sql)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取数据集中的所有行</span></span><br><span class="line">cursor.fetchall()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取数据中的第一行</span></span><br><span class="line"><span class="comment"># cursor.fetchone()</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取数据集中的n条数据</span></span><br><span class="line"><span class="comment"># cursor.fetchmany(n)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回数据集中中的行数</span></span><br><span class="line"><span class="comment"># cursor.rowcount</span></span><br></pre></td></tr></tbody></table></figure><ol start="5"><li>关闭游标和数据库连接</li></ol><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 关闭游标</span></span><br><span class="line">cursor.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭数据连接</span></span><br><span class="line">db.close()</span><br></pre></td></tr></tbody></table></figure><ol start="6"><li>延伸： 捕获异常信息。<blockquote><p>在对数据进行增加、删除和修改时， 可能会出现异常，需要对异常数据进行捕获。</p></blockquote></li></ol><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> traceback</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    sql = <span class="string">"""INSER INTO player (team_id, player_name, height) VALUES (%s, %s, %s)"""</span></span><br><span class="line">    val = (<span class="number">1000</span>, <span class="string">"zhangyu"</span>, <span class="number">1.95</span>)</span><br><span class="line">    <span class="comment"># 执行sql语句</span></span><br><span class="line">    cursor.execute(sql, val)</span><br><span class="line">    <span class="comment"># 进行提交</span></span><br><span class="line">    db.commit()</span><br><span class="line">    <span class="built_in">print</span>(cursor.rowcount, <span class="string">"记录插入成功。"</span>)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    <span class="comment"># 打印异常信息</span></span><br><span class="line">    traceback.print_exc()</span><br><span class="line">    <span class="comment"># 回滚</span></span><br><span class="line">    db.rollback()</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    <span class="comment"># 关闭数据库连接</span></span><br><span class="line">    db.close()</span><br></pre></td></tr></tbody></table></figure><p>参考资料： 极客时间-sql必知必会</p><hr><h1 id="求出每个项目中经验最丰富的员工"><a href="#求出每个项目中经验最丰富的员工" class="headerlink" title="求出每个项目中经验最丰富的员工"></a>求出每个项目中经验最丰富的员工</h1><p>表：Project table</p><table><thead><tr><th>project_id</th><th>employee_id</th></tr></thead><tbody><tr><td>1</td><td>1</td></tr><tr><td>1</td><td>2</td></tr><tr><td>1</td><td>3</td></tr><tr><td>2</td><td>1</td></tr><tr><td>2</td><td>4</td></tr></tbody></table><p>表：Employee table</p><table><thead><tr><th>employee_id</th><th>name</th><th>experience_years</th></tr></thead><tbody><tr><td>1</td><td>Khaled</td><td>3</td></tr><tr><td>2</td><td>Ali</td><td>2</td></tr><tr><td>3</td><td>John</td><td>3</td></tr><tr><td>4</td><td>Doe</td><td>2</td></tr></tbody></table><p>要求： 求出每个项目中经验最丰富的员工， 输出结果如下</p><blockquote><p>ID为1和3的员工，在第一个项目中拥有最丰富的经验， 对于第二个项目， ID为1的员工拥有最丰富的经验</p></blockquote><table><thead><tr><th>project_id</th><th>employee_id</th></tr></thead><tbody><tr><td>1</td><td>1</td></tr><tr><td>1</td><td>3</td></tr><tr><td>2</td><td>1</td></tr></tbody></table><p>答案：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">    project_id,</span><br><span class="line">    employee_id</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    (<span class="keyword">select</span></span><br><span class="line">        p.project_id,</span><br><span class="line">        e.employee_id,</span><br><span class="line">        <span class="built_in">rank</span>() <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> p.project_id <span class="keyword">order</span> <span class="keyword">by</span> e.experience_years <span class="keyword">desc</span>) rn</span><br><span class="line">    <span class="keyword">from</span> project p, employee e</span><br><span class="line">    <span class="keyword">where</span> p.employee_id <span class="operator">=</span> e.employee_id)</span><br><span class="line"><span class="keyword">where</span> rn <span class="operator">=</span> <span class="number">1</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><hr><hr><h1 id="求所有员工的平均工作经验，保留2位小数。"><a href="#求所有员工的平均工作经验，保留2位小数。" class="headerlink" title="求所有员工的平均工作经验，保留2位小数。"></a>求所有员工的平均工作经验，保留2位小数。</h1><p>表： Project </p><table><thead><tr><th>project_id</th><th>employee_id</th></tr></thead><tbody><tr><td>1</td><td>1</td></tr><tr><td>1</td><td>2</td></tr><tr><td>1</td><td>3</td></tr><tr><td>2</td><td>1</td></tr><tr><td>2</td><td>4</td></tr><tr><td>+————-+————-+</td><td></td></tr></tbody></table><p>表：Employee </p><table><thead><tr><th>employee_id</th><th>name</th><th>experience_years</th></tr></thead><tbody><tr><td>1</td><td>Khaled</td><td>3</td></tr><tr><td>2</td><td>Ali</td><td>2</td></tr><tr><td>3</td><td>John</td><td>1</td></tr><tr><td>4</td><td>Doe</td><td>2</td></tr></tbody></table><p>要求： 求每个部门所有员工的平均工作年限， 保留两位小数。输出结果如下</p><blockquote><p>第一个项目的平均工作年限为（3+2+1）/ 3 = 2.00<br>第二个项目的平均工作年限为（3+2）/ 2 = 2.50</p></blockquote><table><thead><tr><th>project_id</th><th>average_years</th></tr></thead><tbody><tr><td>1</td><td>2.00</td></tr><tr><td>2</td><td>2.50</td></tr></tbody></table><p>答案1：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">     project_id,</span><br><span class="line">     round(<span class="built_in">avg</span>(experience_years),<span class="number">2</span>) <span class="keyword">as</span> average_years</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    Project, Employee</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">    Project.employee_id <span class="operator">=</span> Employee.employee_id</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line">    project_id</span><br></pre></td></tr></tbody></table></figure><hr><h1 id="查询每个专业的学生人数"><a href="#查询每个专业的学生人数" class="headerlink" title="查询每个专业的学生人数"></a>查询每个专业的学生人数</h1><blockquote><p>一所大学有 2 个数据表，分别是 student 和 department ，这两个表保存着每个专业的学生数据和院系数据。</p></blockquote><p>表：student</p><table><thead><tr><th>student_id</th><th>student_name</th><th>gender</th><th>dept_id</th></tr></thead><tbody><tr><td>1</td><td>Jack</td><td>M</td><td>1</td></tr><tr><td>2</td><td>Jane</td><td>F</td><td>1</td></tr><tr><td>3</td><td>Mark</td><td>M</td><td>2</td></tr></tbody></table><p>表：department</p><table><thead><tr><th>dept_id</th><th>dept_name</th></tr></thead><tbody><tr><td>1</td><td>Engineering</td></tr><tr><td>2</td><td>Science</td></tr><tr><td>3</td><td>Law</td></tr></tbody></table><p>要求： 查询&nbsp;department&nbsp;表中每个专业的学生人数 （即使没有学生的专业也需列出）。将你的查询结果按照学生人数降序排列。 如果有两个或两个以上专业有相同的学生数目，将这些部门按照部门名字的字典序从小到大排列。输出结果如下</p><table><thead><tr><th>dept_name</th><th>student_number</th></tr></thead><tbody><tr><td>Engineering</td><td>2</td></tr><tr><td>Science</td><td>1</td></tr><tr><td>Law</td><td>0</td></tr></tbody></table><p>答案1：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  a1.dept_name,</span><br><span class="line">  <span class="built_in">COUNT</span>(student_id) <span class="keyword">AS</span> student_number </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  department a1</span><br><span class="line">  <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> student a2  <span class="keyword">ON</span> a1.dept_id <span class="operator">=</span> a2.dept_id </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">     a1.dept_name</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">    student_number <span class="keyword">DESC</span>,</span><br><span class="line">    a1.dept_name</span><br></pre></td></tr></tbody></table></figure><p>答案2：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">    dept_name,</span><br><span class="line">    (<span class="keyword">case</span> <span class="keyword">when</span> student_num <span class="keyword">is</span> <span class="keyword">null</span> <span class="keyword">then</span> <span class="number">0</span> <span class="keyword">else</span> student_num <span class="keyword">end</span>) student_number</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">(<span class="keyword">select</span></span><br><span class="line">    dept_id,</span><br><span class="line">    <span class="built_in">count</span>(<span class="operator">*</span>) student_num</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    student</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line">    dept_id) t1</span><br><span class="line"><span class="keyword">right</span> <span class="keyword">join</span></span><br><span class="line">     department t2 <span class="keyword">on</span> t1.dept_id<span class="operator">=</span>t2.dept_id</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> </span><br><span class="line">    student_number <span class="keyword">desc</span>,</span><br><span class="line">    dept_name <span class="keyword">asc</span></span><br></pre></td></tr></tbody></table></figure><hr><p>表：salesperson</p><blockquote><p>表 salesperson 存储了所有销售员的信息。每个销售员都有一个销售员编号 sales_id 和他的名字 name 。</p></blockquote><table><thead><tr><th>sales_id</th><th>name</th><th>salary</th><th>commission_rate</th><th>hire_date</th></tr></thead><tbody><tr><td>1</td><td>John</td><td>100000</td><td>6</td><td>4/1/2006</td></tr><tr><td>2</td><td>Amy</td><td>120000</td><td>5</td><td>5/1/2010</td></tr><tr><td>3</td><td>Mark</td><td>65000</td><td>12</td><td>12/25/2008</td></tr><tr><td>4</td><td>Pam</td><td>25000</td><td>25</td><td>1/1/2005</td></tr><tr><td>5</td><td>Alex</td><td>50000</td><td>10</td><td>2/3/2007</td></tr></tbody></table><p>表：company</p><blockquote><p>表 company 存储了所有公司的信息。每个公司都有一个公司编号 com_id 和它的名字 name 。</p></blockquote><table><thead><tr><th>com_id</th><th>name</th><th>city</th></tr></thead><tbody><tr><td>1</td><td>RED</td><td>Boston</td></tr><tr><td>2</td><td>ORANGE</td><td>New York</td></tr><tr><td>3</td><td>YELLOW</td><td>Boston</td></tr><tr><td>4</td><td>GREEN</td><td>Austin</td></tr></tbody></table><p>表： orders</p><blockquote><p>表 orders 存储了所有的销售数据，包括销售员编号 sales_id 和公司编号 com_id 。<br>| order_id | order_date | com_id  | sales_id | amount |<br>|———-|————|———|———-|——–|<br>| 1        |   1/1/2014 |    3    |    4     | 100000 |<br>| 2        |   2/1/2014 |    4    |    5     | 5000   |<br>| 3        |   3/1/2014 |    1    |    1     | 50000  |<br>| 4        |   4/1/2014 |    1    |    4     | 25000  |</p></blockquote><p>要求： 根据给定的三个表，salesperson， company， orders。输出所有表 salesperson 中，没有向公司 ‘RED’ 销售任何东西的销售员。</p><blockquote><p>根据表&nbsp;orders&nbsp;中的订单 ‘3’ 和 ‘4’ ，容易看出只有 ‘John’ 和 ‘Pam’ 两个销售员曾经向公司 ‘RED’ 销售过。所以我们需要输出表&nbsp;salesperson&nbsp;中所有其他人的名字。</p></blockquote><p>输出：</p><table><thead><tr><th>name</th></tr></thead><tbody><tr><td>Amy</td></tr><tr><td>Mark</td></tr><tr><td>Alex</td></tr></tbody></table><p>答案1：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    a1.name</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    salesperson a1</span><br><span class="line">    <span class="keyword">LEFT</span> <span class="keyword">JOIN</span></span><br><span class="line">    orders a2 <span class="keyword">ON</span> a1.sales_id <span class="operator">=</span> a2.sales_id</span><br><span class="line">    <span class="keyword">LEFT</span> <span class="keyword">JOIN</span></span><br><span class="line">    company a3 <span class="keyword">ON</span> a2.com_id <span class="operator">=</span> a3.com_id</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">    a1.name</span><br><span class="line"><span class="keyword">HAVING</span></span><br><span class="line">    <span class="built_in">SUM</span>(IF(a3.name <span class="operator">=</span> <span class="string">'RED'</span>, <span class="number">1</span>, <span class="number">0</span>))  <span class="operator">=</span> <span class="number">0</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">    a1.sales_id</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>答案2：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">    a1.name</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">     salesperson a1</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">    <span class="keyword">not</span> <span class="keyword">exists</span></span><br><span class="line">    (<span class="keyword">select</span> </span><br><span class="line">        <span class="operator">*</span></span><br><span class="line">    <span class="keyword">from</span> </span><br><span class="line">        orders a2</span><br><span class="line">    <span class="keyword">join</span> company a3 <span class="keyword">on</span> a2.com_id<span class="operator">=</span>a3.com_id</span><br><span class="line">    <span class="keyword">where</span> </span><br><span class="line">        a3.name<span class="operator">=</span><span class="string">'RED'</span> <span class="keyword">and</span> a1.sales_id<span class="operator">=</span>a2.sales_id)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>答案3：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  name </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  salesperson </span><br><span class="line"><span class="keyword">WHERE</span> sales_id <span class="keyword">not</span> <span class="keyword">in</span> </span><br><span class="line">  (<span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> </span><br><span class="line">    a1.sales_id </span><br><span class="line">  <span class="keyword">FROM</span></span><br><span class="line">    orders a1</span><br><span class="line">    <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> company a2 <span class="keyword">ON</span> a1.com_id <span class="operator">=</span> a2.com_id </span><br><span class="line">  <span class="keyword">WHERE</span> </span><br><span class="line">    a2.name <span class="operator">=</span> <span class="string">'RED'</span>)</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><hr><p>LeetCodeAnimation <a href="https://github.com/MisterBooo/LeetCodeAnimation">https://github.com/MisterBooo/LeetCodeAnimation</a></p><p>leetcode 题解 <a href="https://github.com/azl397985856/leetcode">https://github.com/azl397985856/leetcode</a></p><p>LeetCode所有题目 <a href="http://leetcode.liangjiateng.cn/leetcode/game-play-analysis-ii/description">http://leetcode.liangjiateng.cn/leetcode/game-play-analysis-ii/description</a></p><p>SQL语句数据分析面试必备 <a href="https://mp.weixin.qq.com/s/ol-jheA3TTv0qqtFtEt_ow">https://mp.weixin.qq.com/s/ol-jheA3TTv0qqtFtEt_ow</a></p><hr><!-- <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">SELECT id,max(days) FROM (SELECT</span><br><span class="line">  id,</span><br><span class="line">  @cont_day :=</span><br><span class="line">  (CASE</span><br><span class="line">   WHEN (@id = id AND DATEDIFF(start, @start) = 1)</span><br><span class="line">     THEN</span><br><span class="line">       (@cont_day + 1)</span><br><span class="line">   WHEN (@id = id AND DATEDIFF(start, @start) &lt; 1)</span><br><span class="line">     THEN</span><br><span class="line">       (@cont_day + 0)</span><br><span class="line">   ELSE</span><br><span class="line">     1</span><br><span class="line">   END) AS days,</span><br><span class="line">  @id := id,</span><br><span class="line">  @start := start login_day</span><br><span class="line">FROM (SELECT</span><br><span class="line">        id,</span><br><span class="line">        DATE(start) start</span><br><span class="line">      FROM dmp.person_view</span><br><span class="line">      WHERE id != 0</span><br><span class="line">      ORDER BY id, start) AS t,</span><br><span class="line">  (SELECT</span><br><span class="line">     @id := &#x27;&#x27;,</span><br><span class="line">     @start := &#x27;&#x27;,</span><br><span class="line">     @cont_day := 0) AS t1) t2 GROUP BY id;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">&lt;!-- </span><br><span class="line"></span><br><span class="line"># sql 刷题网站</span><br><span class="line"></span><br><span class="line">[刷题网站](https://leetcode.com/problems/rank-scores/submissions/)</span><br><span class="line"></span><br><span class="line">1. 统计不同月份的下单人数</span><br><span class="line"></span><br><span class="line">```sql</span><br><span class="line">select</span><br><span class="line">    month(hit_date),</span><br><span class="line">    count(distinct  user_account) as uv </span><br><span class="line">from </span><br><span class="line">    a1</span><br><span class="line">where </span><br><span class="line">    hit_date between &#x27;2019-01-01&#x27; and &#x27;2019-05-31&#x27;</span><br><span class="line">    and </span><br><span class="line">    sales = &#x27;1&#x27;</span><br><span class="line">group by </span><br><span class="line">    month(hit_date)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li><p>统计用户三月份的回购率和复购率</p></li><li><p>统计男女用户的消费频次是否有差异</p></li><li><p>统计多次消费的用户， 第一次和最后一次消费的间隔是多少？</p></li><li><p>统计不同年龄段，用户的额消费金额是否有差异？</p></li><li><p>统计消费的二八法则，消费的top20%用户，贡献了多少额度？</p></li></ol><p> –&gt;</p>-->]]></content>
      
      
      <categories>
          
          <category> 数据分析技能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hive </tag>
            
            <tag> sql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常见的分析思维模型</title>
      <link href="/2019/02/26/%E6%96%B9%E6%B3%95-%E5%B8%B8%E8%A7%81%E7%9A%84%E5%88%86%E6%9E%90%E6%A8%A1%E5%9E%8B/"/>
      <url>/2019/02/26/%E6%96%B9%E6%B3%95-%E5%B8%B8%E8%A7%81%E7%9A%84%E5%88%86%E6%9E%90%E6%A8%A1%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="分析思维模型"><a href="#分析思维模型" class="headerlink" title="分析思维模型"></a>分析思维模型</h1><p> 使用频率按顺序排列</p><h3 id="1-AARRR-模型"><a href="#1-AARRR-模型" class="headerlink" title="1.AARRR 模型"></a>1.AARRR 模型</h3><p><img src="https://i.loli.net/2019/02/26/5c75582b87a7c.png" alt="AARRR 模型"></p><p><img src="https://i.loli.net/2019/03/23/5c95c95929a40.jpg" alt="AARRR 模型"></p><h3 id="2-基于用户生命周期的数据分析体系"><a href="#2-基于用户生命周期的数据分析体系" class="headerlink" title="2.基于用户生命周期的数据分析体系"></a>2.基于用户生命周期的数据分析体系</h3><p><img src="https://i.loli.net/2019/03/23/5c95c9d2e937c.jpg" alt="分析体系"></p><ul><li>对应的关键指标</li></ul><p> <img src="https://i.loli.net/2019/03/23/5c95ca1b5fdc9.jpg" alt="对应的关键指标"></p><h3 id="3-5W2H-分析法"><a href="#3-5W2H-分析法" class="headerlink" title="3. 5W2H 分析法"></a>3. 5W2H 分析法</h3><p> 什么原因 (why)  导致 什么事情 (what), 需要哪些人 (who) 在什么时间完成 (when),在什么地点 (where) 用什么方法 (how)完成, 预算是多少 (how much)?</p><p> <img src="https://i.loli.net/2019/08/19/lIgkeLbfNXtDHOu.jpg" alt="微信图片_20190819003216.jpg"></p><p> <img src="https://i.loli.net/2019/02/26/5c7418d10b4c8.png" alt="思维导图"></p><h3 id="4-象限法"><a href="#4-象限法" class="headerlink" title="4. 象限法"></a>4. 象限法</h3><p> 通过象限法， 找到问题的共同原因， 从而建立分组优化策略。 </p><ul><li>内外因素分解法</li></ul><p> <img src="https://i.loli.net/2019/02/25/5c7409d9dce08.png" alt="内外因素分解法"></p><ul><li>用户分群</li></ul><p> <img src="https://i.loli.net/2019/02/23/5c70f5814cc93.png" alt="用户分群"></p><ul><li>RFM 用户分群</li></ul><p> <img src="https://i.loli.net/2019/02/23/5c70f7f128f4c.png" alt="RFM用户分群"></p><h3 id="5-二八法则-帕累托法则"><a href="#5-二八法则-帕累托法则" class="headerlink" title="5. 二八法则 / 帕累托法则"></a>5. 二八法则 / 帕累托法则</h3><p> <img src="https://i.loli.net/2019/08/19/enkqRmf8KzL2vSC.jpg" alt="微信图片_20190819004446.jpg"></p><ul><li><p>将对象分为重要和不重要两类， 20%的用户贡献了80%的销售额。 </p></li><li><p>数据中， 20% 的变量将直接产生 80% 的效果，数据分析应该围绕这20%的变量来进行。 </p></li><li><p>和业务和KPI紧密相关，花费很少的精力就能达到不错的效果。</p></li><li><p>在条件允许的状况下， 依旧不能放弃全局，否则会让思维变得狭隘。<br>补充：</p></li><li><p>升级版本： ABC 分析法</p></li><li><p>与之对应： 长尾理论</p></li></ul><h3 id="6-SWOT方法"><a href="#6-SWOT方法" class="headerlink" title="6. SWOT方法"></a>6. SWOT方法</h3><p>指定发展战略前，对自身进行全面的分析及竞争优势定位。</p><h3 id="7-麦肯锡七步分析法"><a href="#7-麦肯锡七步分析法" class="headerlink" title="7.麦肯锡七步分析法"></a>7.麦肯锡七步分析法</h3><p> <img src="https://i.loli.net/2019/03/23/5c95ca64ce6f6.jpg" alt="七步分析法"></p><ul><li>界定问题</li><li> 将问题分解成议题</li><li>去除不重要的议题（优先排序）</li><li>制定详细工作计划 </li><li> 分析重要议题 </li><li>汇总研究成果 </li><li> 准备你的故事</li></ul><h3 id="8-SMART原则"><a href="#8-SMART原则" class="headerlink" title="8.SMART原则"></a>8.SMART原则</h3><p><img src="https://i.loli.net/2020/03/02/8EZc2o1QrsdTqbU.jpg" alt="SMART原则"></p><p><img src="https://i.loli.net/2019/08/19/uyaDJnKpQP1Cx9d.jpg" alt="微信图片_20190819003845.jpg"></p><ul><li>意义：人们在制定工作目标或者任务目标时，考虑一下目标与计划是不是SMART化的。只有具备SMART化的计划才是具有良好可实施性的，也才能指导保证计划得以实现。</li></ul><p> 说明：</p><ul><li><p>S代表具体(Specific)，指绩效考核要切中特定的工作指标，不能笼统；</p></li><li><p>M代表可度量(Measurable)，指绩效指标是数量化或者行为化的，验证这些绩效指标的数据或者信息是可以获得的；</p></li><li><p>A代表可实现(Attainable)，指绩效指标在付出努力的情况下可以实现，避免设立过高或过低的目标；</p></li><li><p>R代表现实性(realistic)，指绩效指标是实实在在的，可以证明和观察；</p></li><li><p>T代表有时限(time bound)，注重完成绩效指标的特定期限。</p></li></ul><h3 id="9-4P-与-STP-理论"><a href="#9-4P-与-STP-理论" class="headerlink" title="9.4P 与 STP 理论"></a>9.4P 与 STP 理论</h3><p>市场营销与市场定位</p><ul><li>4P 理论</li></ul><p> <img src="https://i.loli.net/2019/02/26/5c7557f086661.png" alt="4P 理论"></p><ul><li>STP 理论</li></ul><p> <img src="https://i.loli.net/2019/02/26/5c755817819c3.png" alt="STP 理论"></p><h3 id="10-PEST分析方法"><a href="#10-PEST分析方法" class="headerlink" title="10.PEST分析方法"></a>10.PEST分析方法</h3><p>企业的战略外部环境分析。</p><p><img src="https://i.loli.net/2019/02/26/5c75584a86f2c.png" alt="PEST分析方法"></p><h3 id="11-PDCA模型"><a href="#11-PDCA模型" class="headerlink" title="11. PDCA模型"></a>11. PDCA模型</h3><p><img src="https://i.loli.net/2019/08/19/LiXTcBj5PyGzIhQ.jpg" alt="PDCA"></p><p><img src="https://i.loli.net/2019/03/23/5c95c631c6fe3.png" alt="PDCA模型"></p><p><img src="https://i.loli.net/2019/03/23/5c95cbc1629d7.jpg" alt="PDCA模型"></p><h3 id="12-时间管理"><a href="#12-时间管理" class="headerlink" title="12.时间管理"></a>12.时间管理</h3><p><img src="https://i.loli.net/2019/08/19/cdlNS3ihf7jKIYa.jpg" alt="微信图片_20190819004205.jpg"></p><p> A、重要且紧急</p><p>紧急状况<br>迫切的问题<br>限期完成的工作<br>你不做其他人也不能做</p><p>B、重要不紧急<br>准备工作<br>预防措施<br>价值观的澄清<br>计划<br>人际关系的建立<br>真正的再创造<br>增进自己的能力</p><p>C、紧急不重要<br>造成干扰的事、电话、<br>信件、报告<br>会议<br>许多迫在眉捷的急事<br>符合别人期望的事</p><p>D、不重要不紧急<br>忙碌琐碎的事<br>广告函件<br>电话<br>逃避性活动<br>等待时间</p><h3 id="13-任务分解法"><a href="#13-任务分解法" class="headerlink" title="13. 任务分解法"></a>13. 任务分解法</h3><p> <img src="https://i.loli.net/2019/08/19/I74BWGXQ2rFTihj.jpg" alt="微信图片_20190819004339.jpg"></p><p> 目标→任务→工作→活动。</p><ul><li><p>WBS分解的原则：将主体目标逐步细化分解，最底层的任务活动可直接分派到个人去完成；每个任务原则上要求分解到不能再细分为止。</p></li><li><p>WBS分解的方法：至上而下与至下而上的充分沟通；一对一个别交流；小组讨论。</p></li><li><p>WBS分解的标准：分解后的活动结构清晰；逻辑上形成一个大的活动；集成了所有的关键因素包含临时的里程碑和监控点；所有活动全部定义清楚</p></li></ul><h3 id="14-AISAS-用户行为决策分析模型"><a href="#14-AISAS-用户行为决策分析模型" class="headerlink" title="14. AISAS-用户行为决策分析模型"></a>14. AISAS-用户行为决策分析模型</h3><ul><li>注意- 兴趣-搜索-行动-分享</li></ul><p><img src="https://i.loli.net/2019/03/23/5c95c4f93ba91.jpg" alt="AISAS 模型"></p><h3 id="15-延伸：-个人IPO模型"><a href="#15-延伸：-个人IPO模型" class="headerlink" title="15. 延伸： 个人IPO模型"></a>15. 延伸： 个人IPO模型</h3><p><img src="https://i.loli.net/2019/03/23/5c95bfee175d6.png" alt="个人IPO模型"></p><h3 id="16-波特五种竞争力分析模型"><a href="#16-波特五种竞争力分析模型" class="headerlink" title="16. 波特五种竞争力分析模型"></a>16. 波特五种竞争力分析模型</h3><p><img src="https://i.loli.net/2019/03/23/5c95c30761cdc.png" alt="波特五种竞争力分析模型"></p><h3 id="17-KANO模型"><a href="#17-KANO模型" class="headerlink" title="17. KANO模型"></a>17. KANO模型</h3><p> <img src="https://i.loli.net/2019/03/23/5c95c58968dae.jpg" alt="KANO模型"></p><ul><li>对用户需求分类和优先排序</li></ul><p> 将影响用户满意度的因素划分为五个类型，包括：</p><ul><li><p>魅力因素：用户意想不到的，如果不提供此需求，用户满意度不会降低，但当提供此需求，用户满意度会有很大提升;</p></li><li><p>期望因素(一维因素)：当提供此需求，用户满意度会提升，当不提供此需求，用户满意度会降低;</p></li><li><p>必备因素：当优化此需求，用户满意度不会提升，当不提供此需求，用户满意度会大幅降低;</p></li><li><p>无差异因素：无论提供或不提供此需求，用户满意度都不会有改变，用户根本不在意;</p></li><li><p>反向因素：用户根本都没有此需求，提供后用户满意度反而会下降;</p></li></ul><h3 id="18-SCP模型"><a href="#18-SCP模型" class="headerlink" title="18. SCP模型"></a>18. SCP模型</h3><p><img src="https://wiki.mbalib.com/w/images/d/d8/SCP%E6%A8%A1%E5%9E%8B.gif" alt="SCP模型"></p><ul><li>分析在行业或者企业收到表面冲击时，可能的战略调整及行为变化。</li></ul><h3 id="19-SPACE-战略地位与行动评价矩阵"><a href="#19-SPACE-战略地位与行动评价矩阵" class="headerlink" title="19. SPACE-战略地位与行动评价矩阵"></a>19. SPACE-战略地位与行动评价矩阵</h3><ul><li>企业的内部因素与外部因素</li></ul><p><img src="https://wiki.mbalib.com/w/images/7/72/SPACEjz.jpg" alt="SPACE"></p><!-- <!-- ###  7. USED方法针对SWOT分析后的结果，使用USED方法产出解决方案* 如何善用每个优势？ How can we Use each Strength?* 如何停止每个劣势？ How can we Stop each Weakness?* 如何成就每个机会？ How can we Exploit each Opportunity?* 如何抵御每个威胁？ How can we Defend against each Threat? -- --><hr><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><a href="https://mp.weixin.qq.com/s/IGsE86BT6CY7hT2uVHmN-g">分析和解决问题的7种武器</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据分析方法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据分析师-岗位与具备能力介绍</title>
      <link href="/2018/12/22/%E6%96%B9%E6%B3%95-%E5%B2%97%E4%BD%8D%E4%BB%8B%E7%BB%8D/"/>
      <url>/2018/12/22/%E6%96%B9%E6%B3%95-%E5%B2%97%E4%BD%8D%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<p><a href="https://mp.weixin.qq.com/s/YfDZ-tmGiSyMCgarBuFT0A">超级菜鸟如何入门数据分析</a></p><h1 id="1-数据分析师岗位介绍"><a href="#1-数据分析师岗位介绍" class="headerlink" title="1. 数据分析师岗位介绍"></a>1. 数据分析师岗位介绍</h1><ol><li>什么是数据分析师？</li></ol><ul><li>数据分析师， 就是专门从事数据收集、研究分析，并依据数据来指导业务决策的人员。</li></ul><ol start="2"><li>岗位分类</li></ol><ul><li><p>其中的数据收集、研究分析、业务指导刚好可以将数据分析的岗位分为三个大的部分：</p></li><li><ul><li>数据收集——数据研发工程师</li></ul><blockquote><p>主要职能是搭建数据处理的基础设置，让大数据的存储、处理、计算能按要求完成，包括数据仓库搭建、数据存储、计算处理、报表开发等。</p></blockquote></li><li><ul><li>数据挖掘、算法工程师</li></ul><blockquote><p>主要是应用机器学习和数据挖掘算法，进行用户行为分析和用户属性挖掘，建立模型，预测、用户画像等为业务场景提供支持。</p></blockquote></li><li><ul><li>业务数据分析师</li></ul><blockquote><p>分析业务数据， 发现问题，分析问题，得出分析结论，为决策提供支持，主要支持市场运营部门。</p></blockquote></li></ul><p>如需详细了解数据分析师的岗位划分，可以参考秦路老师的文章：<a href="https://mp.weixin.qq.com/s?__biz=MjM5NjEyMDI2MQ==&amp;mid=2455947571&amp;idx=1&amp;sn=4e1fe329b7acef882142df0186a4c4a5&amp;scene=21#wechat_redirect">数据分析的职业规划</a></p><ol start="3"><li>业务数据分析师的日常工作有哪些?</li></ol><ul><li><p>业务前期： 建立业务数据指标， 梳理业务数据口径， 确定数据埋点方案， 进行埋点测试，确保数据采集的准确性。</p></li><li><p>日常工作： 公司的日报、周报、月报数据支持，业务方临时性数据支持， 数据异常原因分析， 业务专题分析。</p></li></ul><ol start="4"><li>业务数据分析师的技能要求</li></ol><ul><li><p>数据分析思维和对公司业务的理解程度， 是业务数据分析的主要核心技能。</p></li><li><p>必备技能有： Excel, Hive/Sql, 统计学，PPT</p></li><li><p>软技能有： 逻辑思维能力，分析方法论， 数据敏感度， 沟通协调能力</p></li><li><p>加分技能： Python, R,  机器学习算法</p></li></ul><ol start="5"><li><p>业务数据分析的发展方向</p><p>业务数据分析是入门相对容易， 但要精通比较困难， 在公司属于比较基础的岗位。如果专精于业务方向， 可以往管理方面发展， 如数据运营经理/总监。也可往数据挖掘工程师方面发展， 需要进一步掌握Python和机器学习算法等知识，后面也可以往数据产品经理的方向发展。</p><p>对于我自己来说，目前的职业发展方向是业务数据分析师， 主要任务是不断学习和完善业务数据分析的所有技能， 加强互联网运营的业务理解能力，打好职业发展的基础，未来的期望是往数据挖掘方面发展。</p></li></ol><ol start="6"><li>业务数据分析师的考量标准</li></ol><ul><li>产品理解能力：</li></ul><blockquote><ul><li>熟悉业务的各种核心数据，明白用户从哪里来，进来之后做了什么，了解用户反馈最多的问题是什么。</li><li>了解产品功能渗透率和关键路径，再以这些数据为切入点，思考当前产品有哪些问题，并与产品经理沟通如何优化，同时看竞品数据和行业数据，深入了解业务数据。</li><li>深入了解： 要有自己的洞见，对于整个行业，各个不同阶段的领头羊是谁，他们靠什么成为领头羊，又因为什么出现增长瓶颈，当前各自的大法测试什么，对我们自身的app有什么借鉴，后续我们要监控哪些数据。</li></ul></blockquote><ul><li>分析方法论：</li></ul><blockquote><p>能够快速从一个较全面、逻辑性、价值性的角度去分析，而不是单点无架构分析。所有方法论都是通过不断提炼、总结、实践得出来的。</p><ul><li>指标体系方法论</li><li>流量分析方法论</li><li>路径分析方法论</li><li>产品分析方法论</li><li>营销活动分析方法论</li><li>用户流失分析方法论</li><li>A/B 测试</li></ul></blockquote><!-- > * 最大概率法则、二八定律、幸存者偏差等 --><ul><li>可视化能力： </li></ul><blockquote><ul><li>PPT 制作能力</li><li>PPT专题报告之间的逻辑性</li><li>内容是否符合金字塔原理</li><li>数据可视化内容美观性</li></ul></blockquote><ul><li>演讲能力：</li></ul><blockquote><ul><li>表达能力</li><li>讲故事能力</li><li>形象化能力</li></ul></blockquote><!-- > * 大心脏能力如何 --><ul><li>协作沟通能力： </li></ul><blockquote><ul><li>跟产品、业务、研发沟通时的软技能</li><li>如何在团队中定义好自己的位置并让其他人感到舒服</li></ul></blockquote><ul><li>逻辑思维能力：</li></ul><blockquote><ul><li>分析推导过程的全面性、合理性、价值型</li></ul></blockquote><ul><li>技术能力：</li></ul><blockquote><ul><li>excel的常规操作</li><li>统计知识是否能够熟练应用</li><li>hive、sql的熟练程度</li><li>python 中常用的数据分析库能否熟练应用</li><li>算法模型是否熟练搭建并知道有哪些坑。</li></ul></blockquote><p>对数据进行分析的最佳途径：</p><ol><li>业务梳理——了解业务需求</li><li>确定业务目标——弄清产品目标以及当下的首要问题</li><li>事件设计——记录和目标相关的用户行为，并定义为相应事件</li><li>数据采集——保证采集质量，确定好事件采集时机，和开发进行沟通</li><li>构建指标体系——确定想要看的指标，想要达到的分析粒度，建立产品的第一关键指标</li><li>数据分析——业务人员根据自己的经验，进行数据分析，迭代优化</li></ol><!-- ---机器学习定理1. 没有免费午餐定理，NFL定理没有任何算法在所有数据情形下有天然优势， 在没有实际背景下，没有一种算法比随机胡猜的效果好。所有模型是没有好坏之分的， 当数据有线性分布时， 模型就会有效。 先掌握领域前言知识， 用它来指导业务， 而不是把每一个模型都跑一遍。 2. 丑小鸭定理两只白天鹅的区别与丑小鸭与白天鹅的区别一样远。https://blog.csdn.net/mnshenyanping/article/details/51280731 --><!-- 1. 不要追求成为全栈工程师。 2. 产品的逻辑一定要懂。什么是产品？-定义问题， 解决问题的逻辑。 比如： 用户标签体系、冷启动策略等。3. 不要频繁切换从事的业务领域* 业务领域先验知识的积累， 是成功进行数据建模的关键。 * 业务领域的商业逻辑需要花时间搞清楚， 这对产品的决策至关重要。 * 同一个领域的不断努力可以形成个人口碑。  --><!-- ------# 数据分析应该具备的能力不同企业不同职位去判断一个数据分析专家的标准和侧重点肯定不同，但所谓牛人的特性，庖丁解牛。就是不管多复杂多麻烦的一个事，一个分析工作，到他手里，能很快的清晰的给出脉络，给出解构，给出路线图。这就是牛人的共性，不仅是数据分析。那么我觉得针对数据专才，很重要一点就是，对于所属行业，所从事领域的一些数据现象，数据特征，数据逻辑，随时问他，清晰了然。为什么机会来的时候老板会想到他，因为你很难找到一个人能对各个核心部门的业务了如指掌。能快速厘清部门的业务脉络并有效接手，他最后一个接手的部门是百度联盟事业部，担任事业部总经理，马国林出事后他去救火。现在已经离开百度做投资基金， 为什么做投资，因为对流量变现的思路和认知太了解了。回到我最初的那句话，数据是公司的，贩卖数据肯定是违法的，但见识和视野是自己的，是可以随时带走的。我也知道有在百度做数据的老同事 ，坦白说，对数据毫无感觉，完全是为了领导的工作而完成数据，那，就没啥可说的了。旧文有个坐守金山不自知，说的就是那种。对场景的理解，认知。 书本，教育，在线讨论，都是基于明确的场景提出问题，寻找解决方案。 但现实工作中，对一个职场新人，或技术人员，理解业务场景并寻找和发现问题 是非常需要经验的。我以前说过，acm的算法大牛，我可以给他们讲搜索算法优化，不是因为他们算法能力不如我，而是应用场景理解上我秒杀他们。 --><hr><h1 id="2-如何避免数据分析中的坑"><a href="#2-如何避免数据分析中的坑" class="headerlink" title="2. 如何避免数据分析中的坑"></a>2. 如何避免数据分析中的坑</h1><p>要避开哪些坑？</p><ol><li>不要重复无意义的工作。许多刚入行的小伙伴喜欢把清理数据作为主要工作，纪敏认为这只是让你接触数据的一种方法，每天重复地提出需求、整理表格，会磨灭掉许多对于分析师岗位的热情。</li><li>不要“全手动”，要寻找代替的工具。既然不能重复地做无意义的工作，那么就要学会用工具去代替人工，选择合适的用户行为模型和工具，能把分析师的主要精力放在规律和策略的探索上，才能充分发挥一名数据分析师应有的价值。</li></ol><p>数据分析只是一种辅佐手段，它无法从根本上改变产品方向、功能价值，主要辅佐和支持的产品，探索更有价值的数据意义。</p><p><a href="https://www.sensorsdata.cn/blog/20181107/">https://www.sensorsdata.cn/blog/20181107/</a></p><hr><ol><li>避免数据偏见<br>在分析数据时受个人偏见和动机的影响，即仅选择支持你声明的数据，同时丢弃不支持声明的部分。“数据偏见”将让数据的客观性荡然无存。</li></ol><p>避免这种谬误的方法是在分析数据时，尽可能收集相关数据，并询问他人意见</p><ol start="2"><li>避免数据疏浚<br>数据疏浚（Data Dredging）是指未能确认相关性，实际上是偶然的结果。</li></ol><p>在寻找问题的原因时，很容易被数据蒙蔽。乍一看，这些数据可能具有统计学意义，但进一步测试（例如，检查趋势是否持续，查看相关指标等）可能会发现只是偶然结果。</p><p>避免这种谬误的方法是在分析数据时，从假设开始检查相关指标和观察数据变化趋势。</p><ol start="3"><li>区分因果关系和相关性 </li></ol><p>在数据分析时很容易将两个事件同时发生（相关），判断为因果关系。</p><p>避免这种谬误的方法是，收集更多数据并查看可能的第三方原因，有时会发现他们的相关关系可能与第三个独立因子相关，而不是彼此相关。</p><p>例如，我们发现放弃其在线购物车的潜在客户往往具有较低的总购物车价值（放弃时购物车中物品的总成本）。此时，我们没有足够的数据来确定这是一致的相关性，是偶然结果，还是由其他因素引起的。深入挖掘我们可能会发现运输成本导致购物车到下单的流失率上升，因为免费送货仅适用于超过特定最低购物车价值的订单。</p><ol start="4"><li> 解决问题，做出明智的决定<br>在找到数据支持的结论后，你需要记下一个简短的摘要（包括问题，数据显示的内容以及由此产生的决策 / 行动），这样做有两个目的：</li></ol><p>1.将你所分析的数据和结论告知可能涉及或受影响的任何其他团队，为其他人提供有价值的背景信息。</p><p>2.这个记录也将使你在将来出现类似情况时更容易参考和以防其他人想要查看数据本身。</p><p>最终，问题解决了，也总结了有价值的经验。</p><hr><hr><!-- 以子弹短信app来进行举例1. 产品信息结构图了解产品承载了哪些信息和功能，这些信息的目的是什么， 想要用户干什么2. 产品功能结构图将产品的功能模块梳理出来， 功能之间怎样跳转，功能的上游入口和下游入口是什么，都要想清楚，并标记出来3. 核心业务梳理流程图弄清梳理出产品的核心业务流程，密切观察用户在核心业务流程运转的整个过程，比如：注册流程，新手完成任务流程等4. 梳理产品需求首先明确我们要分析什么样的场景，解决什么样的业务问题，要解决这个业务问题，要看什么数据，要衡量什么指标。5. 定义指标明确产品的目标和目前产品阶段来说最重要的问题。比如，要增加销售额，销售额等于活动流量乘以付费转化率乘以客单价，我们就需要把这个指标需求进一步细化，分给不同的角色各有侧重点的去执行。 要梳理这个指标需求和产品逻辑有什么关系？比如，活跃用户指标，一般是启动app的用户来定义活跃，实际上，每一款产品的核心功能不同，只有完成核心功能的用户才能算活跃6. 事件设计和数据采集埋点设计根据用户在使用产品功能时产生的行为数据，从用户使用行为分析的角度去分析需要的埋点用户行为： 发布话题——上传图片、视频——进入本地视频列表——选择视频——输入话题——发布话题1. 操作系统，应用版本，话题分类2. 操作系统，应用版本3. 操作系统，应用版本，是否取消4. 操作系统，应用版本，操作类型，是否取消5. 操作系统，应用版本，输入话题名称方式，话题名称6. 操作系统，应用版本，话题分类，话题名称，是否成功---- --><p><a href="https://www.sensorsdata.cn/blog/20180929/">https://www.sensorsdata.cn/blog/20180929/</a></p><p><a href="https://www.geckoboard.com/learn/data-literacy/basic-data-analysis-guide/">https://www.geckoboard.com/learn/data-literacy/basic-data-analysis-guide/</a></p><p><a href="http://www.woshipm.com/marketing/1058822.html">一个提升用户体验的绝好方法：触点管理</a></p>]]></content>
      
      
      <categories>
          
          <category> 数据分析方法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据分析 </tag>
            
            <tag> 岗位介绍 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>统计学学习</title>
      <link href="/2018/10/20/2019-02-01-%E6%8A%80%E8%83%BD-%E7%BB%9F%E8%AE%A1%E5%AD%A6%E5%AD%A6%E4%B9%A0/"/>
      <url>/2018/10/20/2019-02-01-%E6%8A%80%E8%83%BD-%E7%BB%9F%E8%AE%A1%E5%AD%A6%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="描述统计"><a href="#描述统计" class="headerlink" title="描述统计"></a>描述统计</h1><h2 id="集中趋势分析"><a href="#集中趋势分析" class="headerlink" title="集中趋势分析"></a>集中趋势分析</h2><ol><li><a href="https://www.shuxuele.com/mean.html">平均数</a><br> 将所有数据进行平均分配</li></ol> <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">7</span>, <span class="number">15</span>, <span class="number">15</span>, <span class="number">15</span>]</span><br><span class="line"><span class="comment"># 均值</span></span><br><span class="line">np.mean(a)</span><br></pre></td></tr></tbody></table></figure><ol start="2"><li><a href="https://www.shuxuele.com/data/central-measures.html">中位数</a><br>n个数据由大到小排列时，位于正中间的那个数</li></ol> <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">7</span>, <span class="number">15</span>, <span class="number">15</span>, <span class="number">15</span>]</span><br><span class="line"><span class="comment"># 中位数</span></span><br><span class="line">np.median(a)</span><br></pre></td></tr></tbody></table></figure><ol start="3"><li><a href="https://www.shuxuele.com/data/central-measures.html">众数</a><br>n个数据中，出现次数最多的那个数。</li></ol> <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">7</span>, <span class="number">15</span>, <span class="number">15</span>, <span class="number">15</span>]</span><br><span class="line"><span class="comment">#方法1</span></span><br><span class="line"><span class="comment"># np.bincount, 计算非负的int数组中，每个值出现的次数</span></span><br><span class="line">counts = np.bincount(a)</span><br><span class="line"><span class="comment">#[0 1 0 2 1 1 0 2 0 0 0 0 0 0 0 3]</span></span><br><span class="line"><span class="comment">#返回沿轴最大值的索引</span></span><br><span class="line">np.argmax(counts)</span><br></pre></td></tr></tbody></table></figure> <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">7</span>, <span class="number">15</span>, <span class="number">15</span>, <span class="number">15</span>]</span><br><span class="line"><span class="comment"># 方法2</span></span><br><span class="line"><span class="keyword">from</span> scipy <span class="keyword">import</span> stats</span><br><span class="line">stats.mode(a)[<span class="number">0</span>][<span class="number">0</span>]</span><br></pre></td></tr></tbody></table></figure><h2 id="变异性"><a href="#变异性" class="headerlink" title="变异性"></a>变异性</h2><ol><li>极差<br>n个数据中，最大数与最小数之差</li></ol> <figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">a = [1, 3, 3, 4, 5, 7, 7, 15, 15, 15]</span><br><span class="line">b = max(a) - min(a)</span><br></pre></td></tr></tbody></table></figure><ol start="2"><li><a href="https://www.shuxuele.com/data/quartiles.html">四分位数</a><br>将数据从小到大排列并分成4等份后，处于3个分割点上的数。<br><img src="https://i.loli.net/2020/02/23/26ENcS4gVjZfbCh.jpg" alt="微信图片_20200223184342.jpg"><br>箱型图<br><img src="https://i.loli.net/2020/02/23/MneCPUgLXas7Gxi.jpg" alt="微信图片_20200223184334.jpg"></li></ol> <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">7</span>, <span class="number">15</span>, <span class="number">15</span>, <span class="number">15</span>]</span><br><span class="line"><span class="comment"># 中位数</span></span><br><span class="line">np.median(a)</span><br><span class="line"><span class="comment"># 45%分位数</span></span><br><span class="line">np.percentile(a, <span class="number">45</span>)</span><br></pre></td></tr></tbody></table></figure><ol start="3"><li><a href="https://www.shuxuele.com/data/standard-deviation.html">方差</a><br>度量随机变量与期望值（平均值）之间的偏离程度。</li></ol><p> 公式：$\sigma ^{2} = \frac{  \sum_{i=1}^{N}(x_{i}-\mu)^{2}}{N}$</p><p> 计算步骤：</p><ol><li>求平均值</li><li>求 (各数值 - 平均值) 的值</li></ol><ul><li> 以 (各数值 - 平均值) 的平均数为标准，无法看出以平均数为基准数据的离散程度。因为两数相减结果有正有负，相加之后会互相抵消。</li><li>为使 (各数值 - 平均值) 的差值即使为负也能显示出差值，可以将 (各数值 - 平均值)的值平方之后，再取平均值。</li></ul><ol start="3"><li>求 (各数值 - 平均值)² 的值</li><li>求 (各数值 - 平均值)² 的平均值</li></ol><p> 方差问题：</p><ul><li>数值时有会过大</li><li>单位为原先单位的平方</li></ul> <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">7</span>, <span class="number">15</span>, <span class="number">15</span>, <span class="number">15</span>]</span><br><span class="line">np.var(a)</span><br></pre></td></tr></tbody></table></figure><ol start="4"><li><a href="https://www.shuxuele.com/data/standard-deviation.html">标准差</a><br>标准差越小，说明数据大多数集中于平均值附近，偏差不大。<br>公式：$\sigma =  \sqrt{\sigma ^{2}} =\sqrt{\frac{  \sum_{i=1}^{N}(x_{i}-\mu)^{2}}{N}} $<br>计算步骤： 计算出方差后开根号</li></ol> <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">7</span>, <span class="number">15</span>, <span class="number">15</span>, <span class="number">15</span>]</span><br><span class="line">np.std(a)</span><br></pre></td></tr></tbody></table></figure><h2 id="相关性"><a href="#相关性" class="headerlink" title="相关性"></a>相关性</h2><ol><li><p>常见的因果关系<br><img src="https://i.loli.net/2020/02/24/aoGEmcSqwdiR6lZ.jpg" alt="微信图片_20200224191209.jpg"></p></li><li><p>某个原因导致的结果唯一，导致某个结果的原因也是唯一的。</p></li><li><p>某个原因导致的结果唯一，导致某个结果的原因不唯一。</p></li><li><p>某个原因导致的结果不唯一，导致某个结果的原因唯一。</p></li><li><p>某个原因导致的结果不唯一，导致某个结果的原因也不唯一。</p></li><li><p><a href="https://www.shuxuele.com/data/correlation.html">相关系数</a><br>表示相关关系的正负与强弱的系数<br>相关系数r的范围是-1≤r≤1<br>判断相关关系强弱的标准：<br><img src="https://i.loli.net/2020/02/24/RIYFqMdjxJKsS2T.jpg" alt="微信图片_20200224192723.jpg"></p></li></ol> <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 写法1</span></span><br><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">b = [<span class="number">2</span>,<span class="number">4</span>, <span class="number">6</span>,<span class="number">9</span>]</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">np.corrcoef([a,b])</span><br><span class="line"><span class="comment"># 写法2</span></span><br><span class="line"><span class="keyword">import</span> scipy.stats <span class="keyword">as</span> stats</span><br><span class="line">stats.pearsonr(a,b)</span><br><span class="line"><span class="comment"># 结果的第一个数为相关系数</span></span><br><span class="line"><span class="comment"># 写法3</span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">df= pd.DataFrame()</span><br><span class="line">df[<span class="string">'a'</span>] = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">df[<span class="string">'b'</span>] = [<span class="number">2</span>,<span class="number">4</span>, <span class="number">6</span>,<span class="number">9</span>]</span><br><span class="line">df.corr()</span><br></pre></td></tr></tbody></table></figure><hr><h1 id="概率"><a href="#概率" class="headerlink" title="概率"></a>概率</h1><h2 id="排列与组合"><a href="#排列与组合" class="headerlink" title="排列与组合"></a>排列与组合</h2><ol><li><a href="https://www.shuxuele.com/combinatorics/combinations-permutations.html">排列</a><br>从N项中任取n项，并进行排列，决策的顺序的结果有影响。<br>公式：$P_{n}^{N} = \frac{N!}{(N-n)!}$</li></ol> <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> scipy.special <span class="keyword">import</span> comb, perm</span><br><span class="line">perm(<span class="number">5</span>,<span class="number">2</span>)</span><br></pre></td></tr></tbody></table></figure><ol start="2"><li><a href="https://www.shuxuele.com/combinatorics/combinations-permutations.html">组合</a><br>从N项中任取n项,不考虑顺序。<br>公式：$c_{n}^{N} = \frac{N!}{n!(N-n)!}$</li></ol> <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> scipy.special  <span class="keyword">import</span> comb, perm</span><br><span class="line">comb(<span class="number">5</span>,<span class="number">2</span>)</span><br></pre></td></tr></tbody></table></figure><p> 补充资料： <a href="https://zhuanlan.zhihu.com/p/41855459">5分钟彻底了解排列组合</a></p><ol start="3"><li><a href="https://www.shuxuele.com/data/probability-events-types.html">事件</a><br><img src="https://i.loli.net/2020/02/24/PjsIL6iNYlQzXfR.png" alt="微信截图_20200224195820.png"></li></ol><ul><li> 事件的补: $P(A) = 1 - P (A^{c})$</li><li>事件的并：$P(A\bigcup B ) = P(A) + P(A) - P(A\bigcap  B )$</li><li>互斥事件：$P(A\bigcup B ) = P(A) + P(B)$</li><li>独立事件：$P(A\bigcap B) = P(A) *  P(B)$</li></ul><h2 id="条件概率"><a href="#条件概率" class="headerlink" title="条件概率"></a>条件概率</h2><p> 在事件B发生的条件下， A条件发生的概率<br> 公式： </p><ul><li>$P(A|B ) = \frac{P(A\bigcap B)}{P(B)}$</li></ul> <!-- * $P(A\bigcup B) = P(B) * P(A|B) = P(A) * P(B|A)$  --><h2 id="二项分布"><a href="#二项分布" class="headerlink" title="二项分布"></a><a href="https://www.shuxuele.com/data/binomial-distribution.html">二项分布</a></h2><p> <strong>概念：</strong> 成功率为P的实验，独立重复 n 次后的成功次数为 x 的概率分布。</p><p> 公式： <img src="https://i.loli.net/2020/02/24/3myYQFjAZ8cRket.png" alt="微信截图_20200224223830.png"></p><p> <img src="https://i.loli.net/2020/02/24/AH8cRKzVXZ2moxU.png" alt="微信截图_20200224224006.png"></p><p> 案例：在各类促销活动中， 抽奖是一种常见的促销方式。现在希望运营方设计一个抽奖模式。用户能够抽10次，中奖概率是10%。如果用户抽中了3次及以上， 则公司会亏本。那么公司亏本的概率是多少？</p><h2 id="正态分布"><a href="#正态分布" class="headerlink" title="正态分布"></a><a href="https://www.shuxuele.com/data/standard-normal-distribution.html">正态分布</a></h2><p> <img src="https://www.statisticshowto.datasciencecentral.com/wp-content/uploads/2013/02/standard-normal-distribution.jpg" alt="正态分布"><br> 性质：</p><ul><li>均值 = 中位数 = 众数</li><li>沿中心线对称，一半在平均值左侧，一半在平均值右侧。</li></ul><p> 特点：</p><ul><li> 69%的数值在离平均值一个标准差之内</li><li>95%的数值在离平均值2个标准差之内</li><li>99.7%的数值在离平均值3个标准差之内</li></ul><p> 补充资料：</p><ul><li><a href="http://www.ruanyifeng.com/blog/2017/08/normal-distribution.html">正态分布为什么常见？</a></li><li><a href="https://www.statisticshowto.datasciencecentral.com/probability-and-statistics/normal-distributions/">正态分布</a></li></ul><h2 id="数据标准化-Z-Score"><a href="#数据标准化-Z-Score" class="headerlink" title="数据标准化-Z-Score"></a><a href="https://www.shuxuele.com/data/standard-normal-distribution.html">数据标准化-Z-Score</a></h2><p> 公式： z = (x - u) / 方差<br> 目的：消除指标之间的量纲和取值范围差异的影响</p><p> 补充资料：<a href="https://blog.csdn.net/weixin_38706928/article/details/80329563">数据规范化（归一化）、及Z-score标准化</a></p><h2 id="切比雪夫定理"><a href="#切比雪夫定理" class="headerlink" title="切比雪夫定理"></a><a href="https://zh.wikipedia.org/wiki/%E5%88%87%E6%AF%94%E9%9B%AA%E5%A4%AB%E4%B8%8D%E7%AD%89%E5%BC%8F">切比雪夫定理</a></h2><ul><li>至少有75%的数据在两个标准差之内</li><li>至少有89%的数据在三个标准差之内</li><li>至少有95%的数据在5个标准差之内</li></ul><p> 举例： 若一班有36个学生，而在一次考试中，平均分是80分，标准差是10分，我们便可得出结论：少于50分（与平均相差3个标准差以上）的人，数目不多于4个（=36*1/9）</p><p> 作用： 用于异常值检测</p><!-- 6. 泊松分布  案例：某医院急救中心一天收到呼叫次数服从泊松分布，平均数为20， 那么该急救中心一天收到15次呼叫的概率是多少？ 收到小于15次呼叫的概率是多少？  excel 函数： POISSON.DIST7. 伯努利分布 8. 几何分布10. 幂律分布8. 假设检验案例：某个APP， 用户购买的平均转化率出25%， 在进行全新的产品设计之后，转化率变成了30%， 这个转化是波动？还是产品改进有效？A/B 测试： Z检验 --><hr><!--  回归分析：我们假设“某年度首都地区盛夏的天数为x天，这一年度首都地区啤酒的总销售额为y日元”。严格来说，y并非x的函数，但是，在某种程度上可以预测，盛夏的天数越多，啤酒的销量就越高。类似这样在数据上并非严格的函数关系，在统计学上，可以概括为[y是x的函数+误差]按照这个逻辑，了解x与y的关系，就可以预测y（啤酒销售额）的值。这种情况下使用的分析方法，叫作回归分析（回归分析是确定两种或两种以上变量间相互依赖的定量关系的一种统计分析方法。 -- --><h1 id="贝叶斯定理"><a href="#贝叶斯定理" class="headerlink" title="贝叶斯定理"></a><a href="https://www.shuxuele.com/data/bayes-theorem.html">贝叶斯定理</a></h1><ol><li><strong>如何判断她喜欢你的概率</strong><br>贝叶斯定理<br>计算方法： 先假定一个概率， 然后根据样本获得新的信息， 根据这些信息对 原先假设的概率进行修正， 得到准确的概率。<br>公式：$P(A|B) = \frac{P(A) * P(B|A)}{P(B)}$</li></ol><p> 假设 你是一名女生， 在情人节这天， 一名男生送给你一盒巧克力， 你可能会有疑问，他是不是喜欢你， 他喜欢你的概率是多大？</p><p> 因为你没有证据来说明你就是他喜欢的类型， 所以， 我们假设 你或者是他喜欢的类型， 或者是一名路人。 假设各有50%的概率。 </p><p> <img src="https://i.loli.net/2018/11/02/5bdc6bb0a6545.png" alt="a"></p><p> 通过调查， 我们发现 一个男生对心意女生送出巧克力的概率为 45%</p><p> <img src="https://i.loli.net/2018/11/02/5bdc6be2e46fa.png" alt="a"></p><p> 对路人送出巧克力的概率 为 20%， 那他现在送给你一盒巧克力， </p><p> <img src="https://i.loli.net/2018/11/02/5bdc6bfeba767.png" alt="b"></p><p> 在他已经送你巧克力的这件事情已经确定了， 所以他们现在是一个整体。他喜欢你的概率是多少呢。 </p><p> 45% / (45% + 20%) = 69.2%<br> 当他送你巧克力时，大概有69、2%的概率会喜欢你</p><p> 当然， 贝叶斯概率 能够计算出这个概率， 但是否要继续， 取决与你。 贝叶斯概率在我们生活中的应用是非常广泛的， 常见的， 比如 在邮件中的反垃圾邮件。 这是一种贝叶斯概率非常好的使用案例。 </p><p> 在上面的推理中， 我们总会觉得贝叶斯定理有些“牵强”,牵强的原因主要是因为先验概率。 这种主观上假定或者大概的概率， 会让人感觉牵强。 但也正是由于设定了先验概率， 贝叶斯定理才会有即是只有少量信息， 也能够进行推理。 当然， 贝叶斯定理有另一学习功能， 就是信息越多， 推理结果就越精确。 </p><hr><ol start="2"><li><strong>快速理解贝叶斯定理</strong></li></ol><p> 假设一家商城， 顾客分为： 想买商品的顾客，和随便逛逛的顾客。  假设， 随机走进来一个顾客，他为有意愿度的顾客占20%， 为随便逛逛的顾客占80%。 现在增加了一个主动询问店员的动作。 </p><p> 假设有意愿度购买的顾客， 向店员询问的概率为70%， 不询问的概率为30%。 随便逛逛的客户， 主动询问店员的购买概率为 10%， 不询问的概率为 90%。 </p><p> 现在问 如果一顾客主动向店员询问， 那么他是有意愿购买的顾客的概率是多少。</p><p> 有意向且询问的概率为  14%。  有意向不询问的概率为  6%</p><p> 无意向且询问的概率为 8%， 无意向且不询问的概率为 72%</p><p> 现在 主动询问这个动作已经做出了， 所以总体为两部分： 有意向且询问， 和无意向且询问</p><p> 14:8 = 7:4。    所以她有意向且愿意购买的概率为   7/11   63.6% </p><hr><ol start="3"><li><strong>贝叶斯： 通过结果来反推原因</strong></li></ol><p> 参加活动的人群中，女性只占30%， 是否说明女性不喜欢参加此类活动？</p><p> 某种疾病的发病率为千分之一。现在有一种试纸，它在患者得病的情况下，有99%的准确率判断患者得病，在患者没有得病的情况下，有5%的可能误判患者得病。现在试纸说一个患者得了病，那么患者真的患病的概率是多少？</p><p> 某城市有两种颜色的出租车，蓝车和绿车市场比率为15:85。 一辆出租车肇事逃逸，当时有一位目击者证人，这位证人认定肇事的出租车是蓝色的。但是他的目击未必可信，公安人员经过在相同环境下对该目击者进行“蓝绿”测试得到：80%的情况下识别正确，20%的情况下不正确。那么实际为蓝车的可能性是多少？</p><p> 我们经常会受到垃圾短信，假设1000条正常短信中，包含【澳门赌场】的短信有2条，而在垃圾短信中，包含澳门短信的短信有400条。<br> 现在我们接受到了一条新短信，在不浏览内容的情况下，假定它的正常几率是50%。现在对短信内容进行解析，发现澳门赌场这个词，那么它是垃圾短信的概率有多高。</p><ol start="4"><li>补充资料：</li></ol><ul><li><a href="http://mindhacks.cn/2008/09/21/the-magical-bayesian-method/">数学之美番外篇：平凡而又神奇的贝叶斯方法</a></li><li><a href="https://book.douban.com/subject/30229508/">《统计学关我什么事》</a></li><li><a href="http://www.ruanyifeng.com/blog/2011/08/bayesian_inference_part_one.html">贝叶斯推断及其互联网应用（一）：定理简介</a></li><li><a href="https://www.jiqizhixin.com/articles/2017-09-19-6">贝叶斯学习与未来人工智能</a><!--  * 贝叶斯奥卡姆剃刀《数学之美》第24章《决策与判断》 --<!-- [Machine Learning, a Probabilistic Perspective](https://amstat.tandfonline.com/doi/abs/10.1080/09332480.2014.914768?journalCode=ucha20#.W9nMJPkzbIU) --></li></ul><hr><h1 id="前言：为什么应该学点统计学"><a href="#前言：为什么应该学点统计学" class="headerlink" title="前言：为什么应该学点统计学"></a>前言：为什么应该学点统计学</h1><p> 统计学是人类发明用来研究我们自身的科学，它与我们的生活息息相关。 小到支付宝根据用户个人消费数据判断其消费水平，从而有针对性进行限额借贷。大到国家通过国民生产总值这样的统计数据分析，来研究国家经济发展趋势等， 都需要用到统计学知识。</p><p> 我们可以从统计大师 Hans Rolling 的演讲中， 来看下 1960 年到 2003 年的世界各国出生率与经济发展是如何变化的。</p><p> <a href="https://www.youtube.com/watch?v=RUwS1uAdUcI&amp;t=1065s">Hans Rolling —— 统计的魅力</a></p> <iframe width="560" height="315" src="https://www.youtube.com/embed/RUwS1uAdUcI" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe><p> 有人会问，统计学那么多高深的概念和复杂的算术， 在平时的生活中自己也应用不到。 这种想法其实是错误的。<strong>我们学习统计学， 不光是学习怎么对数据进行统计计算，更重要的是学会运用统计思维去更理性地看待周围的事物。</strong></p><blockquote><p>比如， 最近报道的一名美国公民在 10 月 23 号中了 16 亿美元的彩票， 看到这则消息，你会不会也有点心动， 也想去买个彩票。其实， 关于是否要买彩票，统计学有一个重要的概念来衡量：<strong>期望值</strong></p><p>即同一种行为多次重复之后，所能得到的平均收益</p><p>举例来说， 假如某彩票规则为：每次买张彩票需要 2 元，假设 200 次抽奖可以中奖一次，奖金为 300 元。</p><p>期望值 = 300 *(1/200) + 0 * (199/200) = 1.5。</p><p>期望值是 1.5 元， 但是每次抽奖成本为 2 元， 于是每次净亏损 0.5 元。如果你偶尔买一次就算了， 但如果你长期买彩票，就肯定会亏很多钱。 况且现实生活中，中奖的概率远远低于 1/200</p></blockquote><p> 你可能会觉得，概率那么低， 那我怎么感觉天天有人中奖呢， 这背后其实是媒体的选择性报道， 也就是统计学中的<strong>幸存者偏差问题</strong>。</p><blockquote><p>例如：二战期间，盟军为减少飞机在敌人防空炮火中的损失，军方决定为飞机加装防护，多数人认为，应该在机身中弹多的地方加强防护。但统计学家沃德认为，应该给那些没有中弹的油箱和驾驶部位进行防护，因为这些部位中弹的飞机根本没有机会飞回来。</p></blockquote><p> <strong>现实生活中，也往往会存在一些幸存者偏差的数据，我们生活中接触的数据越来越多， 解读数据背后的信息， 辨析数据真伪就显得非常的重要</strong>，这则视频对此有更深入的讲解。</p><p> <a href="https://www.youtube.com/watch?v=AbMTG8bzVfY&amp;t=66s">成功学有用吗？幸存者偏差，一个活着就该明白的事！李永乐老师</a><br> <iframe width="560" height="315" src="https://www.youtube.com/embed/AbMTG8bzVfY" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe></p><p> 那么统计学到底要学什么呢？统计学主要学习两个方面:</p><ol><li>描述统计， 描述数据的基本情况</li></ol><p> 通过研究数据的平均值，中位数，标准差等指标， 来了解数据的整体分布状况，从杂乱的数据中得出有用的信息</p><ol start="2"><li>推理统计，根据样本数据来对总体进行估计</li></ol><p> 通过对样本数据的研究， 来对总体数据进行估计，评估推理数据的准确度，统计学中就会通过置信度， 卡方分布等来对总体进行估计。</p><p> <strong>统计学是我们将客观数据转化成有用信息的一把钥匙， 运用统计概念对一些更为广泛而大致的信息及规律进行思考， 可以改善我们做出的判断和决定。我们当然不能指望这些判断不出错误， 但每一个好的决策都会帮助你更有效的利用这些信息，积少成多，把事情做成的概率会大很多。</strong> </p><p> 视频资料补充：<br> <a href="https://v.qq.com/x/page/n0146d3s4zj.html">Hans Rolling —— 东方崛起</a><br> <iframe frameborder="0" src="https://v.qq.com/txp/iframe/player.html?vid=n0146d3s4zj" allowfullscreen="true"></iframe></p><p> <a href="https://v.qq.com/x/page/l03817zzhl2.html">为什么应该学点统计学</a><br> <iframe frameborder="0" src="https://v.qq.com/txp/iframe/player.html?vid=l03817zzhl2" allowfullscreen="true"></iframe></p><p> <a href="https://www.bilibili.com/video/av8225730/?redirectFrom=h5">数据的乐趣</a><br> <iframe src="//player.bilibili.com/player.html?aid=8225730&amp;cid=13540431&amp;page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe></p><hr><h2 id="为什么要学习概率分布"><a href="#为什么要学习概率分布" class="headerlink" title="为什么要学习概率分布"></a>为什么要学习概率分布</h2><p>任何知识的创造，都是为了让我们更好的理解这个世界是如何运作的，概率率也是这样。</p><p>概率论的产生，就是让我们对未来发生的随机事情，在数学上给出一个准确的判断。 </p><p>概率论解决问题的本质，就是把局部的随机性转变为整体上的确定性。 ？？？？？？？？？？</p><h2 id="概率论需要了解的四个基础知识"><a href="#概率论需要了解的四个基础知识" class="headerlink" title="概率论需要了解的四个基础知识"></a>概率论需要了解的四个基础知识</h2><ol><li>随机</li></ol><p><strong>随机就是你知道试验所有可能会出现的结果，只是不知道下一次会出现什么结果。</strong> </p><p>比如扔硬币，你知道结果是正面或者反面，但下一次扔你不能确定它一定是正面。 </p><p>随机性 != 不确定性， 不确定性是你连所有可能出现的结果都不知道</p><p>比如，今天出门你会遇到什么，这个是不确定性，因为出门可能会遇到的事情太多了。 </p><ol start="2"><li>概率<br><strong>概率是随机事件发生可能性大小的定量描述</strong></li></ol><p>任何你关心的事情，只要先设定一个条件，然后从可能性的角度出发，对某一个发生结果进行陈述，就可以转化成随机事件，进行概率度量。<br>比如， </p><h2 id="基本概念：随机变量、分布函数、概率密度函数"><a href="#基本概念：随机变量、分布函数、概率密度函数" class="headerlink" title="基本概念：随机变量、分布函数、概率密度函数"></a>基本概念：随机变量、分布函数、概率密度函数</h2><ol><li><p>什么是随机变量，随机变量和随机试验之间有什么关系？</p></li><li><p>如何区分不同的随机变量？</p></li><li><p>什么是样本？样本和随机变量之间有什么关系？</p></li><li><p>随机变量是怎么分类的？分类依据是什么？</p></li><li><p>常见的离散型随机变量有哪些？它们各自有什么样的分布律？</p></li><li><p>常见的连续性随机变量有哪些？它们各自有什么样的概率密度函数？</p></li></ol><h1 id="统计学网站"><a href="#统计学网站" class="headerlink" title="统计学网站"></a>统计学网站</h1><ol><li><a href="https://seeing-theory.brown.edu/compound-probability/cn.html">看见统计学</a></li><li><a href="https://www.shuxuele.com/data/index.html">数学很好玩</a></li><li><a href="https://do.minik.us/">数据可视化-博客</a></li><li><a href="https://www.codecogs.com/latex/eqneditor.php">数学公式转换为markdown格式</a></li><li><a href="https://book.douban.com/subject/27038537/">《写给所有人的极简统计学》</a></li></ol><hr>]]></content>
      
      
      <categories>
          
          <category> 数据分析技能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据分析 </tag>
            
            <tag> 统计学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>思考系统</title>
      <link href="/2018/10/14/2020-03-31-%E9%80%9A%E7%94%A8-%E6%80%9D%E8%80%83%E8%83%BD%E5%8A%9B-%E6%80%9D%E8%80%83%E7%B3%BB%E7%BB%9F/"/>
      <url>/2018/10/14/2020-03-31-%E9%80%9A%E7%94%A8-%E6%80%9D%E8%80%83%E8%83%BD%E5%8A%9B-%E6%80%9D%E8%80%83%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="批判性思维"><a href="#批判性思维" class="headerlink" title="批判性思维"></a>批判性思维</h1><h2 id="图尔敏模型"><a href="#图尔敏模型" class="headerlink" title="图尔敏模型"></a>图尔敏模型</h2><p> <img src="https://i.loli.net/2020/03/10/PNtsn39cULezuSm.png" alt="未命名文件.png"></p><ul><li>举例：<blockquote><p>小明出生在北京，所以小明是中国人。</p></blockquote></li><li>论题： 小明出生在北京</li><li>前提： 在北京出生的是中国人</li><li>支撑： 现有法律规定</li><li>逻辑推理： 在北京出生的是中国人，小明在北京出生，所以小明是中国人。</li><li>反例：小明后来移民加拿大。</li><li>对推理的限定： 小明并非一定就是中国人</li><li>结论：因为小明出生在北京，所以小明可能是中国人。</li></ul><hr><h2 id="对各个模块进行解释"><a href="#对各个模块进行解释" class="headerlink" title="对各个模块进行解释"></a>对各个模块进行解释</h2><ol><li>论题<br>论题是要讨论的问题或争议。</li></ol><p> 论题分为两种形式：</p><ul><li>一种是对事实的讨论，比如：服用中药 <em>是不是</em> 能治好疾病，杨教授的学术研究水平 <em>怎么样</em>？ 人口出生率下降的原因 <em>是什么</em>？</li><li>另一种是对价值主张的讨论， 比如：大学生 <em>应不应该</em> 读研， 对全民医疗 <em>应该</em> 采取什么样的态度？</li></ul><p> 不同类型的论题，做出的评价是不同的，我们在讨论一件事情时，<strong>要检查两点</strong>：</p><ul><li><strong>我们是在讨论某个事实，还是讨论价值主张。</strong></li><li><strong>我有没有正面回答问题。</strong></li></ul><ol start="2"><li>结论<br>结论是要让你相信的观点和信息, 必须是有论证支撑的观点。</li></ol><ul><li><strong>没有论据支撑的观点不能叫结论。</strong></li><li>当某人说出他的观点时， 我们应该马上问：你这个看法有什么依据？</li></ul><p> 注意问题：</p><ul><li><p><strong>偷换结论</strong><br>用一个相关性很强的结论来换掉正面回答问题的结论。</p></li><li><p><em>原理：默认预设，认为结论只能二选一。</em>*</p></li><li><p>鱼和熊掌不可兼得，我拿不到鱼，所以我会拿到熊掌。</p></li><li><p> 年轻人不愿意生孩子，所以养猫的人会越来越多。</p></li><li><p><strong>先有结论，再证明合理</strong><br>人先作了决定，然后给出的理由并不是来推导这个决定，而是想办法维护这个决定。</p></li></ul><p> 在作一些决定和选择时，要先问自己：影响决策的是理性判断还是情绪等影响。</p><ol start="3"><li>论证前应明确的两个问题</li></ol><p>  <strong>明确对方是在进行论证，还是在进行解释。</strong></p><ul><li>解释并没有证明论证确实成立，而是把结论变成了默认前提。<br>论证是指：我还没有相信或者认同你，你得证明你的判断。</li><li> 将 <strong>因为</strong> 用 <strong>根据…、基于…、理由是…</strong> 来进行替换， 将 <strong>所以</strong> 用 <strong>得出…、推断…、证明…</strong> 来进行替换，看语句是否通顺。</li><li><ul><li>我在吃饭，因为我往嘴里塞食物。</li></ul></li></ul><p>  解释是指：我们已经承认了事实，视图说明为什么事实是这样的。</p><ul><li><p> 将 <strong>因为</strong> 用 <strong>归因于…</strong> 来进行替换， 将 <strong>所以</strong> 用 <strong>导致…</strong> 来进行替换，看语句是否通顺。</p></li><li><ul><li>我在吃饭，因为我饿了。</li></ul></li><li><p><em>识别概念的定义区别</em>*</p></li><li><p> 在论题、论证和结论中出现的概念是一致的吗,这些观念会误导别人吗？</p></li><li><p> 关键概念的定义准确吗？</p></li><li><p>在思考和论证的过程中，把一件事定义清楚。<br>参考：《学会提问》第4章</p></li></ul><ol start="4"><li>挖掘论证中两种隐藏假设</li></ol><p> <strong>事实判断型的假设</strong>，</p><ul><li><p>这个世界是什么样的？一个理由是否能证实结论，主要取决于我们能否找到没有明说出来的想法，将理由和结论从逻辑上联系起来。<br>比如：每天一个鸡蛋，能补充蛋白质。假定：鸡蛋是富含蛋白质的。 </p></li><li><p>如何找出描述性假设</p></li><li><p>不断思考理由和结论之间的关系，寻找支持理由的想法、</p></li><li><p>把自己放到相反立场</p></li><li><p>*价值判断型的假设**，</p></li><li><p>这个世界应该如何选择？价值观假设是认为某些价值观中一个比另一个更重要，并且选择的价值观会对结论产生重大影响，同时也影响他捍卫结论的方式，但是这种价值取向并没有说明。<br>比如价值观冲突： 忠诚-诚实、竞争-合作、媒体自由-国家安全、平等-个人主义、秩序-言论自由、理性-冲动。</p></li><li><p>如何找出价值观假设</p></li><li><p>言论者的背景是什么，他代表了哪方的利益？</p></li><li><p>注意作者用来证实结论的各种理由，然后判断哪些价值取向会导致作者认为这些理由比另一些理由更可取，而另一些理由其实可以从论题的另一方面进行论证。</p></li><li><p>如果我和作者站在相反的立场，我会如何反驳</p></li><li><p><em>判断假设</em>*</p></li><li><p>这个假设和我的个人经验冲突不？</p></li><li><p>这个假设是来自哪里的，消息来源可靠吗？</p></li><li><p>我自己想法，背后的隐藏假设是什么？</p></li></ul><ol start="5"><li>支撑</li></ol><ul><li>支撑是双方都公认的法则或常识。</li><li>法律法规</li><li>经检验的科学研究</li><li>注意类比的质量。</li></ul><ol start="6"><li>反例</li></ol><ul><li>对相反观点的论证，以达到论证的全面性。</li></ul><ol start="7"><li>常见谬误：<br>参考下文：常见谬误详解</li></ol><hr><h2 id="用图尔敏模型进行议论文写作"><a href="#用图尔敏模型进行议论文写作" class="headerlink" title="用图尔敏模型进行议论文写作"></a>用图尔敏模型进行议论文写作</h2><ol><li>对文章主题进行介绍</li></ol><ul><li>介绍能够引起读者注意的内容</li><li>对要表述的问题进行陈述</li><li>表达你的结论，并给出使用范围。</li></ul><ol start="2"><li>提出证据来支撑论证</li></ol><ul><li>证据1、2</li></ul><ol start="3"><li>提供支撑保证的理由和事实，根据个人实践和理论来说明保证的合理性。</li></ol><ul><li>支撑1、2</li></ul><ol start="4"><li>回答反驳</li></ol><ul><li>反驳1</li><li>对反驳1的回答<br>…</li></ul><ol start="5"><li>结论</li></ol><ul><li>概括论证和结论的要点，指出论证的意义，能够让读者印象深刻。</li></ul><hr><h2 id="用图尔敏模型进行分析性写作"><a href="#用图尔敏模型进行分析性写作" class="headerlink" title="用图尔敏模型进行分析性写作"></a>用图尔敏模型进行分析性写作</h2><p>对某一文章质量进行评判</p><ul><li>理解主题论点，澄清概念的意义。</li><li>审查理由质量，挖掘潜在的假设。</li><li>分析论证结构，评估推理的强弱。</li><li>考虑替代论证， 提出完善的建议。</li></ul><h2 id="学习资料"><a href="#学习资料" class="headerlink" title="学习资料"></a>学习资料</h2><ul><li><p>课程-中国青年政治学院：批判性思维（谷振诣教授）</p><iframe src="//player.bilibili.com/player.html?aid=9624662&amp;cid=15907095&amp;page=3" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe></li><li><p><a href="https://en.wikipedia.org/wiki/Toulmin_method">Toulmin method</a></p></li><li><p><a href="https://pan.baidu.com/s/1jHFsnFw?fid=154817059834328">《逻辑新引.怎样辨别是非》</a></p></li><li><p><a href="https://book.douban.com/subject/1863497//">《beyond feelings》</a></p></li><li><p>《简单的逻辑学》</p></li><li><p>《学会提问》</p></li><li><p>《蔡钰-批判性思维15讲》</p></li><li><p><a href="https://www.youtube.com/watch?v=kBdfcR-8hEY&amp;list=PL30C13C91CFFEFEA6">Justice – What’s the right thing to do?</a></p></li></ul><!--  * [Critical Reasoning for Beginners》](https://www.youtube.com/watch?v=kBlQj5uiOXc&list=PLA795AB5BDDD2B0B3) --><hr><h1 id="结构化思维"><a href="#结构化思维" class="headerlink" title="结构化思维"></a>结构化思维</h1><p> 对信息进行<strong>识别、归纳、概括、总结和表达。</strong></p><p><img src="https://i.loli.net/2020/03/16/QbL2rwTzn9tcvy8.jpg" alt="微信图片_20200316111654.jpg"></p><h2 id="识别信息"><a href="#识别信息" class="headerlink" title="识别信息"></a>识别信息</h2><p> 纵向上的总分结构</p><ul><li>识别结论</li><li>识别理由</li><li>识别事实<br>参考:上文批判性思维</li></ul><h2 id="归纳信息"><a href="#归纳信息" class="headerlink" title="归纳信息"></a>归纳信息</h2><p> 横向上的分类结构</p><ul><li> MECE 分类法： 不重不漏</li><li>二分法</li><li>过程法： 发展时间、运作流程</li><li>要素法：从上到下、从外到内、从整体到局部</li><li>公式法：按照公式的要素去分类。</li><li>矩阵法</li><li>特定场景模型：<a href="https://zhangandyu.github.io/2019/02/26/%E6%96%B9%E6%B3%95-%E5%B8%B8%E8%A7%81%E7%9A%84%E5%88%86%E6%9E%90%E6%A8%A1%E5%9E%8B/">常见的分析思维模型</a></li></ul><h2 id="总结概括信息"><a href="#总结概括信息" class="headerlink" title="总结概括信息"></a>总结概括信息</h2><p> <img src="https://i.loli.net/2020/03/16/75y3u8AHNkYOoDl.jpg" alt="微信图片_20200316111700.jpg"><br>  <strong>归纳法</strong></p><ul><li> 根据许多个别事物的特殊性来概括出同类事物的特性。</li></ul><p>   描述性概括</p><ul><li> 找出事物属性上的共同点。</li></ul><p>   行动性概括</p><ul><li> 最终结果是什么，找出事物结果的共性。</li></ul><p><strong>演绎法</strong></p><ul><li> 将某一事实与对应的某个规律联系再一起，得出结论。</li></ul><p>  注意事项：</p><ul><li>大前提一定要无可争议，避免主观判断，并且罗列不能过长。</li><li>小前提是一个已经发生的事实。</li></ul><h2 id="清晰表达"><a href="#清晰表达" class="headerlink" title="清晰表达"></a>清晰表达</h2><p><strong>1.结论先行</strong><br>  表达时先说结论</p><p><strong>2.以上统下</strong><br> 上一层次要点必须是下一层次的概括</p><p><strong>3.归类分组</strong><br>  每一组要点必须属于同一范畴</p><p><strong>4.逻辑递进</strong><br>  每个要点必须按照一定的逻辑顺序排列。</p><ul><li>演绎推理</li><li>时间/步骤顺序</li><li>空间顺序</li><li>重要性顺序</li></ul><p>注意事项： 结论先行，重要的理由说三点。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li>《得到-有效训练你的结构化思维》</li><li>《金字塔原理》</li></ul><hr><h1 id="如何解决问题"><a href="#如何解决问题" class="headerlink" title="如何解决问题"></a>如何解决问题</h1><h2 id="1-明确和理解问题"><a href="#1-明确和理解问题" class="headerlink" title="1. 明确和理解问题"></a>1. 明确和理解问题</h2><ul><li>明确问题的本质到底是什么</li><li>跟领导确认希望达到的目标</li><li>明确可以利用的资源</li></ul><h2 id="2-拆分和定位问题"><a href="#2-拆分和定位问题" class="headerlink" title="2.拆分和定位问题"></a>2.拆分和定位问题</h2><ul><li>用公式思维拆解问题</li><li>逻辑树-金字塔原理（mece法则)</li><li>假设驱动-假设问题可能出现在某个细分的问题点上。</li></ul><h2 id="3-提出解决方案并总结"><a href="#3-提出解决方案并总结" class="headerlink" title="3.提出解决方案并总结"></a>3.提出解决方案并总结</h2><ul><li>结论先行<br>参考上文：结构化思维</li></ul><!-- ## 4. 个人目标解决方案* 熟悉所在领域的业务和常识，不断问自己为什么* 列一个清单，然后排序做选择* 假设一种无条件获得的极端情况* 不断了解你的选择，不断的去试错 --><h2 id="4-工作中解决问题的方法"><a href="#4-工作中解决问题的方法" class="headerlink" title="4. 工作中解决问题的方法"></a>4. 工作中解决问题的方法</h2><ol><li>快速按照理解去做拆解，去做思维导图， 能想到多少是多少</li><li>拿着拆解思维导图去跟业务方的人去请教，一定要找到业务方真正关心的点</li><li>结合业务方给出的具体建议， 修改第一步的思维框架， 做完后，请教你的领导</li><li>再改一次， 回报给业务方领导</li><li>遇到坑之后， 一定要文档详细记录下来。</li></ol><ul><li>让团队中其他人知道， 节省团队时间。</li><li>知道自己在哪块花了大量时间，为后续分析节省时间。</li></ul><h2 id="5-生活中问题解决的4个层次"><a href="#5-生活中问题解决的4个层次" class="headerlink" title="5. 生活中问题解决的4个层次"></a>5. 生活中问题解决的4个层次</h2><ol><li>有没有找到真正的问题， 人都是有逃避心理的。</li><li>想到了问题的第几层</li><li>想到了最后一层， 并且去执行解决问题</li><li>做到了，并且分享帮助别人</li></ol><hr><h1 id="常见谬误详解"><a href="#常见谬误详解" class="headerlink" title="常见谬误详解"></a>常见谬误详解</h1><p>1.幸存偏误<br>  在生活中更容易看到成功者的故事，看不到失败， 你会系统性地高估成功的概率。</p><p>2.游泳选手身材错觉<br>  你看到游泳选手的身材好，因此你觉得游泳就可以练就这样的身材。你觉得用这个护肤品的模特都好漂亮， 因此你觉得用了这个护肤品自己也可以变漂亮。 </p><p>  其实是因为他们有这样的好身材， 所以他们才能被选为游泳运动员。  和游泳能够练就这样的身材没有直接的关系。 </p><p>  用这个护肤品的模特好看， 是因为这个模特好看， 所以她才能被选做拍这个护肤品的广告， 和这个护肤品可以让自己更漂亮没有直接关系。 </p><p> 3.过度自信效应<br>  系统性地高估自己的学识和能力<br>  过度自信会令你忽视你真正掌握的能力与你已知的知识之间的区别<br>  这个怎么理解呢， 就是你很多知识， 你只是了解， 而并非已经内化成你的能力， 而你会错误的把它归为你能力的一部分。 比如你说你会python, 但当你真正写的时候， 你却写不出来， 其实你没有掌握</p><p> 4.诉诸结果<br>  依据某观点成立所产生的结果好坏，来判断一个观点是否正确。 </p><p> 5.稻草人谬误<br>  有意地模仿他人观点，以达到攻击模仿出来的观点而非实际论点的目的。</p><p> 6.诉诸无关权威<br>  诉诸不是问题专家的人， 其观点更可能是错误的。 例如：信仰中医，而不相信现代医学</p><p> 7.虚假两难<br>  给出一个有两种范畴组成的有限集合， 并假设讨论范围内的一切事物都必须属于该集合。因此<br>  若拒绝其中一个范畴，便只好接受另一个。<br>  例如： 世界上只有两种人，男人和女人， 你既然不是女人， 那么你一定是男人。</p><p> 8.人身攻击<br>  通过攻击一个人本身，而不是攻击其论点，以转移讨论话题，最终达到诋毁其论点的目的。<br>  “侮辱性人身攻击” ： 你又不是专家， 你有什么资格发言<br>  “处境类人身攻击” ： 对他们的动机作出判断。 你又不是真正关心降低城市犯罪率， 你只是想要人们投票给你。</p><p> 9.循环论证<br>  你完全错了， 因为你说得没有道理。<br>  你应该相信上帝， 否则你会下地狱。</p><p> 10.从众心理</p><p> 11.纠缠于沉迷成本<br> 我已经买了电影票了， 电影再烂也要看完。<br>  我已经在这段恋情中投入了那么多感情， 现在离开她是不明智的。<br>  我已经在这支股票中投了那么多钱了， 现在就收手会亏本的， 说不定以后会涨的。</p><ul><li>你应该看的是现在的形势以及你对未来的评估。</li></ul><p>12.互惠偏误<br>  先送你一束花， 然后让你捐赠。</p><ul><li>诉诸公众</li><li>诉诸感情</li><li>滑坡谬误</li><li>偷换概念</li><li>转移话题</li><li>因果混淆：相关并不能证明因果。</li><li>事后归因<br>参考资料：</li><li>《简单的逻辑学》第5章</li><li>《有用的逻辑学》</li></ul><hr><!-- ----- <!-- ------------------------------------------------- 《精准表达：让你的方案在最短的时间内打动人心》逻辑思考能力， 语言组织能力1. 为什么说话要讲逻辑为了让任何人都能够听懂并接受我们的方案。 对方与我们的文化背景大不相同， 或者与我们持相反一件， 不注意讲话的逻辑， 对方可能听不懂我们的方案。 2. 什么是逻辑把语言合理的组织起来 3. 有逻辑的讲话分为哪些方面* 纵向逻辑 因为A， 所以B。 因为B， 所以C。 * 横向逻辑 - MECE 分析法 A包含B和C。 4. 缺乏逻辑性：* 缺乏纵向逻辑 - 真的是这样吗* 缺乏横向逻辑 - 仅仅是这样吗5. 真的是这样吗？纵向逻辑组织的不好， 因果关系比较薄弱。 当对方要求你仔细解释你的纵向逻辑时， 你能回答出来。 做到针对对方的提问能够详细的做出解释。 6. 真的是这样吗？未能合理把握整体思路， 出现了遗漏和重复。 覆盖范围广、分类细致。 7. 纵向逻辑薄弱的原因* 前提条件不同因为A， 所以B。 但是A 包含 A1, A2, A3, A4等隐形前提。 要做到有逻辑性地讲话， 应该先质疑自己的前提条件。 想想一个与自己前提条件大不相同的人， 设想他可能会提出怎么的问题。 发现自己的隐形前提。 * 把不同性质的东西混为一谈因为A, 所以B。 但A的范围里包含了A1、A2、A、3 等不同性质的东西反省自己的额言论， 看自己是否把不同东西混为一谈了。 是否有必要把这件事细致分类， 再进行讨论。 * 偶然的必然化因为A， 所以B。 但是A到B之间原因太过跳跃， 让听众以为是偶然事件。 思考哪些印因素可能会破坏因果关系，先想象一下具体情形， 然后按照顺序想想最坏的情形。 8. 如何加强横向逻辑体会语言中的层次感把不同角度的概念拉拢到同一平面。 然后再讨论遗漏与重复的重复等问题。 如何把不同角度的概念拉到同一平面？* 面对同一概念， 不同的人有不同的看法。 * 面对同一概念， 不同的人会从不同的切入点开始展开联想。 首先， 确认对方是以何种立场还思考问题的。 其次， 确认对方设想的是何种场景。 如何实现MECE状态？* 使用架构5p, 营销理论3c, 战略模型7S模型SPRO, SPCO模型AIDAS原理PDCA循环根据具体情况采用合理架构。* 避免遗漏六维度理论常见的三个维度， 维度4, 时间的流动。 维度5， 信息、电力、交易等物质的流动维度6， 人们的心情和习惯* 消除重复当我们同时具备了 横向逻辑 和 纵向逻辑， 就构建了金字塔结构。  -- -->]]></content>
      
      
      <categories>
          
          <category> 个人系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逻辑 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一个好用的插件</title>
      <link href="/2018/09/25/2020-04-02-%E7%94%9F%E6%B4%BB-%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93-%E5%A5%BD%E7%94%A8%E7%9A%84%E6%8F%92%E4%BB%B6%E5%B7%A5%E5%85%B7/"/>
      <url>/2018/09/25/2020-04-02-%E7%94%9F%E6%B4%BB-%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93-%E5%A5%BD%E7%94%A8%E7%9A%84%E6%8F%92%E4%BB%B6%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<h1 id="一个好用的插件神器"><a href="#一个好用的插件神器" class="headerlink" title="一个好用的插件神器"></a>一个好用的插件神器</h1><p>最近发现了一个特别能够提高生活幸福感的插件：<a href="https://tampermonkey.net/">Tampermonkey</a>, 中文翻译过来叫做油猴。 </p><p><img src="https://i.loli.net/2018/09/25/5baa2c1e20259.png" alt="a"></p><p>安装好这个插件最大的作用， 就是我们可以从<a href="https://greasyfork.org/zh-CN">Greasy Fork</a>这个网站来安装我们需要的脚本， 从而极大的提高浏览器的使用效率。</p><p>比如：我们在<a href="https://greasyfork.org/zh-CN">Greasy Fork</a>网站找到<a href="https://greasyfork.org/zh-CN/scripts/35251-%E6%99%BA%E8%83%BD%E5%88%92%E8%AF%8D%E7%BF%BB%E8%AF%91">智能划词翻译</a>这个脚本， 然后点击安装脚本即可。<br><img src="https://i.loli.net/2018/09/25/5baa2f1ca7ec9.png" alt="智能划词翻译"><br>安装完成脚本之后， 我们打开一个英文网页，对需要翻译的段落进行框选，点击翻译按钮，就可实现在原网页查看中文翻译， 对于我这种英语不好的人来说，  有很大的帮助。<br> <img src="https://i.loli.net/2018/09/25/5baa2fafa467c.png"> </p><p>我们还可以安装<a href="https://greasyfork.org/zh-CN/scripts/3249-yet-another-weibo-filter">微博过滤设置</a>脚本，来对微博页面进行个性化设置， 自己设置完成后的微博页面是这个样，相对于原版网页来说简洁了不少。<img src="https://i.loli.net/2018/09/25/5baa3127ae4e8.png"></p><p>也可安装<a href="https://greasyfork.org/zh-CN/scripts/4233-miniblogimgpop-%E5%BE%AE%E5%8D%9A%E6%B5%AE%E5%9B%BE">微博浮图</a>脚本， 查看微博图片也比较方便， 只需把鼠标光标放在图片上即可<img src="https://i.loli.net/2018/09/25/5baa316b9fc84.png"></p><p>如果想找资料或电影资源的话， 也可以下载<a href="https://greasyfork.org/zh-CN/scripts/329484-%E8%B1%86%E7%93%A3%E8%B5%84%E6%BA%90%E4%B8%8B%E8%BD%BD%E5%A4%A7%E5%B8%88-1%E7%A7%92%E6%90%9E%E5%AE%9A%E8%B1%86%E7%93%A3%E7%94%B5%E5%BD%B1-%E9%9F%B3%E4%B9%90-%E5%9B%BE%E4%B9%A6%E4%B8%8B%E8%BD%BD">豆瓣资源下载大师</a>, 或<a href="https://greasyfork.org/zh-CN/scripts/39504-%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98%E7%9B%B4%E6%8E%A5%E4%B8%8B%E8%BD%BD%E5%8A%A9%E6%89%8B-%E7%9B%B4%E9%93%BE%E5%8A%A0%E9%80%9F%E7%89%88">百度网盘直接下载助手</a>等脚本， 当然，有能力还是要支持正版。</p><p>例如：安装<a href="https://greasyfork.org/zh-CN/scripts/329484-%E8%B1%86%E7%93%A3%E8%B5%84%E6%BA%90%E4%B8%8B%E8%BD%BD%E5%A4%A7%E5%B8%88-1%E7%A7%92%E6%90%9E%E5%AE%9A%E8%B1%86%E7%93%A3%E7%94%B5%E5%BD%B1-%E9%9F%B3%E4%B9%90-%E5%9B%BE%E4%B9%A6%E4%B8%8B%E8%BD%BD">豆瓣资源下载大师</a>脚本后， 打开豆瓣电影网页， 页面是这个样子。<br><img src="https://i.loli.net/2018/09/25/5baa328561727.png" alt="豆瓣页面"></p><p>在<a href="https://greasyfork.org/zh-CN">Greasy Fork</a>这个网站还有很多别人写好的脚本， 比如<a href="https://greasyfork.org/zh-CN/scripts/369861-%E7%99%BE%E5%BA%A6%E6%96%87%E5%BA%93%E6%96%87%E5%AD%97%E5%A4%8D%E5%88%B6">百度文库文字复制</a>、<a href="https://greasyfork.org/zh-CN/scripts/14466-%E8%B4%AD%E7%89%A9%E5%85%9A%E8%87%AA%E5%8A%A8%E6%AF%94%E4%BB%B7%E5%B7%A5%E5%85%B7-%E9%A2%86%E5%8F%96%E6%B7%98%E5%AE%9D%E5%86%85%E9%83%A8%E5%88%B8">购物党自动比价工具</a>、 <a href="https://greasyfork.org/zh-CN/scripts/8426-download-youtube-videos-and-subtitles">Download Youtube videos and subtitles</a>等好用的脚本， 可以根据自己的需要进行安装。 </p><hr>]]></content>
      
      
      <categories>
          
          <category> 生活资料 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2018/09/07/2020-08-10-hello-world/"/>
      <url>/2018/09/07/2020-08-10-hello-world/</url>
      
        <content type="html"><![CDATA[<table><thead><tr><th>配置选项</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>title</td><td>Markdown 的文件标题</td><td>文章标题，强烈建议填写此选项</td></tr><tr><td>date</td><td>文件创建时的日期时间</td><td>发布时间，强烈建议填写此选项，且最好保证全局唯一</td></tr><tr><td>author</td><td>根 _config.yml 中的 author</td><td>文章作者</td></tr><tr><td>img</td><td>featureImages 中的某个值</td><td>文章特征图，推荐使用图床(腾讯云、七牛云、又拍云等)来做图片的路径.</td></tr><tr><td>top</td><td>true</td><td>推荐文章（文章是否置顶），如果 top 值为 true，则会作为首页推荐文章</td></tr><tr><td>cover</td><td>false</td><td>v1.0.2版本新增，表示该文章是否需要加入到首页轮播封面中</td></tr><tr><td>coverImg</td><td>无</td><td>v1.0.2版本新增，表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片</td></tr><tr><td>password</td><td>无</td><td>文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 password 的值，该值必须是用 SHA256 加密后的密码，防止被他人识破。前提是在主题的 config.yml 中激活了 verifyPassword 选项</td></tr><tr><td>mathjax</td><td>false</td><td>是否开启数学公式支持 ，本文章是否开启 mathjax，且需要在主题的 _config.yml 文件中也需要开启才行</td></tr><tr><td>summary</td><td>无</td><td>文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</td></tr><tr><td>categories</td><td>无</td><td>文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类</td></tr><tr><td>tags</td><td>无</td><td>文章标签，一篇文章可以多个标签</td></tr><tr><td>keywords</td><td>文章标题</td><td>文章关键字，SEO 时需要</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typora </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>双拼输入法</title>
      <link href="/2017/09/17/2020-02-22-%E7%94%9F%E6%B4%BB-%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93-%E5%8F%8C%E6%8B%BC%E8%BE%93%E5%85%A5%E6%B3%95/"/>
      <url>/2017/09/17/2020-02-22-%E7%94%9F%E6%B4%BB-%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93-%E5%8F%8C%E6%8B%BC%E8%BE%93%E5%85%A5%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="1-怎么接触到双拼的？"><a href="#1-怎么接触到双拼的？" class="headerlink" title="1. 怎么接触到双拼的？"></a>1. 怎么接触到双拼的？</h1><p>自己第一次接触双拼，是看到李笑来老师的《把时间当朋友》第二章中的“盲打究竟是否值得学会”,里面提到了盲打与双拼帮助他快速进行记录笔记和文字。 于是自己就试着在网上找双拼的学习方法。</p><h1 id="2-什么是双拼？"><a href="#2-什么是双拼？" class="headerlink" title="2. 什么是双拼？"></a>2. 什么是双拼？</h1><blockquote><p>维基百科：双拼是汉语拼音输入法的一种编码方案。相对于全拼而言，使用双拼输入汉字时只需输入一个代表声母的字母，一个代表韵母的字母，就可以打出任意一个中文单字了。</p></blockquote><p>理解起来也很简单，比如你要拼写 <code>张</code> <code>红</code> 这两个字， 用全拼的话可能你得输入 <code>zhang</code> <code> hong</code>， 而用小鹤双拼的话， 你只需要输入<code>vh</code> <code>hs</code> 就可以显示。 <code>v</code> 代表<code>zh</code> , <code>h</code> 代表<code>ang</code> , <code>s</code>代表<code>ong</code></p><p>双拼的语法也有很多种，比如小鹤双拼、自然码双拼、紫光拼音双拼、<br>搜狗拼音双拼、微软拼音双拼、智能ABC双拼。 每种双拼对应的语法也都不一样。</p><p>自己学习的是小鹤双拼，语法图是这样的：<br><img src="http://static.zybuluo.com/zhangyu756897669/ge8055q1u83xn00n84korx3y/%E5%B0%8F%E9%B9%A4%E5%8F%8C%E6%8B%BC.png" alt="小鹤双拼.png-156kB"></p><p>在搜狗输入法上点击 <code>设置</code>—— <code>属性设置</code> —— <code>常用</code> —— <code>特殊习惯</code>—— <code>双拼</code>  就可以使用了。 </p><h1 id="3-学习的过程"><a href="#3-学习的过程" class="headerlink" title="3. 学习的过程"></a>3. 学习的过程</h1><p>刚开始学习小鹤双拼的时候， 自己是完全不习惯的， 因为想要使用小鹤双拼进行文字输入，就得记住每个字母对应的韵母， 自己每输入一个字， 就得想一下这个字的韵母是什么， 对应到按键上的那个字母又是什么。 再去输入，说实话当时输入字的效率低下到令人发指，而且往往记不住，自己只好打印了一张语法表贴在自己的电脑旁， 忘了就在表上找。 好几次忍不住偷偷换成了全拼， 特别是在工作着急的情况下。 </p><p>就这样别别扭扭用了一周之后， 才发现自己已经能够慢慢不看语法表了。 （这让我都有点怀疑自己的智商，因为网上说基本一周就可以很熟练了）<br>一个月过后自己才做到了输入基本不卡壳，但如果旁边有人一紧张还是会忘掉如何输入了。 现在用了一年多， 自己已经能够无意识的使用双拼了。 如果你现在问我键盘上的字母在双拼中代表哪个韵母，自己可能真的答不上来，但只要自己在键盘上打字，自己就能够无意识的打出来。 </p><h1 id="4-学习双拼的优点与缺点"><a href="#4-学习双拼的优点与缺点" class="headerlink" title="4. 学习双拼的优点与缺点"></a>4. 学习双拼的优点与缺点</h1><p>( 1 ). 优点</p><ul><li><p>简洁，同样一个词全拼要五六下，双拼只需要两下</p></li><li><p>感觉节省了时间，更喜欢在键盘上敲字了。 （至于是否真正节省了时间，自己没有做过对比）</p></li></ul><p>( 2 ). 缺点</p><ul><li>全拼不会用了， 有时在别人的电脑上输入文字总是很别扭，老出错，总想着把输入法改成双拼</li><li>有时大脑短路会想不起来双拼的语法</li></ul><h1 id="5-感悟"><a href="#5-感悟" class="headerlink" title="5. 感悟"></a>5. 感悟</h1><ul><li><p>任何学习都是不可逆的，当你学了到了一项技能，你就不可能再像从前没学过一样生活。 </p></li><li><p>最可怕的不是自己知道自己不知道，而是不知道自己不知道。 </p><blockquote><p>比如自己学习双拼，自己以前根本不知道还有双拼这么一种输入法，就更不会产生要学习这种输入法的冲动。</p><p><strong>如何解决自己不知道自己不知道的知识</strong>，自己目前能够想到的方法是：多读书，多关注大牛，多了解别人是怎么工作、生活。</p></blockquote></li><li><p>有些东西只有自己亲身经历过后才能有所体会，哪怕是坏的体验。</p><blockquote><p>如果只是看别人推荐而不去坚持使用双拼， 我就不能体会到大脑下意识使用双拼输入的快感。当然，也许会出现这种情况， 你付出了时间，付出了精力，而这项技能对你的生活影响并不大。这就需要你前期做一些搜索调查。</p></blockquote><p>延伸到生活上，要是我不来北京生活，不来北京工作，我就没有机会知道来北京到底会面临什么困难，到底对自己的职业发展是否有益。也许最后自己会失败，可那又怎么样，自己的人生自己做主。</p><blockquote><p>2020年2月26：现在在北京已经呆了马上快3年了，自己虽然已经转行做数据分析了，但是现在自己的职业发展并不好，甚至犹豫自己是否还应呆在北京。</p></blockquote></li><li><p>学会一项技能，不是只是了解它，而是能够在生活中无意识的使用它</p><blockquote><p> 一项技能，只是了解是远远不够的， 你要去不断的磨练，打磨，直到它成为你大脑的一部分。 学会的标准就是：你能否不需要专门思考就能够调用它。 </p></blockquote></li><li><p>要学习那些你通过短时间学会,就能够一辈子用的上的知识。</p><h1 id="6-延伸"><a href="#6-延伸" class="headerlink" title="6. 延伸"></a>6. 延伸</h1><blockquote><ul><li><p>总是听很多的牛人说，写作是非常重要的一项技能，对一个人清晰思考问题是非常有帮助的，然而自己却迟迟没有行动，主要还是觉得自己语言词汇匮乏， 缺乏独立思考，怕自己语无伦次。</p></li><li><p>其实又想想，写作这东西这就和自己刚开始学习双拼时一样，开始你觉得自己没有可能学会，也许过一段时间你就能够发现自己的进步， 你不去坚持写又怎么能够证明自己一定学不会呢？</p></li><li><p>自己认为学习是一个自我验证的过程：你认为自己不可能学会，你就不会坚持去学；你不坚持去学，你就不会有进步， 从而你就不会看到到自己能够学会的结果，也就证明了自己确实学不会。<strong>相反</strong>， 你认为自己能学会，你就坚持去学，看到自己的进步，最终的确学会了，也证明了自己确实能够学会。</p></li></ul></blockquote></li></ul><h1 id="7-未解决问题"><a href="#7-未解决问题" class="headerlink" title="7. 未解决问题"></a>7. 未解决问题</h1><ul><li>如何运用心智的力量在还没有机会亲身体验的情况下，仅凭心智就可以像真实经历过一样深刻体会？</li><li>如何解决 害怕自己付出了时间，付出了精力，而没有一个好的结果</li></ul><hr><p>参考资料： <a href="https://book.douban.com/subject/3609132/">《把时间当朋友》</a></p>]]></content>
      
      
      <categories>
          
          <category> 生活资料 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git指令整理</title>
      <link href="/2017/02/15/2017-02-15-Git%E6%8C%87%E4%BB%A4%E6%95%B4%E7%90%86/"/>
      <url>/2017/02/15/2017-02-15-Git%E6%8C%87%E4%BB%A4%E6%95%B4%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>z</p><blockquote><p>随便整理的一些自用的Git指令</p></blockquote><h1 id="GitHub创建仓库提示代码"><a href="#GitHub创建仓库提示代码" class="headerlink" title="GitHub创建仓库提示代码"></a>GitHub创建仓库提示代码</h1><pre><code>echo "# 项目名" &gt;&gt; README.mdgit initgit add README.mdgit commit -m "first commit"git remote add origin git@github.com:qiubaiying/项目名.gitgit push -u origin master</code></pre><p>若仓库存在直接push</p><pre><code>git remote add origin git@github.com:qiubaiying/test.gitgit push -u origin master</code></pre><h1 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h1><h4 id="创建仓库（初始化）"><a href="#创建仓库（初始化）" class="headerlink" title="创建仓库（初始化）"></a>创建仓库（初始化）</h4><pre><code>在当前指定目录下创建git init新建一个仓库目录git init [project-name]克隆一个远程项目git clone [url]</code></pre><h4 id="添加文件到缓存区"><a href="#添加文件到缓存区" class="headerlink" title="添加文件到缓存区"></a>添加文件到缓存区</h4><pre><code>添加所有变化的文件 git add .添加名称指定文件git add text.txt</code></pre><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><pre><code>设置提交代码时的用户信息git config [--global] user.name "[name]"git config [--global] user.email "[email address]"</code></pre><h4 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h4><pre><code>提交暂存区到仓库区git commit -m "msg"# 提交暂存区的指定文件到仓库区$ git commit [file1] [file2] ... -m [message]# 提交工作区自上次commit之后的变化，直接到仓库区$ git commit -a# 提交时显示所有diff信息$ git commit -v# 使用一次新的commit，替代上一次提交# 如果代码没有任何新变化，则用来改写上一次commit的提交信息$ git commit --amend -m [message]# 重做上一次commit，并包括指定文件的新变化$ git commit --amend [file1] [file2] ...</code></pre><h4 id="远程同步"><a href="#远程同步" class="headerlink" title="远程同步"></a>远程同步</h4><pre><code># 下载远程仓库的所有变动$ git fetch [remote]# 显示所有远程仓库$ git remote -v# 显示某个远程仓库的信息$ git remote show [remote]# 增加一个新的远程仓库，并命名$ git remote add [shortname] [url]# 取回远程仓库的变化，并与本地分支合并$ git pull [remote] [branch]# 上传本地指定分支到远程仓库$ git push [remote] [branch]# 强行推送当前分支到远程仓库，即使有冲突$ git push [remote] --force# 推送所有分支到远程仓库$ git push [remote] --all</code></pre><h4 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h4><pre><code># 列出所有本地分支$ git branch# 列出所有远程分支$ git branch -r# 列出所有本地分支和远程分支$ git branch -a# 新建一个分支，但依然停留在当前分支$ git branch [branch-name]# 新建一个分支，并切换到该分支$ git checkout -b [branch]# 新建一个分支，指向指定commit$ git branch [branch] [commit]# 新建一个分支，与指定的远程分支建立追踪关系$ git branch --track [branch] [remote-branch]# 切换到指定分支，并更新工作区$ git checkout [branch-name]# 切换到上一个分支$ git checkout -# 建立追踪关系，在现有分支与指定的远程分支之间$ git branch --set-upstream [branch] [remote-branch]# 合并指定分支到当前分支$ git merge [branch]# 选择一个commit，合并进当前分支$ git cherry-pick [commit]# 删除分支$ git branch -d [branch-name]# 删除远程分支$ git push origin --delete [branch-name]$ git branch -dr [remote/branch]</code></pre><h4 id="标签Tags"><a href="#标签Tags" class="headerlink" title="标签Tags"></a>标签Tags</h4><pre><code>添加标签 在当前commitgit tag -a v1.0 -m 'xxx' 添加标签 在指定commitgit tag v1.0 [commit]查看git tag删除git tag -d V1.0删除远程taggit push origin :refs/tags/[tagName]推送git push origin --tags拉取git fetch origin tag V1.0新建一个分支，指向某个taggit checkout -b [branch] [tag]</code></pre><h4 id="查看信息"><a href="#查看信息" class="headerlink" title="查看信息"></a>查看信息</h4><pre><code># 显示有变更的文件$ git status# 显示当前分支的版本历史$ git log# 显示commit历史，以及每次commit发生变更的文件$ git log --stat# 搜索提交历史，根据关键词$ git log -S [keyword]# 显示某个commit之后的所有变动，每个commit占据一行$ git log [tag] HEAD --pretty=format:%s# 显示某个commit之后的所有变动，其"提交说明"必须符合搜索条件$ git log [tag] HEAD --grep feature# 显示某个文件的版本历史，包括文件改名$ git log --follow [file]$ git whatchanged [file]# 显示指定文件相关的每一次diff$ git log -p [file]# 显示过去5次提交$ git log -5 --pretty --oneline# 显示所有提交过的用户，按提交次数排序$ git shortlog -sn# 显示指定文件是什么人在什么时间修改过$ git blame [file]# 显示暂存区和工作区的差异$ git diff# 显示暂存区和上一个commit的差异$ git diff --cached [file]# 显示工作区与当前分支最新commit之间的差异$ git diff HEAD# 显示两次提交之间的差异$ git diff [first-branch]...[second-branch]# 显示今天你写了多少行代码$ git diff --shortstat "@{0 day ago}"# 显示某次提交的元数据和内容变化$ git show [commit]# 显示某次提交发生变化的文件$ git show --name-only [commit]# 显示某次提交时，某个文件的内容$ git show [commit]:[filename]# 显示当前分支的最近几次提交$ git reflog</code></pre><h4 id="撤销"><a href="#撤销" class="headerlink" title="撤销"></a>撤销</h4><pre><code># 恢复暂存区的指定文件到工作区$ git checkout [file]# 恢复某个commit的指定文件到暂存区和工作区$ git checkout [commit] [file]# 恢复暂存区的所有文件到工作区$ git checkout .# 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变$ git reset [file]# 重置暂存区与工作区，与上一次commit保持一致$ git reset --hard# 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变$ git reset [commit]# 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致$ git reset --hard [commit]# 重置当前HEAD为指定commit，但保持暂存区和工作区不变$ git reset --keep [commit]# 新建一个commit，用来撤销指定commit# 后者的所有变化都将被前者抵消，并且应用到当前分支$ git revert [commit]# 暂时将未提交的变化移除，稍后再移入$ git stash$ git stash pop</code></pre><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><pre><code># 生成一个可供发布的压缩包$ git archives</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 终端 </tag>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
