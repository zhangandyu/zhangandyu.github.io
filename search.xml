<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>从零开始机器学习</title>
      <link href="/2022/02/08/2022-2-08-%E6%8A%80%E8%83%BD-%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
      <url>/2022/02/08/2022-2-08-%E6%8A%80%E8%83%BD-%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h1><p>在学习机器学习前，我们首先要了解什么是机器学习。</p><p>举个例子：假设有一天，你约了老王、老李周末一起打麻将，老李来了，但老王迟迟没有来，你准备打电话，老李说：“老王这周公司年终冲刺，加上儿子期末考试没及格，母亲又生病，肯定没心情来”。这种情况下，你觉得老王还会来吗，大概率是不会来了。</p><p>这种推理，我们人类很容易做到，但是对于机器，知道老王这些信息，要想推理出这个结论其实是非常困难的。 </p><p><strong>机器学习的好处，就是能够利用运算能力，从大量数据中发现一个模型，通过这个模型去进行推理，从而实现预测、判断的目的。这个建模的过程，就是机器”学习”的过程。</strong></p><p>要想让机器预测老王会不会来，我们就要建立“预测老王会不会来的函数”， “项目冲刺”、“儿子考试没及格”、”母亲生病“，就是输入到这个函数的自变量 <code>x1</code>、<code>x2</code>、<code>x3</code>, 这些变量每一个发生变化，都会影响到因变量<code>y</code>的结果。（来/不来）</p><p>在机器学习中，这些自变量就叫做<strong>特征</strong>， 因变量叫做<strong>标签</strong>。 在已知的数学基础上，通过反复计算，用一个函数来描述自变量 <code>x1</code>、<code>x2</code>、<code>x3</code>与因变量<code>y</code>之间的关系，这个过程叫做<strong>拟合</strong>。</p><p>因此，我们可以说：机器学习是机器训练出函数，而一般程序是我们人为定义好函数让程序去运行。 </p><p>那么我们该如何定义机器学习呢，在这里引用黄佳老师的定义：</p><blockquote><p>机器学习是一种从数据中生成规则、发现模型，来帮助我们预测、判断，分组和解决问题的技术。机器学习的本质就是在数据中发现规则。</p></blockquote><p>根据训练数据集是否有标签，我们可以将其分为三种：</p><ol><li>训练数据集全部有标签，叫<strong>监督学习</strong>。</li><li>训练数据集部分有标签，叫<strong>半监督学习</strong>。</li><li>训练数据集无标签，叫<strong>无监督学习</strong>。</li></ol><p>目前监督学习是应用最广的主流学习方法，也是我们学习机器学习的重点。 </p><hr><p>根据上面的内容，我们知道监督学习的训练数据集全部是有标签的，那么根据标签的特点，我们可以将其分成两类：<strong>回归问题和分类问题</strong>。</p><ol><li><p>回归问题</p><p>回归问题的标签是连续值，比如预测用户的转化率，用户的生命周期价值等。</p></li><li><p>分类问题</p><p>分类问题的标签是离散值，比如患者是否患病，老王会不会来打麻将。二选一或多选一。</p></li></ol><hr><p><strong>总结一下：机器学习的本质就是在数据中发现规律。机器学习可以分为：监督学习、半监督学习、无监督学习三种。其中监督学习主要解决两类问题：回归与分类问题。当我们在开始一个项目时，一定要先明确我们要解决的问题属于哪种，这对选择模型非常重要。</strong></p><h1 id="线性回归算法实战"><a href="#线性回归算法实战" class="headerlink" title="线性回归算法实战"></a>线性回归算法实战</h1><p>机器学习项目从开始到结束可以分为五步：</p><ol><li>定义问题</li><li>收集数据和预处理</li><li>选择算法和确认模型</li><li>训练拟合模型</li><li>评估并优化模型性能</li></ol><h2 id="项目1：通过广告投放金额预测商品销售额"><a href="#项目1：通过广告投放金额预测商品销售额" class="headerlink" title="项目1：通过广告投放金额预测商品销售额"></a>项目1：通过广告投放金额预测商品销售额</h2><p>项目内容: 假设你开了一家网店，把过去每周的广告投放金额及销售额整理后，你发现网店商品的销售额和广告投放力度息息相关。那能不能通过机器学习算法，根据过去记录历史数据，来预测未来某个节点，一个特定的广告投放金额对应能实现的商品销售额？</p><table><thead><tr><th>公众号广告投放金额</th><th>微博广告投放金额</th><th>其他类型广告投放金额</th><th>商品销售额（千元）</th></tr></thead><tbody><tr><td>304.4</td><td>93.6</td><td>294.4</td><td>9.7</td></tr><tr><td>1011.9</td><td>34.4</td><td>398.4</td><td>16.7</td></tr><tr><td>1091.1</td><td>32.8</td><td>295.2</td><td>17.3</td></tr><tr><td>85.5</td><td>173.6</td><td>403.2</td><td>7</td></tr><tr><td>1047</td><td>302.4</td><td>553.6</td><td>22.1</td></tr><tr><td>940.9</td><td>41.6</td><td>155.2</td><td>17.2</td></tr><tr><td>1277.2</td><td>111.2</td><td>296</td><td>16.1</td></tr></tbody></table><h3 id="1-定义问题"><a href="#1-定义问题" class="headerlink" title="1. 定义问题"></a>1. 定义问题</h3><p>在这个环节中，我们需要理清当前的业务场景，明确<strong>目前的痛点、要解决什么问题、达到什么目标、当前问题属于哪一种机器学习类型？</strong></p><p>1）痛点</p><p>​    加大广告投放力度是否能促进商品的销售额增长，是否有数据可参考</p><p>2）问题</p><ul><li>各种广告和销售额之间呈现一种什么关系？</li><li>哪一种广告对于商品销售额的影响最大？</li><li>是否能根据特性的广告投放金额，预测出未来的商品销售额？</li></ul><p>3）目标</p><p>​    建立一个机器学习模型，根据广告投放金额，预测商品销售额</p><p>4）机器学习类型</p><p>​    要估计销售额，所以在这个数据集中：公众号广告投放金额、微博广告投放金额、其他类型广告投放金额为<strong>特征</strong>。商品销售额为<strong>标签</strong>。因为数据集全部有标签，所以这是一个<strong>监督学习</strong>， 销售额标签为连续值，所以这是一个<strong>回归问题</strong>。数据集里有三个特征，所以是一个<strong>多元回归问题</strong>。</p><h3 id="2-收集数据和预处理"><a href="#2-收集数据和预处理" class="headerlink" title="2. 收集数据和预处理"></a>2. 收集数据和预处理</h3><p>这部分主要分为6个步骤：</p><ul><li><strong>收集数据</strong>—网店广告及销售数据</li><li><strong>数据可视化</strong>—了解数据的基本情况</li><li><strong>数据清洗及规范化</strong>—处理缺失值、重复数据、错误数据、格式统一</li><li><strong>特征工程</strong>—降低数据集维度</li><li><strong>构建特征集及标签集</strong></li><li><strong>拆分训练集、验证集和测试集</strong></li></ul><h4 id="1）收集数据"><a href="#1）收集数据" class="headerlink" title="1）收集数据"></a>1）收集数据</h4><p>这一步一般要通过数据埋点及购买、抓取等方式来获得，在这个项目中，我们可以从<a href="https://pan.baidu.com/s/1xkUPei2-t2THe4N4EaO8Yw">这里</a>来获得，密码：1234。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd  <span class="token comment"># 导入pandas库</span><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np   <span class="token comment"># 导入numpy库</span><span class="token comment"># 读取数据</span>data <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'advertising.csv'</span><span class="token punctuation">)</span>data<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 读取前5行</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th align="right"></th><th align="right">公众号</th><th align="right">微博</th><th align="right">其他</th><th align="right">销售额（千元）</th></tr></thead><tbody><tr><td align="right">0</td><td align="right">304.4</td><td align="right">93.6</td><td align="right">294.4</td><td align="right">9.7</td></tr><tr><td align="right">1</td><td align="right">1011.9</td><td align="right">34.4</td><td align="right">398.4</td><td align="right">16.7</td></tr><tr><td align="right">2</td><td align="right">1091.1</td><td align="right">32.8</td><td align="right">295.2</td><td align="right">17.3</td></tr><tr><td align="right">3</td><td align="right">85.5</td><td align="right">173.6</td><td align="right">403.2</td><td align="right">7.0</td></tr><tr><td align="right">4</td><td align="right">1047.0</td><td align="right">302.4</td><td align="right">553.6</td><td align="right">22.1</td></tr></tbody></table><h4 id="2）数据可视化（python"><a href="#2）数据可视化（python" class="headerlink" title="2）数据可视化（python)"></a>2）数据可视化（python)</h4><h5 id="相关性热力图"><a href="#相关性热力图" class="headerlink" title="* 相关性热力图"></a>* 相关性热力图</h5><p>通过相关性系数来了解数据集中任意一对变量之间的相关性。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt <span class="token comment"># 导入画图工具库</span>plt<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'font.sans-serif'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'SimHei'</span><span class="token punctuation">]</span> <span class="token comment"># 用来正常显示中文为黑体</span>plt<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'axes.unicode_minus'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">False</span> <span class="token comment">#用来正常显示负号</span><span class="token keyword">import</span> seaborn <span class="token keyword">as</span> sns <span class="token comment"># 导入统计学数据可视化库</span><span class="token comment"># 相关性分析</span><span class="token comment"># 对所有的标签和特征两两显示其相关性的热力图</span>sns<span class="token punctuation">.</span>heatmap<span class="token punctuation">(</span>data<span class="token punctuation">.</span>corr<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cmap <span class="token operator">=</span> <span class="token string">'PuBuGn'</span><span class="token punctuation">,</span>annot <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/zhangandyu/picture/main/%E6%96%87%E7%AB%A0%E5%9B%BE%E7%89%87/25.png"></p><p>从图中我们可以明显看到：微信公众号和销售额的相关性最高。</p><h5 id="散点图"><a href="#散点图" class="headerlink" title="* 散点图"></a>* 散点图</h5><p>通过散点图两两一组展现销售额与各渠道广告投放金额之间的关系，来将重点聚焦。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 显示销售额与各种渠道广告投放金额的散点图</span>sns<span class="token punctuation">.</span>pairplot<span class="token punctuation">(</span>data<span class="token punctuation">,</span>              x_vars <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'公众号'</span><span class="token punctuation">,</span><span class="token string">'微博'</span><span class="token punctuation">,</span><span class="token string">'其他'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            y_vars <span class="token operator">=</span> <span class="token string">'销售额'</span><span class="token punctuation">,</span>            height <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">,</span> aspect <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> kind <span class="token operator">=</span> <span class="token string">'scatter'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/zhangandyu/picture/main/%E6%96%87%E7%AB%A0%E5%9B%BE%E7%89%87/26.png"></p><h4 id="3-数据清洗及规范化"><a href="#3-数据清洗及规范化" class="headerlink" title="3)数据清洗及规范化"></a>3)数据清洗及规范化</h4><h5 id="数据清洗"><a href="#数据清洗" class="headerlink" title="数据清洗"></a>数据清洗</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 查看是否有缺失值</span>data<span class="token punctuation">.</span>isna<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 查看是否有重复值</span>data<span class="token punctuation">.</span>duplicated<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从运行结果可知，数据无缺失及重复值，我们暂时不需要处理。 </p><h5 id="把数据规范化"><a href="#把数据规范化" class="headerlink" title="把数据规范化"></a>把数据规范化</h5><p>通过上面数据可视化，我们发现在3个特征中，微信公众号广告投放金额和商品销售金额的相关性比较高。因此，为简化模型，我们先只考虑公众号广告投放金额数据。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">x <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>data<span class="token punctuation">.</span>公众号<span class="token punctuation">)</span> <span class="token comment"># 构建特征集，只含微信公众号一个特征</span>y <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>data<span class="token punctuation">.</span>销售额<span class="token punctuation">)</span> <span class="token comment"># 构建标签集，销售额</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在机器学习中，我们需要把数据转换成矩阵格式后才能让算法进行处理。 一般矩阵被称为2D张量，形式为：（样本数，特征数），比如一组数据的矩阵为（200,3），则说明这组数据中有 200个样本数量，3个特征。 </p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'矩阵x的维度：'</span><span class="token punctuation">,</span> x<span class="token punctuation">.</span>ndim<span class="token punctuation">)</span>     <span class="token comment"># ndim返回的是数组的维度</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'矩阵x的形状：'</span> <span class="token punctuation">,</span>x<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>    <span class="token comment"># 查看矩阵或者数组的维数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>输出结果为：</p><pre class="line-numbers language-none"><code class="language-none">矩阵x的特征：1矩阵x的形状：(200,)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>机器学习模型所读取的规范格式应该为（样本数，标签数）的格式， 而我们目前的矩阵x形状为（200，），需要将其变成为（200,1） 的格式，然后才能进行机器学习。 需要用到<code>reshape</code>函数。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">x <span class="token operator">=</span> x<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>y <span class="token operator">=</span> y<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'矩阵x的维度：'</span><span class="token punctuation">,</span> x<span class="token punctuation">.</span>ndim<span class="token punctuation">)</span>     <span class="token comment"># ndim返回的是数组的维度</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'矩阵x的形状：'</span><span class="token punctuation">,</span> x<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>    <span class="token comment"># 查看矩阵或者数组的维数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果为：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">矩阵x的维度：<span class="token number">2</span>矩阵x的形状：<span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这样，我们就把数据转换成了需要的格式。 </p><h4 id="4）特征工程"><a href="#4）特征工程" class="headerlink" title="4）特征工程"></a>4）特征工程</h4><p>暂不考虑</p><h4 id="5）构建特征集及标签集"><a href="#5）构建特征集及标签集" class="headerlink" title="5）构建特征集及标签集"></a>5）构建特征集及标签集</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># x 为构建特征集</span><span class="token comment"># y 为构建标签集</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="6）拆分训练集、验证集和测试集"><a href="#6）拆分训练集、验证集和测试集" class="headerlink" title="6）拆分训练集、验证集和测试集"></a>6）拆分训练集、验证集和测试集</h4><p>在开始建模之前，我们还需要将数据集拆分成两个部分：<strong>训练集</strong>和<strong>测试集</strong>。在一个机器学习的项目中，至少要包含着两个数据集，<strong>一个用于训练机器，确定模型。另一个用户测试模型的准确性。</strong> 往往还需要一个<strong>验证集</strong>，以在最终测试之前增加验证环境。目前项目问题比较简单且数据量少，所以合并了验证和测试的环节。 </p><p>在拆分之前，如果数据已经被排序或分类，则要先进性打乱。 </p><p>根据二八原则，将数据分成80%的训练集和20%的测试集。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 将数据分成80%训练集和20%测试集</span><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span> train_test_splitx_train<span class="token punctuation">,</span> x_test<span class="token punctuation">,</span>y_train<span class="token punctuation">,</span>y_test <span class="token operator">=</span> train_test_split<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span> test_size <span class="token operator">=</span> <span class="token number">0.2</span><span class="token punctuation">,</span> random_state <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>现在原始数据变成了四个数据集，分别是：</p><ul><li>x_train（特征训练集）</li><li>y_train（标签训练集）</li><li>x_test（特征测试集）</li><li>y_test（标签测试集）</li></ul><p>以上我们就完成了：定义问题及收集数据和预处理前两部的内容。</p><hr><h3 id="3-选择算法并建立模型"><a href="#3-选择算法并建立模型" class="headerlink" title="3. 选择算法并建立模型"></a>3. 选择算法并建立模型</h3><h4 id="1）确定选用什么模型"><a href="#1）确定选用什么模型" class="headerlink" title="1）确定选用什么模型"></a>1）确定选用什么模型</h4><p>根据上图，我们能够明确知道，选用<strong>线性回归算法</strong>能够满足我们的需求。 </p><p>在机器学习中的一元线性回归的公式为：<br>$$<br>y = w*x + b<br>$$<br>在机器学习中， 斜率w叫做权重， 截距b叫做偏置。</p><p>虽然已经选定用线性回归算法，但是在算法工具包<code>sklean</code>中又有很多线性回归算法包，比如基本的线性回归算法<code>LinearRegression</code>，以及衍生出来的<code>lasso</code>回归和<code>Ridge</code>回归。</p><p>哪一个才是合适的算法包，一般来说我们得一个个试，从最简单的开始，直到找到满意的结果为止。 在这个项目中，我们选用最基本的回归算法包<code>LinearRegression</code>。</p><h4 id="2）-建立模型"><a href="#2）-建立模型" class="headerlink" title="2） 建立模型"></a>2） 建立模型</h4><p>外部参数默认， 内部参数为： 权重w 和截距b</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 调用 LinearRegression</span><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>linear_model <span class="token keyword">import</span> LinearRegression  <span class="token comment"># 导入模型</span>linereg_model <span class="token operator">=</span> LinearRegression<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 使用线性回归算法创建模型</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="4-训练模型"><a href="#4-训练模型" class="headerlink" title="4. 训练模型"></a>4. 训练模型</h3><p>训练模型就是用训练集中的特征变量和标签，根据当前样本的损失大小来逐渐拟合函数，确定最优的内部参数，最后完成模型。</p><h4 id="1）训练数据集"><a href="#1）训练数据集" class="headerlink" title="1）训练数据集"></a>1）训练数据集</h4><p>fit方法里面封装了机器学习的核心算法，我们只需要把特征和标签数据集，同时作为参数传进去。 </p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>linear_model <span class="token keyword">import</span> LinearRegression <span class="token comment">#导入线性回归算法模型</span>model <span class="token operator">=</span> LinearRegression<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#使用线性回归算法</span>model<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>x_train<span class="token punctuation">,</span> y_train<span class="token punctuation">)</span> <span class="token comment">#用训练集数据，训练机器，拟合函数，确定参数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这样，我们就完成了对模型的训练。 </p><h3 id="5-模型评估和优化"><a href="#5-模型评估和优化" class="headerlink" title="5.模型评估和优化"></a>5.模型评估和优化</h3><h4 id="1）-预测测试集"><a href="#1）-预测测试集" class="headerlink" title="1） 预测测试集"></a>1） 预测测试集</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">y_pred <span class="token operator">=</span> model<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>x_test<span class="token punctuation">)</span> <span class="token comment">#预测测试集的Y值</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2）将算法的权重和截距打印出来，看看具体值。"><a href="#2）将算法的权重和截距打印出来，看看具体值。" class="headerlink" title="2）将算法的权重和截距打印出来，看看具体值。"></a>2）将算法的权重和截距打印出来，看看具体值。</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'当前模型的特征的权重是: '</span><span class="token punctuation">,</span> model<span class="token punctuation">.</span>coef_<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'当前模型的截距（偏置）是: '</span><span class="token punctuation">,</span> model<span class="token punctuation">.</span>intercept_<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>输出结果：</p><pre class="line-numbers language-none"><code class="language-none">当前模型的特征的权重分别是:  [[0.01182641]]当前模型的截距（偏置）是:  [7.12069997]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>也就是说，我们的线性回归模型的公式为：</p><p>y = 0.0118264 x + 7.1206997</p><h4 id="3）对模型进行评估"><a href="#3）对模型进行评估" class="headerlink" title="3）对模型进行评估"></a>3）对模型进行评估</h4><p>在这里，我们使用常用于评估回归分析模型的指标：R2 分数</p><pre class="line-numbers language-none"><code class="language-none">print("线性回归预测评分：", model.score(x_test, y_test)) # 评估模型<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输出结果为：</p><pre class="line-numbers language-none"><code class="language-none">线性回归预测评分： 0.8493759729652093<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>R2 越大，说明所拟合的回归模型越优。现在我们得到的 R2 值约为 0.849，在没有与其它模型进行比较之前，我们实际上也没法确定它是否能令人满意。</p><p>如果模型的评估分数不理想，我们则需要回到第3步，调整模型的外部参数，重新训练模型。 要是结果依旧不理想，则需要考虑其他算法，创建全新的模型。</p><h2 id="项目2：评估微信公众号阅读量"><a href="#项目2：评估微信公众号阅读量" class="headerlink" title="项目2：评估微信公众号阅读量"></a>项目2：评估微信公众号阅读量</h2><p>假如你在一家公司运营公众号，在对微信公众号推广文案的运营效率进行分析，目前有大量之前公司运营的软文数据，你能否根据已有数据建立机器学习模型，从而后续能够根据点赞数和转发数等指标，估计一篇文章能实现多大的阅读量。</p><p>数据可在 <a href="https://github.com/huangjia2019/geektime/tree/main/%E5%87%86%E5%A4%87%E7%AF%8703">【这里】</a>下载</p><table><thead><tr><th align="right">点赞数</th><th align="right">转发数</th><th align="right">热度指数</th><th align="right">文章评级</th><th align="right">浏览量</th></tr></thead><tbody><tr><td align="right">2646</td><td align="right">1347.0</td><td align="right">7</td><td align="right">5</td><td align="right">260004</td></tr><tr><td align="right">816</td><td align="right">816.0</td><td align="right">4</td><td align="right">6</td><td align="right">100004</td></tr><tr><td align="right">1224</td><td align="right">612.0</td><td align="right">6</td><td align="right">5</td><td align="right">164502</td></tr><tr><td align="right">1261</td><td align="right">1261.0</td><td align="right">6</td><td align="right">6</td><td align="right">163001</td></tr><tr><td align="right">1720</td><td align="right">1720.0</td><td align="right">7</td><td align="right">5</td><td align="right">260401</td></tr></tbody></table><h3 id="1-定义问题-1"><a href="#1-定义问题-1" class="headerlink" title="1.定义问题"></a>1.定义问题</h3><p>回答几个问题：1、当前的业务场景是什么， 要解决什么问题，达到什么目标    2、是什么类型的机器学习 </p><p>1） 当前的业务场景是什么？</p><p>针对微信公众号阅读量的预测， 要解决通过点赞数、转发数、热度指数，文章评级，能否成功预测出微信号的阅读量？</p><p>2）是什么类型的机器学习？</p><p>机器学习分类： 监督学习、半监督学习、无监督学习。</p><ul><li><p>监督学习： 有特征、有标签</p></li><li><p>半监督学习：有特征，部分有标签</p></li><li><p>无监督学习：有特征，无标签</p></li></ul><p>这个是监督学习， 监督学习又分为两种： 分类问题与回归问题</p><ul><li>分类问题， 把事物分成两类或多类</li><li>回归问题， 标签是连续性的数值。</li></ul><p>这个是回归问题，所以这个是监督学习中的回归问题。 </p><h3 id="2-收集数据和预处理-1"><a href="#2-收集数据和预处理-1" class="headerlink" title="2.收集数据和预处理"></a>2.收集数据和预处理</h3><h4 id="1）-收集数据，暂不考虑"><a href="#1）-收集数据，暂不考虑" class="headerlink" title="1） 收集数据，暂不考虑"></a>1） 收集数据，暂不考虑</h4><h4 id="2）-预处理"><a href="#2）-预处理" class="headerlink" title="2） 预处理"></a>2） 预处理</h4><p>(1) 对数据进行可视化</p><ul><li>相关性查看</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> pltplt<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'font.sans-serif'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'SimHei'</span><span class="token punctuation">]</span>plt<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'axes.unicode_minus'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">False</span><span class="token keyword">import</span> seaborn <span class="token keyword">as</span> sbn<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">sbn<span class="token punctuation">.</span>heatmap<span class="token punctuation">(</span>data<span class="token punctuation">.</span>corr<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cmap <span class="token operator">=</span> <span class="token string">'PuBuGn'</span><span class="token punctuation">,</span> annot <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#  data.corr()表示了data中的两个变量之间的相关性，取值范围为[-1,1],取值接近-1，表示反相关，类似反比例函数，取值接近1，表正相关。</span><span class="token comment"># heatmap 热力图</span><span class="token comment"># cmap  热力图颜色</span><span class="token comment">#</span><span class="token comment"># annot annotate的缩写，annot默认为False，当annot为True时，在heatmap中每个方格写入数据</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/zhangandyu/picture/main/%E6%96%87%E7%AB%A0%E5%9B%BE%E7%89%87/28.png"></p><blockquote><p> 从上图可以看出， 浏览量与热度指数、转发数、点赞数的相关性比较高。</p></blockquote><ul><li><p>散点图</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">sbn<span class="token punctuation">.</span>pairplot<span class="token punctuation">(</span>data<span class="token punctuation">,</span> x_vars <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'热度指数'</span><span class="token punctuation">,</span> <span class="token string">'转发数'</span><span class="token punctuation">,</span><span class="token string">'点赞数'</span><span class="token punctuation">,</span><span class="token string">'文章评级'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> y_vars <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'浏览量'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>             height <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">,</span> aspect <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>kind <span class="token operator">=</span> <span class="token string">'scatter'</span> <span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/zhangandyu/picture/main/%E6%96%87%E7%AB%A0%E5%9B%BE%E7%89%87/32.png"></p></li><li><p>箱线图</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">data_1 <span class="token operator">=</span> pd<span class="token punctuation">.</span>concat<span class="token punctuation">(</span><span class="token punctuation">[</span>data<span class="token punctuation">[</span><span class="token string">'浏览量'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> data<span class="token punctuation">[</span><span class="token string">'热度指数'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>fit <span class="token operator">=</span> sbn<span class="token punctuation">.</span>boxplot<span class="token punctuation">(</span>x <span class="token operator">=</span> <span class="token string">'热度指数'</span><span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token string">'浏览量'</span><span class="token punctuation">,</span>data <span class="token operator">=</span> data<span class="token punctuation">)</span>fit<span class="token punctuation">.</span>axis<span class="token punctuation">(</span>ymin <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> ymax <span class="token operator">=</span> <span class="token number">800000</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/zhangandyu/picture/main/%E6%96%87%E7%AB%A0%E5%9B%BE%E7%89%87/30.png"></p></li></ul><blockquote><p>指数越高，浏览量的中位数就越高。</p></blockquote><p>(2) 数据清洗</p><ul><li><p>重复值删除</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 查看是否有重复值</span>data<span class="token punctuation">.</span>duplicated<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>空值处理</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 查看是否有空值</span>data<span class="token punctuation">.</span>isna<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 删除空值</span>data<span class="token punctuation">.</span>isna<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="3）特征工程"><a href="#3）特征工程" class="headerlink" title="3）特征工程"></a>3）特征工程</h4><p>暂不考虑</p><h4 id="4）构建特征集及标签集"><a href="#4）构建特征集及标签集" class="headerlink" title="4）构建特征集及标签集"></a>4）构建特征集及标签集</h4><p>（1）构建特征集</p><p>除去阅读量，其他点赞数、转发量、热度指数、文章评级，都是特征集。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">x <span class="token operator">=</span> data<span class="token punctuation">.</span>drop<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'浏览量'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>axis <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>（2）构建标签集</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">y <span class="token operator">=</span> data<span class="token punctuation">.</span>浏览量<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="5-拆分训练集、测试集、和验证集¶-拆分训练集、测试集、和验证集"><a href="#5-拆分训练集、测试集、和验证集¶-拆分训练集、测试集、和验证集" class="headerlink" title="5) 拆分训练集、测试集、和验证集¶-拆分训练集、测试集、和验证集)"></a>5) 拆分训练集、测试集、和验证集<a href="http://localhost:8888/notebooks/%E9%9B%B6%E5%9F%BA%E7%A1%80%E5%AE%9E%E6%88%98%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E9%98%85%E8%AF%BB%E9%87%8F%E9%A2%84%E6%B5%8B.ipynb#5">¶</a>-拆分训练集、测试集、和验证集)</h4><p>验证集暂不需要，根据二八原则把数据拆分为训练集（8）和测试集</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span> train_test_splitx_train<span class="token punctuation">,</span>x_test<span class="token punctuation">,</span> y_train<span class="token punctuation">,</span> y_test  <span class="token operator">=</span> train_test_split<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>test_size <span class="token operator">=</span> <span class="token number">0.2</span><span class="token punctuation">,</span> random_state <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="3-选择算法并建立模型-1"><a href="#3-选择算法并建立模型-1" class="headerlink" title="3.选择算法并建立模型"></a>3.选择算法并建立模型</h3><h4 id="1）-确定用什么模型"><a href="#1）-确定用什么模型" class="headerlink" title="1） 确定用什么模型"></a>1） 确定用什么模型</h4><p>根据上图可视化，我们能够发现数据呈线性分布，所以用线性回归算法。</p><p>线性回归算法又分为： 基本线性回归算法（linearRegression）,以及衍生的lasso回归算法和Ridge回归算法。</p><p>在这里，我们使用基本的线性回归算法</p><h4 id="2）建立模型"><a href="#2）建立模型" class="headerlink" title="2）建立模型"></a>2）建立模型</h4><p>外部参数默认， 确认内部参数 w和b</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>linear_model <span class="token keyword">import</span> LinearRegression <span class="token comment"># 导入模型</span>linear_model <span class="token operator">=</span> LinearRegression<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 使用线性回归模型算法创建模型</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="4-训练模型、"><a href="#4-训练模型、" class="headerlink" title="4.训练模型、"></a>4.训练模型、</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>linear_model <span class="token keyword">import</span> LinearRegressionmodel <span class="token operator">=</span> LinearRegression<span class="token punctuation">(</span><span class="token punctuation">)</span>model<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>x_train<span class="token punctuation">,</span> y_train<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="5-模型评估和优化-1"><a href="#5-模型评估和优化-1" class="headerlink" title="5.模型评估和优化"></a>5.模型评估和优化</h3><h4 id="1-打印当前模型的截距及权重"><a href="#1-打印当前模型的截距及权重" class="headerlink" title="1) 打印当前模型的截距及权重"></a>1) 打印当前模型的截距及权重</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'当前模型的特征权重是：'</span><span class="token punctuation">,</span> model<span class="token punctuation">.</span>coef_<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'当前模型的截距是：'</span><span class="token punctuation">,</span> model<span class="token punctuation">.</span>intercept_<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">当前模型的特征权重是： [   48.08395224    34.73062229 29730.13312489  2949.62196343]当前模型的截距是： -127493.90606857173<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>也就是说我们的线性回归模型为：</p><p>y = 48.08395224 * 点赞数 + 34.73062229 * 转发数 + 29730.13312489* 热度指数 +2949.62196343* 文章评级 - -127493.90606857173</p><h4 id="2）对数据进行预测"><a href="#2）对数据进行预测" class="headerlink" title="2）对数据进行预测"></a>2）对数据进行预测</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">y_pred <span class="token operator">=</span> model<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>x_test<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 对于预测值和真值</span>data_pred <span class="token operator">=</span> x_test<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span>data_pred<span class="token punctuation">[</span><span class="token string">'浏览量真值'</span><span class="token punctuation">]</span> <span class="token operator">=</span> y_testdata_pred<span class="token punctuation">[</span><span class="token string">'预测值'</span><span class="token punctuation">]</span> <span class="token operator">=</span> y_pred<span class="token comment"># 可视化</span>plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>data_pred<span class="token punctuation">.</span>点赞数<span class="token punctuation">,</span> data_pred<span class="token punctuation">.</span>浏览量真值<span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token string">'r'</span><span class="token punctuation">,</span> marker<span class="token operator">=</span><span class="token string">'o'</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">"true"</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>data_pred<span class="token punctuation">.</span>点赞数<span class="token punctuation">,</span> data_pred<span class="token punctuation">.</span>预测值<span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token string">'b'</span><span class="token punctuation">,</span> marker<span class="token operator">=</span><span class="token string">"x"</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">"pre"</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>grid<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>  <span class="token comment">#网格</span>plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">"点赞数"</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">"浏览量"</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span>loc<span class="token operator">=</span><span class="token string">'upper right'</span><span class="token punctuation">)</span>  <span class="token comment">#图例的位置</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">"scatter view"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/zhangandyu/picture/main/%E6%96%87%E7%AB%A0%E5%9B%BE%E7%89%87/31.png"></p><h4 id="3）-对模型进行评估"><a href="#3）-对模型进行评估" class="headerlink" title="3） 对模型进行评估"></a>3） 对模型进行评估</h4><p>使用R^2来对模型进行评估</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'线性回归预测评分：'</span><span class="token punctuation">,</span>model<span class="token punctuation">.</span>score<span class="token punctuation">(</span>x_test<span class="token punctuation">,</span>y_test<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>线性回归预测评分： 0.740552064611524</p>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何用好搜索引擎</title>
      <link href="/2021/12/26/2021-12-24-%E5%B7%A5%E5%85%B7-%E5%A5%BD%E7%94%A8%E7%9A%84%E6%90%9C%E7%B4%A2%E7%BD%91%E7%AB%99/"/>
      <url>/2021/12/26/2021-12-24-%E5%B7%A5%E5%85%B7-%E5%A5%BD%E7%94%A8%E7%9A%84%E6%90%9C%E7%B4%A2%E7%BD%91%E7%AB%99/</url>
      
        <content type="html"><![CDATA[<h2 id="如何才能搜索更精确"><a href="#如何才能搜索更精确" class="headerlink" title="如何才能搜索更精确"></a>如何才能搜索更精确</h2><ol><li><p>搜索的内容包含两个或以上关键词，可以用空格来隔开。</p><blockquote><p>例如【精神 网络】，但想搜索内容包含多个关键词中的一个，用竖线|隔开，例如【精神|网络】</p></blockquote></li><li><p>当你想搜索的内容不包含某些关键词，可以用减号来避开干扰信息。</p><blockquote><p>比如【托福 -广告 -推广】， 注意减号前面有空格，后面无空格。</p></blockquote></li><li><p>当希望精准搜索时，比如你想搜一段话，这个话一个词都不能少，则加个双引号。</p><blockquote><p>比如【“机器学习与人工智能”】，搜出来的页面只会出现完整的一整句话相关的页面。</p></blockquote></li><li><p>如果你只想看到标题中有这个关键词的网页，那就可以在前面加个搜索指令：intitle。</p><blockquote><p>比如你输入「intitle：跨年演讲」，就只能搜出来标题中含跨年演讲的网页。</p></blockquote></li><li><p>在用百度、谷歌等搜索引擎的时候，搜索框下面有个下拉菜单，可以选择时间期限内发布的网页。</p></li><li><p>当你想搜索影视、音乐、图书相关的内容，加上书名号《》会帮你避免很多麻烦。</p><blockquote><p>比如搜索「《格局》」这本书，加上书名号，就能排除其他信息。</p></blockquote></li><li><p>当你想快速找到某类文件，可以运用文件类型的搜索指令“Filetype”。</p><blockquote><p>比如你想搜索某公司研报，你就可以列「600519 深度研究 Filetype：pdf」，600519是上市公司代码，「Filetype：pdf」是定义文件格式，就能定向搜到该公司研报。</p></blockquote></li></ol><h2 id="常用的搜索网站"><a href="#常用的搜索网站" class="headerlink" title="常用的搜索网站"></a>常用的搜索网站</h2><h3 id="商用数据库"><a href="#商用数据库" class="headerlink" title="商用数据库"></a>商用数据库</h3><blockquote><p>主要是国家、行业、行业数据，但是有些需要付费</p></blockquote><p>万得 <a href="http://www.wind.com.cn/">http://www.wind.com.cn</a><br>彭博 <a href="http://bloomberg.com/">http://bloomberg.com</a><br>路透 <a href="http://cn.reuters.com/">http://cn.reuters.com</a><br>锐思 <a href="http://www.resset.cn/">http://www.resset.cn</a></p><h3 id="学术数据库"><a href="#学术数据库" class="headerlink" title="学术数据库"></a>学术数据库</h3><blockquote><p>国内外的一二手的期刊、论文等</p></blockquote><p>知网 <a href="http://www.cnki.net/">http://www.cnki.net</a><br>万方 <a href="http://www.wanfangdata.com.cn/">http://www.wanfangdata.com.cn</a><br>中国国家图书馆 <a href="http://www.nlc.cn/">http://www.nlc.cn/</a><br>维普 <a href="http://www.cqvip.com/">http://www.cqvip.com</a><br>EBSCO <a href="https://www.ebsco.com/">https://www.ebsco.com</a><br>数据圈 <a href="http://www.shujuquan.com/">http://www.shujuquan.com/</a><br>台湾学术数据库 <a href="http://fedetd.mis.nsysu.edu.tw/">http://fedetd.mis.nsysu.edu.tw/</a><br>台湾大学电子书 <a href="http://ebooks.lib.ntu.edu.tw/Home/ListBooks">http://ebooks.lib.ntu.edu.tw/Home/ListBooks</a><br>外国文献搜索SCI-hub <a href="https://sci-hub.se/">https://sci-hub.se/</a><br>科技方面的文献 <a href="https://www.sciencedirect.com/">https://www.sciencedirect.com/</a></p><h3 id="学习平台清单"><a href="#学习平台清单" class="headerlink" title="学习平台清单"></a>学习平台清单</h3><p>1.可汗学院： <a href="https://www.khanacademy.org/">https://www.khanacademy.org/</a></p><blockquote><p> 美国的免费学习网站，领域涵盖数学，历史，金融，物理，化学，生物学，天文学，经济学和计算机科学等。建议用英文原版网站，中文网站内容目前还比较少。</p></blockquote><p>2.Coursera：<a href="https://www.coursera.org/">https://www.coursera.org/</a></p><blockquote><p>世界最大的在线教育平台，包含各行业最前沿的知识，可以免费旁听所有课程。但如果你想获得课程结业证书，就需要付费或者申请奖学金抵用。</p></blockquote><p>3.Edx：<a href="https://www.edx.org/">https://www.edx.org/</a></p><blockquote><p>提供哈佛大学、麻省理工学院等一流顶级教育机构的免费课程，包括视频课程、讲座、教材和习题集等。</p></blockquote><p>4.多邻国：<a href="http://www.duolingo.cn/">http://www.duolingo.cn/</a></p><blockquote><p>语言类的免费学习网站，课程资源强大，包括了英语、法语、西班牙语、韩语、日语等多种语言。</p></blockquote><p>5.MIT-Open Course Ware：<a href="https://ocw.mit.edu/courses/find-by-topic/">https://ocw.mit.edu/courses/find-by-topic/</a></p><blockquote><p>麻省理工学院官方开办的免费学习网站。课程齐全，包含了课程视频、学习资料和书籍，甚至课程作业，就像你和麻省理工学院的学生一起上课一样。</p></blockquote><p>6.MasterClass ：<a href="https://www.masterclass.com/">https://www.masterclass.com/</a></p><blockquote><p>全球一流的流媒体平台，提供100多种课程，涵盖商务和领导力、摄影、烹饪、写作、表演、体育等各个领域。请各行业的大师、高手来给你授课。比如女魔头安娜·温图尔教你领导力课，斯蒂芬·库里教你打篮球，娜塔莉·波特曼教你表演。</p></blockquote><p>7.MOOC：<a href="https://www.icourse163.org/">https://www.icourse163.org/</a></p><blockquote><p>国内免费学习网站，包含了各个专业的国家级精品课程。</p></blockquote><p>8.Kadenze：<a href="https://www.kadenze.com/">https://www.kadenze.com/</a></p><blockquote><p>音乐、艺术、设计领域的学习平台，可学习各大艺术学院的课程。</p></blockquote><p>9.Dave Conservatoire：<a href="https://www.daveconservatoire.org/">https://www.daveconservatoire.org/</a></p><blockquote><p>免费的在线音乐学习网站，立志于“让每一个人都可以接受世界级的音乐教育”。目前，该网站已经有上百个音乐学习视频，在接受了音乐学习之后还可以进行自我测试。</p></blockquote><p>10.Codecademy：<a href="https://www.codecademy.com/">https://www.codecademy.com/</a></p><blockquote><p>一个在线编程类互动学习网站，即使零基础的程序爱好者都可以轻松入门，用户可以直接写代码并且进行测试，并通过一项项有趣的任务学习、积累和掌握编程技能。</p></blockquote><ol start="11"><li>zlibrary：<a href="https://book4you.org/">https://book4you.org/</a></li></ol><blockquote><p>免费的电子书下载网站</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 搜索方法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 搜索 </tag>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习方法总结</title>
      <link href="/2021/12/25/2021-12-24-%E6%96%B9%E6%B3%95-%E5%A6%82%E4%BD%95%E9%AB%98%E6%95%88%E5%AD%A6%E4%B9%A0/"/>
      <url>/2021/12/25/2021-12-24-%E6%96%B9%E6%B3%95-%E5%A6%82%E4%BD%95%E9%AB%98%E6%95%88%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="如何高效学习"><a href="#如何高效学习" class="headerlink" title="如何高效学习"></a>如何高效学习</h1><h2 id="一、-设定合理的目标"><a href="#一、-设定合理的目标" class="headerlink" title="一、 设定合理的目标"></a>一、 设定合理的目标</h2><p>在开始学习之前，要给自己定一个期限，并且写好学完后应达成的效果</p><p>需回答以下问题：</p><ol><li>你定的这个目标有啥用，完成之后能做什么？</li><li>目标什么时候开始，多长时间完成，截止日期是多少？</li><li>为了完成目标，你准备做哪些内容，准备每天完成还是每周、每月完成？</li><li>目标分为几个阶段，每个阶段做到什么程度就算完成了？</li></ol><h2 id="二、学习过程中的技巧"><a href="#二、学习过程中的技巧" class="headerlink" title="二、学习过程中的技巧"></a>二、学习过程中的技巧</h2><h4 id="1-设定环境场"><a href="#1-设定环境场" class="headerlink" title="1. 设定环境场"></a>1. 设定环境场</h4><p>指定一个空间，只用来学习。比如坐在书桌前就只学习，要玩得去其他地方。通过营造一种环境场，来帮助自己进入学习状态。</p><h4 id="2-学习前，先提问"><a href="#2-学习前，先提问" class="headerlink" title="2. 学习前，先提问"></a>2. 学习前，先提问</h4><p>通过问问题，让自己快速进入学习的状态。</p><p>​    1） 根据这个标题，我认为他主要是谈什么问题？</p><p>​    2） 在学之前，关于这个问题，我知道些什么，我的观点是什么？</p><p>​    3)    在接下来的学习中，我最想解决的问题是什么？</p><h4 id="3-记笔记"><a href="#3-记笔记" class="headerlink" title="3 . 记笔记"></a>3 . 记笔记</h4><p>要用自己的话语对书中知识点进行总结。前提是自己理解，而不是对着书中内容一顿猛抄。</p><h4 id="4-给自己制造反馈"><a href="#4-给自己制造反馈" class="headerlink" title="4. 给自己制造反馈"></a>4. 给自己制造反馈</h4><p>​      1）讲给别人听</p><p>​            在讲给别人时，发现自己哪里卡顿，是否能清晰的表达，对方追问的问题自己是否能解答，自己能举例让对方明白吗。如果不能，说明自己还没理解清楚。</p><p>​        2） 通过写作（通过自己的话语）、录音、视频的方式表达文章观点，然后自己回看去发现问题。</p><h2 id="三、学习完成后如何验收"><a href="#三、学习完成后如何验收" class="headerlink" title="三、学习完成后如何验收"></a>三、学习完成后如何验收</h2><h4 id="1-总结"><a href="#1-总结" class="headerlink" title="1. 总结"></a>1. 总结</h4><p>自己真正把学到的知识运用到工作生活中后，自己得总结出运用这项知识的关键点有哪些。只有做完总结，自己才算吧这个知识真正内化到自己的能力中了。</p><h4 id="2-以教为学"><a href="#2-以教为学" class="headerlink" title="2. 以教为学"></a>2. 以教为学</h4><p>通过通俗易懂的方式，输出文章、视频等。通过把这个知识教给别人，来考验自己是否真正掌握了这项知识。（费曼学习法）</p><h2 id="四、如何扩大自己的知识面"><a href="#四、如何扩大自己的知识面" class="headerlink" title="四、如何扩大自己的知识面"></a>四、如何扩大自己的知识面</h2><ol><li><strong>带着急需解决某个问题去读相关书籍，先刷书，后精读。</strong></li></ol><p>先根据目录直接翻到自己感兴趣内容，如果发现没有收获直接换下一本。用这种方式迅速打开视野，快速筛选出那些真正值得逐字精读的好书。</p><p>在精读时，可用一根手指指着你要看的那行字，逐字阅读。手指移动到哪，视线就跟到哪。通过这种方式聚焦你的注意力。</p><blockquote><p>在读一本书的时候，要以自己为中心，而不是以一本书为中心。 你买这本书，不是为了看书里别人是怎么想的，而是从这本书里的想法中得到启发，能够完善自己的想法。</p></blockquote><ol start="2"><li>搜索，看视频教程，请教专业人士。</li></ol><hr><h2 id="想学啥，先定目标"><a href="#想学啥，先定目标" class="headerlink" title="想学啥，先定目标"></a>想学啥，先定目标</h2><h4 id="目标：学会如何学习"><a href="#目标：学会如何学习" class="headerlink" title="目标：学会如何学习"></a>目标：学会如何学习</h4><ol><li><p>你完成这个目标之后能干啥</p><p>完成这个目标，我就可以系统的掌握学习的方法，能够快速的学习一门知识，而不是像一个无头苍蝇在门外乱撞，迟迟入不了门。</p></li><li><p>你的目标什么时候开始，多长时间完成，截止时间是什么时候？</p><p>开始日期：2021年12月26日</p><p>时间长度：1个月</p><p>结束日期：2022年1月25日</p></li><li><p>为了完成这个目标，你准备怎么做，时间频率是怎么样的？</p><ul><li><p><input checked="" disabled="" type="checkbox">  学习《脱不花-怎样成为高效学习的人》</p></li><li><p><input checked="" disabled="" type="checkbox">  学习《许芩-如何成为有效学习的高手》</p></li><li><p><input checked="" disabled="" type="checkbox">  学习 得到、极客时间上其他讲师的学习方法论</p></li><li><p><input checked="" disabled="" type="checkbox">  学会如何学习—-<a href="https://book.douban.com/subject/34923186/">https://book.douban.com/subject/34923186/</a></p></li><li><p><input checked="" disabled="" type="checkbox">  如何学习——–<a href="https://book.douban.com/subject/27081766/">https://book.douban.com/subject/27081766/</a></p></li><li><p><input checked="" disabled="" type="checkbox">  学习之道——-<a href="https://book.douban.com/subject/26895988/">https://book.douban.com/subject/26895988/</a></p><blockquote><p>准备先看专栏，每天最少看一篇，总结笔记，并且写自己的感想</p></blockquote></li></ul></li><li><p>目标分为几个层次，每个层次做到什么程度算完成了？</p><p>目标分为三个层次</p><p>层次1：  完成得到、极客时间学习方法论总结，并且形成笔记与感想</p><p>层次2： 完成书籍研究，形成自己的学习方法论</p><p>层次3：能够熟练利用自己的学习方法论进行学习，能够快速学习自己想学习的任何课程</p></li></ol><h4 id="目标：掌握机器学习内容"><a href="#目标：掌握机器学习内容" class="headerlink" title="目标：掌握机器学习内容"></a>目标：掌握机器学习内容</h4><ol><li><p>你定这个目标有啥用，学完之后能做什么？</p><p>学习机器学习为自己专业上必须会的内容，学习机器学习精进自己专业领域的知识。</p></li><li><p>目标什么时候开始，多长时间完成，截止日期是多少？</p><p>开始时间：1月9号</p><p>结束时间：5月1号</p><p>时长： 110天</p></li><li><p>为了完成目标，你准备做哪些内容，准备每天完成还是每周、每月完成？</p><p>学习内容：</p><ul><li><input disabled="" type="checkbox"> 学习书籍：《机器学习实战：基于Scikit-Learn、Keras和TensorFlow：原书第2版》</li><li><input disabled="" type="checkbox"> 学习课程：《人工智能基础课》</li><li><input disabled="" type="checkbox"> 学习课程：《机器学习40讲》</li><li><input disabled="" type="checkbox"> 学习课程：《推荐系统三十六式》</li><li><input disabled="" type="checkbox"> 学习课程：《成为AI产品经理》</li><li><input disabled="" type="checkbox"> 学习课程：《AI技术内参》</li><li><input disabled="" type="checkbox"> 学习课程：《零基础实战机器学习》——学习书籍：《零基础实战机器学习》</li><li><input disabled="" type="checkbox"> 视频视频课程：机器学习（Machine Learning）- 吴恩达（Andrew Ng）</li><li><input disabled="" type="checkbox"> 学习书籍：《白话机器学习的数学》</li><li><input disabled="" type="checkbox"> 学习书籍：《美团机器学习实践》</li><li><input disabled="" type="checkbox"> 学习书籍：《漫画机器学习入门》</li></ul></li><li><p>目标分为几个阶段，每个阶段做到什么程度就算完成了？</p><p>截止2月9号，学完：极客时间课程《零基础实战机器学习》， 书本：《漫话机器学习入门》</p><p>截止3月9号， 学完：极客时间课程《机器学习40讲》，书本《机器学习实战：基于Scikit-Learn、Keras和TensorFlow：原书第2版》</p><p>截止4月9号，学完：极客时间课程《推荐系统三十六式》、《人工智能基础课》中机器学习内容、《白话机器学习的数学》</p><p>截止5月1号，学完：极客时间课程《成为AI产品经理》、《AI技术内参》、《美团机器学习实践》中内容</p><p>能够知道机器学习的项目流程，能知道调用什么代码，能完成一个具体的项目。 </p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 方法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>三款常用的文档搜索工具</title>
      <link href="/2021/12/24/2021-12-24-%E5%B7%A5%E5%85%B7-%E4%B8%89%E6%AC%BE%E5%B8%B8%E7%94%A8%E7%9A%84%E6%96%87%E6%A1%A3%E6%90%9C%E7%B4%A2%E5%B7%A5%E5%85%B7%20-%20%E5%89%AF%E6%9C%AC/"/>
      <url>/2021/12/24/2021-12-24-%E5%B7%A5%E5%85%B7-%E4%B8%89%E6%AC%BE%E5%B8%B8%E7%94%A8%E7%9A%84%E6%96%87%E6%A1%A3%E6%90%9C%E7%B4%A2%E5%B7%A5%E5%85%B7%20-%20%E5%89%AF%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<p><strong>今天我要介绍三款常用的文档搜索工具，分别为：Everything、Listary、DocFetcher；</strong> </p><ul><li>Everything 可快速搜索电脑中的文件。</li><li>Listary 不仅对文件进行搜索，还可搜索已安装软件并快速启动。</li><li>DocFetcher 可对电脑文件内的内容进行搜索，适合查找文件资料，</li></ul><p>以下为三款应用的介绍：</p><h3 id="Everything"><a href="#Everything" class="headerlink" title="Everything"></a>Everything</h3><p>下载地址：<a href="https://www.voidtools.com/downloads/">https://www.voidtools.com/downloads/</a></p><blockquote><p>Everything 是一款系统实用软件，可帮助你<strong>查找存储在 Windows 设备上的任何文件或文件夹</strong>。它的工作速度非常快，并实时为用户提供结果。虽然<strong>Everything 搜索应用程序</strong>除了搜索数据之外不执行任何操作，但它可以高效地完成这项工作，并且不会占用太多系统资源。</p></blockquote><p>执行界面为：</p><p><img src="https://raw.githubusercontent.com/zhangandyu/picture/main/%E6%96%87%E7%AB%A0%E5%9B%BE%E7%89%87/22.png"></p><p>Everything 默认是全盘搜索的，可以点击搜索结果顶部栏分别按照名称、路径、大小、修改时间进行排序。</p><p><img src="https://raw.githubusercontent.com/zhangandyu/picture/main/%E6%96%87%E7%AB%A0%E5%9B%BE%E7%89%87/23.png"></p><h3 id="Listary"><a href="#Listary" class="headerlink" title="Listary"></a>Listary</h3><p>下载地址：<a href="http://www.listary.com/download">http://www.listary.com/download</a></p><blockquote><p>Listary 是一个<strong>快速查找文件和启动应用程序</strong>的软件。</p></blockquote><p>自己主要用 Listary 来快速启动应用， 双击 Ctrl 键调出 Listary 搜索框输入程序名，按 ↑ 键或 ↓ 键进行切换，按 Enter 回车即可打开相应的应用、文件夹或文件。 </p><p>执行界面为：</p><p><img src="https://raw.githubusercontent.com/zhangandyu/picture/main/%E6%96%87%E7%AB%A0%E5%9B%BE%E7%89%87/24.png"></p><p>最近使用中经常会出现搜索结果不用打开的情况，只能退出应用重启，大家有好的办法也可留言告诉我下。</p><p><img src="https://raw.githubusercontent.com/zhangandyu/picture/main/%E6%96%87%E7%AB%A0%E5%9B%BE%E7%89%87/21.png"></p><h3 id="DocFetcher"><a href="#DocFetcher" class="headerlink" title="DocFetcher"></a>DocFetcher</h3><p>下载地址：<a href="http://docfetcher.sourceforge.net/en/download.html">http://docfetcher.sourceforge.net/en/download.html</a></p><blockquote><p>DocFetcher 是一个开源桌面搜索应用程序：它允许您搜索计算机上文件的内容。— 您可以将其视为本地文件的 Google搜索。</p></blockquote><p>DocFetcher 主要作为上面两个应用的补充，用来搜索电脑的文件内容，速度非常快，当只记住某个文件里的一些内容，但又不记得文件名称时，这个软件就非常有效了，支持常见的 doc、pdf、ppt、txt、html等格式。</p><p>执行界面为：</p><p><img src="https://raw.githubusercontent.com/zhangandyu/picture/main/%E6%96%87%E7%AB%A0%E5%9B%BE%E7%89%87/19.png"></p><p>使用前，DocFetcher需要创建索引来加速搜索。你可以针对自己希望搜索的文件夹建立索引。在上图的<strong>搜索范围</strong>的空白处点右键，<strong>选择创建索引——文件夹</strong>，这样就可以选择之后搜索范围，选择好文件夹后点击<strong>运行</strong>即可。</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>认知偏差知识手册</title>
      <link href="/2021/12/15/2021-12-15-%E8%AE%A4%E7%9F%A5%E5%81%8F%E5%B7%AE%E7%9F%A5%E8%AF%86%E6%89%8B%E5%86%8C/"/>
      <url>/2021/12/15/2021-12-15-%E8%AE%A4%E7%9F%A5%E5%81%8F%E5%B7%AE%E7%9F%A5%E8%AF%86%E6%89%8B%E5%86%8C/</url>
      
        <content type="html"><![CDATA[<h1 id="认知偏差知识手册"><a href="#认知偏差知识手册" class="headerlink" title="认知偏差知识手册"></a>认知偏差知识手册</h1><p>[TOC]</p><h2 id="一、决策、信念与行为偏差"><a href="#一、决策、信念与行为偏差" class="headerlink" title="一、决策、信念与行为偏差"></a><strong>一、决策、信念与行为偏差</strong></h2><blockquote><p>💡<strong>决策、信念与行为偏差</strong>这些偏差多半会影响信念的形成、商业与经济决策、以及其他一般的人类行为它们是可复制与再现的，面临特定情境时，一般可预期人们会有相应的偏差倾向。</p></blockquote><p><img src="https://raw.githubusercontent.com/zhangandyu/picture/main/%E8%AE%A4%E7%9F%A5%E5%81%8F%E5%B7%AE/a.png"></p><ol><li>不明确性效应 Ambiguity Effect</li></ol><p>我们倾向于避免未知，决策时避开资讯不足的选项，通过添加明确的细节来最大程度地减少歧义，从而提高转化率</p><p><strong>🔺 示例</strong> </p><p>CTA 按钮应在其旁边包含信息性标签，以清除不确定性。</p><p><img src="https://raw.githubusercontent.com/zhangandyu/picture/main/%E8%AE%A4%E7%9F%A5%E5%81%8F%E5%B7%AE/1.png"></p><ol start="2"><li>锚定效应 Anchoring Effect</li></ol><p>人类在进行决策时，会过度偏重先前取得的资讯（这称为锚点），即使这个资讯与这项决定无关。在进行决策时，人类倾向于利用此片段资讯（锚点），快速做出决定。</p><p><strong>🔺 示例</strong> </p><p>通常被利用在消费场景中的认知偏差，通过前后对比来放大优惠感知，进而促进用户做出有利于我们的决策。</p><p><img src="https://raw.githubusercontent.com/zhangandyu/picture/main/%E8%AE%A4%E7%9F%A5%E5%81%8F%E5%B7%AE/2.png"></p><ol start="3"><li>注意力偏差 Attentional Bias</li></ol><p>在检查所有可能的结果时，我们倾向于关注一些看起来合理且熟悉的事物，从而忽略了其他结果。</p><p><strong>🔺 示例</strong> </p><p>你是否发布过一项你认为会造成意外后果的功能，然后你就只盯着这个后果？</p><p><img src="https://raw.githubusercontent.com/zhangandyu/picture/main/%E8%AE%A4%E7%9F%A5%E5%81%8F%E5%B7%AE/3.png"></p><ol start="4"><li>获得性启发 Availability Heuristic</li></ol><p>我们认为那些迅速跃入脑海的事情比那些不容易想起的事情更为常见和重要。因此，最近发生的、频繁发生的、极端的、被记住的事情比大多数信息更有影响力。</p><p><strong>🔺 示例</strong> </p><p>通过创建一些与众不同的东西（在不影响一致性和熟悉度的情况下）让你的设计被记住。</p><p><img src="https://raw.githubusercontent.com/zhangandyu/picture/main/%E8%AE%A4%E7%9F%A5%E5%81%8F%E5%B7%AE/4.png"></p><ol start="5"><li>可获性层叠 Availability Heuristic</li></ol><p>这个心理效应有一个更简单的描述，叫做三人成虎，也就是一件事越常被公开谈论，人们就越相信这件事。</p><p><strong>🔺 示例</strong></p><p>创建一个醒目的标语，并确保重复多次。如果可能，这个标语以押韵结尾会更好。</p><ol start="6"><li>逆火效应 Backfire Effect</li></ol><p>我们不能轻易改变人们的信念：与根深蒂固的信念相反的证据和论据无济于事，只会巩固信念的地位。</p><p><strong>🔺 示例</strong> </p><p>通过情感辩论来影响他人的行为，不要尝试直接改变他们的信念。</p><ol start="7"><li>从众效应 Bandwagon Effect</li></ol><p>我们经常会因为大多数人以同一种方式思考，而改变我们自己的想法。</p><p><strong>🔺 示例</strong> </p><p>我们在设计中可以营造出一种群体选择的效果来吸引更多的用户，通过展示购买人数和滚动播放购买信息来体现出该商品的热门，让正在犹豫的用户「随大流」下单购买。</p><p><img src="https://raw.githubusercontent.com/zhangandyu/picture/main/%E8%AE%A4%E7%9F%A5%E5%81%8F%E5%B7%AE/7.png"></p><ol start="8"><li>信念偏差 Belief Bias</li></ol><p>我们更倾向于接受与我们的先验知识相符的论点，而拒绝对该论点的反驳。</p><p><strong>🔺 示例</strong> </p><p>谈论产品的好处时，不要夸大其词。如果它好到让人无法相信，那么人们将不会相信它。</p><ol start="9"><li>选择支持偏差 Choice-Supportive Bias</li></ol><p>做出决定后，我们倾向于称赞我们选择的选项，然后降级其他选项。</p><p><strong>🔺 示例</strong> </p><p>在用户做出购买决定并成功达成交易之后，是用户分享产品（或添加评论）的绝佳时机；显示肯定的信息，并祝贺他们达成了这一步骤以激励用户。</p><p><img src="https://raw.githubusercontent.com/zhangandyu/picture/main/%E8%AE%A4%E7%9F%A5%E5%81%8F%E5%B7%AE/9.png"></p><ol start="10"><li>确认偏差 Confirmation Bias</li></ol><p>当人们本来就持有某种观点时，对这种观点的感知和注意度会被放大，会选择性地回忆或收集关于它的事例。人们对于自己原本就相信的观点会更容易接受，而把反面观点搁置在一旁。</p><p><strong>🔺 示例</strong> </p><p>在用户研究中，当你的预设想法是用户对A设计的满意度比B设计更高时，在研究中你可能会更关注用户提到的A设计的优点、收集更多用户对于A设计的正面评价。当用户表示对A设计满意时，会觉得“果然是这样”。这种偏误会让你遗漏许多其它信息。</p><p><img src="https://raw.githubusercontent.com/zhangandyu/picture/main/%E8%AE%A4%E7%9F%A5%E5%81%8F%E5%B7%AE/10.png"></p><p> 11 知识的诅咒 Curse of Knowledge</p><p>当我们是某个领域的专家时，会不知不觉假设其他人和我们具有相同的理解能力，尤其是对于专业术语的使用。</p><p><strong>🔺 示例</strong> </p><p>考虑一下大多数用户，他们的技术水平可能不如你想象的那样，并且对你熟悉的事物也不太熟悉。</p><p><img src="https://raw.githubusercontent.com/zhangandyu/picture/main/%E8%AE%A4%E7%9F%A5%E5%81%8F%E5%B7%AE/11.png"></p><ol start="12"><li>诱饵效应 Decoy Effect</li></ol><p>引入第三个选项來加强旧选项的吸引力。</p><p><strong>🔺 示例</strong> </p><p>假设有产品 A 和 B，以下是顾客可以选择的选项：</p><p>(1) ¥100 - A</p><p>(2) ¥300 - B</p><p>(3) ¥300 - A + B</p><p>在这个情景，（2）是“诱饵”，用来引导顾客选择“目标选项”（3）。</p><p><img src="https://raw.githubusercontent.com/zhangandyu/picture/main/%E8%AE%A4%E7%9F%A5%E5%81%8F%E5%B7%AE/12.png"></p><ol start="13"><li>差异偏差 Distinction Bias</li></ol><p>在有比较项存在的时候，我们对微小的差异变得敏感，而实际上，这些差异并不是很大。</p><p><strong>🔺 示例</strong> </p><p>在竞争对手旁边展示你的产品优势，以便用户注意到差异，即使是一个很小的差异。</p><ol start="14"><li>禀赋效应 Endowment Effect</li></ol><p>和没有拥有的物品相比，用户更倾向于保留自己拥有的物品。他们倾向于高估自己拥有的东西，而忽略其客观的市场价值。</p><p><strong>🔺 示例</strong> </p><p>禀赋效应是损失规避（loss aversion）的一种表现形式，免费试用是禀赋效应的最常见用法。 一旦用户开始使用某种产品并投入了一段时间，那么在试用期结束时，他们很难放手而停止使用。当用户准备离开时，他们会觉得自己即将失去很多美好的事物。</p><p><img src="https://raw.githubusercontent.com/zhangandyu/picture/main/%E8%AE%A4%E7%9F%A5%E5%81%8F%E5%B7%AE/14.png"></p><ol start="15"><li>功能固着 Functional Fixedness</li></ol><p>指个体在解决问题时往往只看到某种事物的通常功能，而看不到它其他方面可能有的功能。这是人们长期以来形成的对某些事物的功能或用途的固定看法。</p><p><strong>🔺 示例</strong> </p><p>当产品挑战到现有的使用传统时，可能会引起一些可用性挑战。 请确保进行可用性测试，并尝试提前解决这些潜在的问题。</p><ol start="16"><li>巴纳姆效应 Barnum Effect</li></ol><p>也称佛瑞效应。人们会对于他们认为是为自己量身定做的一些人格描述给予高度准确的评价，而这些描述往往十分模糊及普遍，以致能够放诸四海皆准适用于很多人身上。</p><p><strong>🔺 示例</strong> </p><p>在产品文案中，尽量避免使用“大家”，“用户”等描述，使用诸如“你”，“你的”之类的可以更贴近用户，人们理解规范性信息时，存在一种选择性代入感，这种代入感会让人无意识地专注于选择贴合自己认知和经验，从而产生一种“我也是这样”的归属感。</p><ol start="17"><li>框架效应 Framing Effect</li></ol><p>框架效应的意义是，面对同一个的问题，在使用不同的描述后，人们会选择乍听之下较有利或顺耳的描述作为方案。</p><p><strong>🔺 示例</strong> </p><p>在大多数情况下，正向表达（例如玻璃杯已满一半）的转换率会更高。</p><p><img src="https://raw.githubusercontent.com/zhangandyu/picture/main/%E8%AE%A4%E7%9F%A5%E5%81%8F%E5%B7%AE/17.png"></p><ol start="18"><li>频率错觉 Frequency Illusion</li></ol><p>首次引起我们注意后，我们很快就会从很多地方注意到相关信息。 例如，如果某人想购买一辆新车，通常会突然发现到处都是这辆车。</p><p><strong>🔺 示例</strong> </p><p>推动广告系列时，使访问者在不同的营销渠道中接触相同的内容，让别人觉得你的产品周围都是，加深这种新产品的印象。</p><ol start="19"><li>后见之明偏差 Hindsight Bias</li></ol><p>后视偏见会让人沉迷于“我早就预料到了”这种感受当中，无法真正从事件中汲取到有用的经验，也难以用公平的眼光来评判客观事物和他人，主观上也很容易选择性地忽略许多客观事实。</p><p><strong>🔺 示例</strong> </p><p>后视偏见会给人带来快感，但也会在工作中影响决策的正确性和公平性，从而带来潜在风险。纠正后视偏见的方法就是在知道事情结果之前，记录下自己的想法，事后做验证并统计相关数据。</p><p><img src="https://raw.githubusercontent.com/zhangandyu/picture/main/%E8%AE%A4%E7%9F%A5%E5%81%8F%E5%B7%AE/19.png"></p><ol start="20"><li>当下偏差 Current Moment Bias</li></ol><p>又称现时偏差，人们更倾向于获取即时收益，而非未来的更大收益。</p><p><strong>🔺 示例</strong> </p><p>为用户的立即购买提供小折扣（或免费送货），而非承诺他们在将来购买时提供更大的折扣。</p><p><img src="https://raw.githubusercontent.com/zhangandyu/picture/main/%E8%AE%A4%E7%9F%A5%E5%81%8F%E5%B7%AE/20.png"></p><ol start="21"><li>可辨识受害者效应 Identifiable Victim Effect</li></ol><p>我们倾向于同情一个特定的人而不是匿名的某一个人。</p><p><strong>🔺 示例</strong> </p><p>在讲产品故事时，请使用个体案例，而非一般性陈述。</p><p><img src="https://raw.githubusercontent.com/zhangandyu/picture/main/%E8%AE%A4%E7%9F%A5%E5%81%8F%E5%B7%AE/21.png"></p><ol start="22"><li>宜家效应 IKEA Effect</li></ol><p>宜家效应是指人们倾向于高度评价他们参与创造的产品，消费者对于一个物品付出的劳动（情感）越多，就越容易高估该物品的价值。</p><p><strong>🔺 示例</strong> </p><p>利用宜家效应提高用户粘性的核心是创造低投入、高回报、高贡献价值的任务，保证用户能够完成任务的基础上贡献自己的价值。在学习场景中我们可以利用宜家效应提高用户粘性，将用户留下来坚持学习。</p><p><img src="https://raw.githubusercontent.com/zhangandyu/picture/main/%E8%AE%A4%E7%9F%A5%E5%81%8F%E5%B7%AE/22.png"></p><ol start="23"><li>影响力偏差 Impact Bias</li></ol><p>我们倾向于高估未来情绪状态的持续时间或强度。</p><p><strong>🔺 示例</strong> </p><p>描绘在没有你的产品或服务下用户会遭遇的问题，然后，介绍你的产品会如何解决这些问题。</p><ol start="24"><li>资讯偏差 Information Bias</li></ol><p>因测量误差所导致的一种偏误现象，有时亦称为观察偏误或分组错误。</p><p><strong>🔺 示例</strong> </p><p>在展示产品或服务时（在网站上或app内），请确保附有详细说明的照片。 在产品说明中获得的信息越多，用户获得的保证就越大。</p><ol start="25"><li>沉没成本谬误 Sunk Cost Fallacy</li></ol><p>我们在某件事上投入越多就越难放弃它。因此，我们往往会继续执行这个走向失败的行动，仅仅是因为我们过去已经在此投入了过多的时间、金钱或精力。</p><p><strong>🔺 示例</strong> </p><p>当游戏玩家支付了每月30元的会员费时，很多人会强迫自己继续玩游戏，因为他们已经在虚拟游戏中投入了大量时间和金钱。</p><ol start="26"><li>损失趋避 Loss Aversion</li></ol><p>指人们面对同样数量的收益和损失时，认为损失更加令他们难以忍受。损失带来的负效用为收益正效用的2至2.5倍。损失厌恶反映了人们的风险偏好并不是一致的，当涉及的是收益时，人们表现为风险厌恶；当涉及的是损失时，人们则表现为风险寻求。</p><p><strong>🔺 示例</strong> </p><p>限制特价交易的时间以产生紧迫感：“此优惠在x小时内结束”。</p><p><img src="https://raw.githubusercontent.com/zhangandyu/picture/main/%E8%AE%A4%E7%9F%A5%E5%81%8F%E5%B7%AE/26.png"></p><ol start="27"><li>单纯接触效应 Mere Exposure Effect</li></ol><p>人们会单纯因为自己熟悉某个事物而产生好感。它表明某一外在刺激，仅仅因为呈现的次数越频繁（使个体能够接触到该刺激的机会越多），个体对该刺激将越喜欢。</p><p><strong>🔺 示例</strong> </p><p>坚持使用用户熟悉的 UI 概念、行为、术语、符号和图标。在营销材料、网站和产品上保持一致来优化漏斗，用词保持和行业术语一致，确保你的用户感到舒适。</p><p><img src="https://raw.githubusercontent.com/zhangandyu/picture/main/%E8%AE%A4%E7%9F%A5%E5%81%8F%E5%B7%AE/27.png"></p><ol start="28"><li>负面偏差 Negativity Bias</li></ol><p>相比于中性或者积极的事物，具有负面影响的事物对人们的心理影响更大。</p><p><strong>🔺 示例</strong> </p><p>通过解决负面体验来说明你的产品价值，如果希望自己的故事能够产生更大的影响,就要尝试多展现情感上负面的内容。</p><p><img src="https://raw.githubusercontent.com/zhangandyu/picture/main/%E8%AE%A4%E7%9F%A5%E5%81%8F%E5%B7%AE/28.png"></p><ol start="29"><li>忽略可能性 Neglect of Probability</li></ol><p>当我们承受压力时，我们没有想到风险发生的可能性。结果，较小的风险可能会被高估或被忽略。</p><p><strong>🔺 示例</strong> </p><p>在转换漏斗中，最小的不确定性可能导致用户对产品的不信任并停止使用。 需要确保所有细节均清晰明了并预先显示，尤其是涉及金钱的事物，例如总成本，折扣（如果存在），附加成本等。</p><p><img src="https://raw.githubusercontent.com/zhangandyu/picture/main/%E8%AE%A4%E7%9F%A5%E5%81%8F%E5%B7%AE/29.png"></p><ol start="30"><li>乐观偏差 Optimism Bias</li></ol><p>与别人相比，我们经常高估自己成功的几率。</p><p><strong>🔺 示例</strong> </p><p>请确保产品没有隐藏任何可能破坏乐观偏见的令人不愉快的功能（例如额外的费用，可能的延误等）。</p><ol start="31"><li>鸵鸟效应 Ostrich Effect</li></ol><p>我们故意避免负面信息（或与我们的期望不一致的反馈），认为如果我们把头埋在沙子里，它们就会消失。</p><p><strong>🔺 示例</strong> </p><p>与客户支持一起并肩工作，主动去看什么让用户困惑，从处理用户投诉中可以学到很多东西。</p><ol start="32"><li>规划谬误 Planning Fallacy</li></ol><p>我们倾向于低估完成一项任务所需的时间，通常规划谬误会导致时间超支，成本超支或收益不足。将大型任务分解为较小的部分有助于解决这些问题。</p><p><strong>🔺 示例</strong> </p><p>将你的初始估算值乘以2，不，实际上是3。这样做不是因为你懒惰，而是因为你的估计可能是错误的。</p><ol start="33"><li>对抗心理 Reactance</li></ol><p>当我们感到某人（或某物）试图剥夺或限制我们的选择时，对抗心理就会发生。 当它发生时，我们有一种抵制它并采取相反行动的冲动。</p><p><strong>🔺 示例</strong> </p><p>当你与用户“争论”他的选择时要小心，说服对方时必须循循善诱，永远不要与用户直接对抗。</p><ol start="34"><li>自制偏差 Restraint Bias</li></ol><p>人们经常会高估自己控制冲动行为的能力。</p><p><strong>🔺 示例</strong> </p><p>我们都认为“标题党”属于旁门左道，但我们还是陷入其中，不是吗？</p><p><img src="https://raw.githubusercontent.com/zhangandyu/picture/main/%E8%AE%A4%E7%9F%A5%E5%81%8F%E5%B7%AE/34.png"></p><ol start="35"><li>韵律当理由效应 Rhyme as Reason Effect</li></ol><p>人们会更容易把有韵律的、押韵的句子，当作是真实和准确的。一句话只要变得有韵律了，那么就更有说服力了。</p><p><strong>🔺 示例</strong> </p><p>大部分广告语都朗朗上口，非常洗脑。</p><p>所以，尽可能的把你的产品文案变得有韵律感，这样更容易说服用户。</p><ol start="36"><li>风险补偿 Risk Compensation</li></ol><p>也称佩尔兹曼效应。当我们感觉到更大的风险时，我们会变得更加谨慎，而当我们受到更多保护时，我们就会没那么谨慎。</p><p>所以当我们知道在已经采取了很多安全措施以后，我们更有可能采取冒险的方式行事。</p><p><strong>🔺 示例</strong></p><p>在购买或注册前让用户对产品产生尽可能的安全感，让他们获得信心和信任。</p><ol start="37"><li>选择性知觉 Selective Perception</li></ol><p>我们对事物的看法在很大程度上受到期望的影响，当人们集中注意力时，人们会从环境中过滤掉事物。</p><p><strong>🔺 示例</strong> </p><p>产品的转化漏斗并没有在用户登录时开始，而是在用户首次看到你的广告时就开始了。营销信息与产品提供内容之间的不一致会让你的用户大失所望，从而导致转化率的下降。在所有媒介上（漏斗的各个阶段）的消息一致将为用户带来正确的期望，从而提高转化率。</p><ol start="38"><li>幸存者偏差 Survivorship Bias</li></ol><p>过度关注幸存下来的人或事物，忽略那些被筛选掉的人或事物（可能因为无法观察到），从而得出错误的结论。</p><p><strong>🔺 示例</strong> </p><p>在需求分析和调研过程中，如果忽视了幸存者偏差，很有可能搜集到的数据，体现的仅仅只是少部分用户的需求和想法，最终将伪需求和小众需求当作主要需求来作为设计，从而让产品从一开始就走向万劫不复。</p><ol start="39"><li>零风险偏差 Zero-Risk Bias</li></ol><p>我们喜欢确定性，即使它适得其反。在有其他方案可以降低整个风险的情形下，仍倾向于完全消除某一项风险的偏见。一个例子是刻意降低个人负责领域的风险，可是代价是整个组织风险的上升。</p><p><strong>🔺 示例</strong> </p><p>提供退款保证和无风险试用，以降低风险水平，使你的用户感到安全。</p><p><img src="https://raw.githubusercontent.com/zhangandyu/picture/main/%E8%AE%A4%E7%9F%A5%E5%81%8F%E5%B7%AE/39.png"></p><ol start="40"><li>感知价值偏差 Perceived Value Bias</li></ol><p>我们根据产品的外观或服务方式来感知其价值。正如人们所说：全部在包装中！</p><p><strong>🔺 示例</strong> </p><p>设计对于产品的成功比你想象的更为重要，多余的空间，错误的边框颜色和未对齐的文字，都会影响转化率，确保UI设计的优先程度。</p><p><img src="https://raw.githubusercontent.com/zhangandyu/picture/main/%E8%AE%A4%E7%9F%A5%E5%81%8F%E5%B7%AE/40.png"></p><ol start="41"><li>分析瘫痪 Analysis Paralysis</li></ol><p>又称选择超载。当出现太多选择时，我们的大脑就会瘫痪，很难进行选择。</p><p><strong>🔺 示例</strong> </p><p>选择太多 = 转换率低</p><p><img src="https://raw.githubusercontent.com/zhangandyu/picture/main/%E8%AE%A4%E7%9F%A5%E5%81%8F%E5%B7%AE/41.png"></p><ol start="42"><li>稀缺效应 Scarcity Effect</li></ol><p>我们将稀缺物品的价值提高，将高可用性物品的价值降低。</p><p>害怕错过（FOMO: fear of missing out ）使我们更容易受到诱惑和冲动，并促使我们做出轻率的决定。</p><p><strong>🔺 示例</strong> </p><p>使用“限时优惠”，“有限数量” 等修辞来形容你的产品或服务。给人的印象是许多人正观看此项目，并随时可以抢走最后的几件物品。</p><p><img src="https://raw.githubusercontent.com/zhangandyu/picture/main/%E8%AE%A4%E7%9F%A5%E5%81%8F%E5%B7%AE/42.png"></p><ol start="43"><li>流畅性启发 Fluency Heuristic</li></ol><p>我们认为那些处理速度更快、更流畅、更顺利的事物具有更高的价值。有时不合逻辑的论点在沟通良好的情况下（由有权威和经验的人提出）也可能会赢得胜利。</p><p><strong>🔺 示例</strong> </p><ul><li><p>为用户提供便利（快捷、简单和易于理解的导航）</p></li><li><p>使内容易于浏览（图像，易读的字体）</p></li><li><p>创建“心理捷径”，它将吸引用户，促使他们把你的产品作为首选</p></li><li><p>提供有意义的默认选项，因为用户会认为你考虑了他们的最大利益，并将尽可能选择默认选项</p></li><li><p>添加功能强大的跨产品搜索，以简化特定主题的查找</p></li></ul><p><img src="https://raw.githubusercontent.com/zhangandyu/picture/main/%E8%AE%A4%E7%9F%A5%E5%81%8F%E5%B7%AE/43.png"></p><h2 id="二、社会偏差"><a href="#二、社会偏差" class="headerlink" title="二、社会偏差"></a><strong>二、社会偏差</strong></h2><blockquote><p>👫<strong>社会偏差</strong>这些偏差大多是由归因偏差导致。</p></blockquote><p><img src="https://raw.githubusercontent.com/zhangandyu/picture/main/%E8%AE%A4%E7%9F%A5%E5%81%8F%E5%B7%AE/b.png"></p><ol start="44"><li>行动者-观察者偏差 Actor-Observer Bias</li></ol><p>行动者喜欢将他们自己的行为归因于情境性因素，而观察者喜欢将同样的行为归因于行动者稳定的人格素质。</p><p><strong>🔺 示例</strong> </p><p>我们会用外在、不可控的情境性原因来解释自己的行为，比如上班迟到是因为路上出了意外。但是当我们作为观察者，试图对别人的行为进行解释时，我们会用内在的、稳定的人格原因来解释，比如上班迟到是因为他懒、没有时间观念。</p><ol start="45"><li>达克效应 Dunning–Kruger Effect</li></ol><p>我们无法认识到我们缺乏能力，并且由于无法分辨能力好与能力差的不同，因而认为大家都一样。</p><p><strong>🔺 示例</strong> </p><ul><li><p>能力差的人通常会高估自己的技能水平；</p></li><li><p>能力差的人不能正确认识到其他真正有此技能的人的水平</p></li><li><p>能力差的人无法认知且正视自身的不足，及其不足之极端程度；</p></li><li><p>如果能力差的人能够经过恰当训练大幅度提高能力水平，他们最终会认知到且能承认他们之前的无能程度。</p></li></ul><p><img src="https://raw.githubusercontent.com/zhangandyu/picture/main/%E8%AE%A4%E7%9F%A5%E5%81%8F%E5%B7%AE/45.png"></p><ol start="46"><li>错误共识效应 False Consensus Effect</li></ol><p>人们倾向于高估别人对自己的认同程度，想象其他人像我们一样，并分享我们的观点，信念，偏好，价值观和习惯，认为所有人以同样的方式思考。</p><p><strong>🔺 示例</strong> </p><p>在没有涉足政坛（或特定国家）的情况下，你最近对你所在国家的选举结果是否感到惊讶？</p><ol start="47"><li>基本归因谬误 Fundamental Attribution Error</li></ol><p>解释他人行为时，归因于内在特质（一定是他有这样的人格，才做出这样的行为），而非外在情境（也许是情势所迫，或这个场所有特殊的潜规则）。基本归因谬误是矛盾和问题的常见来源，而且这种认知偏差存在于用户也同样存在于设计师本身。</p><p><strong>🔺 示例</strong> </p><p>需要设计师能够清楚地分辨「我的观点」和「我的行为」，能够真正将自己从自己所处的立场、角色、职能上抽离出来，复盘整个局面。首先接纳全部的现实，包括他人的想法、观点，先不去判断对错，明白事物的动态变化过程。不要再单一地去判断，因为任何一个视角必然会存在一个立场，它们是当前事物诸多层面中的一方面而已。</p><ol start="48"><li>晕轮效应 Halo Effect</li></ol><p>晕轮效应是指使用一个人（或事物）的一种品质来对该人或事物进行整体判断，换句话说，我们对一个人、一个产品、一家公司或一个品牌的最初印象会影响我们对其整体特征的解读。</p><p><strong>🔺 示例</strong> </p><p>通过使用权威照片和可建立信任关系的视觉效果来充分利用这种具有启发式的方法。</p><ol start="49"><li>群内偏差 Ingroup Bias</li></ol><p>群内偏差常被用来引导用户决策，它是指人们会在认知上倾向于自己所属的群体。在体验设计中利用群内偏差的关键点在于打造群体归属感，借由小群体的力量影响用户的决策。</p><p><strong>🔺 示例</strong> </p><p>比如 Booking 在查看评论的区域加入了筛选评论语言这一按钮，虽然设计的本意可能是为了方便用户更好地理解评论内容，但是在真实的使用过程中可以发现，用户更加信任自己所选标签内的评论内容，因为同语言往往意味着来自相同的国家或者相近的文化背景，用户通过这种方式找到一个小群体，然后被影响进而做出与群体内人们更为相似的决策。</p><p><img src="https://raw.githubusercontent.com/zhangandyu/picture/main/%E8%AE%A4%E7%9F%A5%E5%81%8F%E5%B7%AE/49.png"></p><ol start="50"><li>权威偏见 Authority Bias </li></ol><p>我们认为权威人士给出的建议准确性更高，并且更容易受到该建议的影响（即使事物主体与该人物的权威性无关）</p><p><strong>🔺 示例</strong> </p><p>通过宣传产品的知名推荐来建立权威:</p><ul><li><p>联系有影响力的人，让他们免费使用你的产品或服务</p></li><li><p>突出显示知名客户或品牌</p></li><li><p>展示来自社会名流的推荐语</p></li><li><p>在产品展示和陈述中使用权威人物（例如医生、教授等）</p></li></ul><p><img src="https://raw.githubusercontent.com/zhangandyu/picture/main/%E8%AE%A4%E7%9F%A5%E5%81%8F%E5%B7%AE/50.png"></p><ol start="51"><li>得寸进尺法 Foot-in-the-Door Technique</li></ol><p>得寸进尺法又译登门坎效应，是一种通过先提出一个简单的小请求来说服用户同意一个较大请求的劝说方法。</p><p><strong>🔺 示例</strong> </p><ul><li><p>通过提供免费试用与用户建立联系。</p></li><li><p>不要用过于复杂的引导流程让用户感到不耐烦。</p></li><li><p>把大块的内容分解成小块或容易解决的内容，让用户保持开心和参与度。</p></li></ul><p><img src="https://raw.githubusercontent.com/zhangandyu/picture/main/%E8%AE%A4%E7%9F%A5%E5%81%8F%E5%B7%AE/51.png"></p><h2 id="三、记忆错误与偏差"><a href="#三、记忆错误与偏差" class="headerlink" title="三、记忆错误与偏差"></a><strong>三、记忆错误与偏差</strong></h2><blockquote><p>🏹<strong>记忆错误与偏差</strong>在心理学和认知科学中，记忆偏差是一种认知偏差，导致记忆的强化、弱化（包括能否想起的机会、想起所需的时间，或两者皆有），或者记忆内容的改变。</p></blockquote><p><img src="https://raw.githubusercontent.com/zhangandyu/picture/main/%E8%AE%A4%E7%9F%A5%E5%81%8F%E5%B7%AE/c.png"></p><ol start="52"><li>谷歌效应 Google Effect</li></ol><p>我们会容易忘记可以在网上轻松找到的信息。</p><p><strong>🔺 示例</strong> </p><p>你还记得你最好的朋友或孩子的电话号码吗？</p><p><img src="https://raw.githubusercontent.com/zhangandyu/picture/main/%E8%AE%A4%E7%9F%A5%E5%81%8F%E5%B7%AE/52.png"></p><ol start="53"><li>幽默效应 Humor Effect</li></ol><p>当信息被认为是有趣或幽默时，我们会更好地记住信息。这可以帮助提高产品的转化率，并有助于整体业务的提升。</p><p><strong>🔺 示例</strong> </p><p>在用户可能感到沮丧的情况下不要幽默。例如，如果你的应用与旧设备不兼容，请不要用有趣的方式说出来，因为此时用户可能很沮丧，无法感知幽默。</p><ol start="54"><li>真相错觉效应 Illusion of Truth Effect</li></ol><p>重复的事情越多，我们就越相信。</p><p><strong>🔺 示例</strong> </p><p>在广告，网站，App Store页面，登录页，新闻通讯等一次又一次地重复你的消息（主要好处，主要区别）</p><ol start="55"><li>峰终法则 Peak-End Rule</li></ol><p>用户不仅仅根据平均或所有体验的总和来评估体验，取而代之的是，他们的大脑会严重地偏向峰值（高或低）和体验的终点，峰值如果是愉悦的话，通常对应了用户旅程中令人难忘的愉悦感。</p><p><strong>🔺 示例</strong> </p><p>通过使产品的最佳功能变得更好，保持产品的竞争优势并提高产品高峰。另外也不要忽视产品的“购买后”体验，确保以精湛的品味结束体验。</p><p><img src="https://raw.githubusercontent.com/zhangandyu/picture/main/%E8%AE%A4%E7%9F%A5%E5%81%8F%E5%B7%AE/55.png"></p><ol start="56"><li>图片优势效应  Picture Superiority Effect</li></ol><p>图片和图像比一千个单词更容易被记住。</p><p><strong>🔺 示例</strong> </p><p>始终在内容中包含图像，出色的视觉效果将提高转化率。</p><ol start="57"><li>首因效应 Primacy Effect</li></ol><p>又称近时效应、序位效应。列表开头和结尾的项目比中间的项目更容易被用户记住。</p><p><strong>🔺 示例</strong> </p><p>如果你打算展示一长串信息，请确保第一个是最重要的内容。</p><p><img src="https://raw.githubusercontent.com/zhangandyu/picture/main/%E8%AE%A4%E7%9F%A5%E5%81%8F%E5%B7%AE/57.png"></p><ol start="58"><li>雷斯多夫效应 Von Restorff Effect</li></ol><p>当很多信息一起呈现时，醒目的信息和被特别强调的信息会比其他信息更容易被人们记住。</p><p><strong>🔺 示例</strong> </p><p>确保CTA按钮以不同的样式，大小，颜色和位置显示出来，以达到不同的目的。</p><p><img src="https://raw.githubusercontent.com/zhangandyu/picture/main/%E8%AE%A4%E7%9F%A5%E5%81%8F%E5%B7%AE/58.png"></p><ol start="59"><li>蔡格尼效应 Zeigarnik Effect</li></ol><p>进行中的任务会产生特定于任务的张力。当任务完成时，这种压力可以缓解，但如果任务被中断，它将保持不变。这种张力使相关信息更易于访问和记忆。</p><p><strong>🔺 示例</strong> </p><p>显示一个不完整的进度栏，以鼓励用户实现自己的目标。</p><h2 id="四、统计与几率偏差"><a href="#四、统计与几率偏差" class="headerlink" title="四、统计与几率偏差"></a>四、<strong>统计与几率偏差</strong></h2><blockquote><p>📚<strong>统计与几率偏差</strong>几率性推论是指根据有关几率的资讯推论事情的可能性，而几率的估算通常来自统计资料，因此两者密不可分。</p></blockquote><p><img src="https://raw.githubusercontent.com/zhangandyu/picture/main/%E8%AE%A4%E7%9F%A5%E5%81%8F%E5%B7%AE/d.png"></p><ol start="60"><li>基本比率谬误 Base Rate fallacy</li></ol><p>我们倾向于忽略一般信息，而只关注特定案例。</p><p><strong>🔺 示例</strong> </p><p>不要只分享那些冷冰冰的产品信息。相反地，展示其他相关用户或公司的评价、用例。如果你想更具有说服力 —— 把你的量化数据和一些个人故事相结合。用量化数据合理地支持你的观点。具体的例子会在情感上传递你想表达的信息。</p><ol start="61"><li>赌徒谬误 Gambler’s Fallacy</li></ol><p>我们错误地认为，如果在给定时期内某件事情频繁发生，那么这件事情在将来发生的几率就会很小。</p><p><strong>🔺 示例</strong> </p><p>坚持事实，少依靠直觉，更多的依靠数据。</p><p><img src="https://raw.githubusercontent.com/zhangandyu/picture/main/%E8%AE%A4%E7%9F%A5%E5%81%8F%E5%B7%AE/61.png"></p><ol start="62"><li>热手谬误 Hot-Hand Fallacy</li></ol><p>错误地认为经历过成功的人更有可能在其他尝试中进一步获得成功。一般是在某人近来做某事很成功时，认为他未来做同一件事也会很成功，而忽略其成功可能只是随机与巧合导致。</p><p><strong>🔺 示例</strong> </p><p>通过强调一系列成功案例来建立自己的强大品牌。</p><p><img src="https://raw.githubusercontent.com/zhangandyu/picture/main/%E8%AE%A4%E7%9F%A5%E5%81%8F%E5%B7%AE/62.png"></p><ol start="63"><li>对样本数不敏锐 Insensitivity to Sample Size</li></ol><p>我们经常忽略样本大小并贸然下结论，即使样本数量还未达到足够的统计量。</p><p><strong>🔺 示例</strong> </p><p>与客户沟通很重要，但不要把产品设想建立在几次面谈的基础上。使用大量数据，并根据实际数据而非假设来做出产品决策。</p><h2 id="五、实验与研究偏差"><a href="#五、实验与研究偏差" class="headerlink" title="五、实验与研究偏差"></a><strong>五、实验与研究偏差</strong></h2><blockquote><p>🔬<strong>实验与研究偏差</strong>这是一些科学实验或统计研究容易发生的偏差。</p></blockquote><p><img src="https://raw.githubusercontent.com/zhangandyu/picture/main/%E8%AE%A4%E7%9F%A5%E5%81%8F%E5%B7%AE/e.png"></p><ol start="64"><li>取样偏差 Sampling Bias</li></ol><p>某些类型的用户被无意中从研究参与者池中剔除了。亦可理解为以偏概全，即以局部事例解释整体原因。</p><p><strong>🔺 示例</strong> </p><p>你正在设计自行车跟踪应用，需要对骑行者进行研究。你决定采访并观察北京市的自行车骑行者，但你没有意识到他们的骑行行为习惯可能与居住在山丘多的郊区的骑行者有很大不同。因此你的研究成果可能有不适用于所有目标受众的风险。</p><ol start="65"><li>观察者期望效应  Observer-Expectancy Effect</li></ol><p>研究者有时可能会期望出现某种结果，他们无意识地操纵了试验过程，或者错误地解释实验结果，导致研究结果严重歪曲。</p><p><strong>🔺 示例</strong> </p><p>在用户研究中，研究者的表情、肢体语言等都可能会反映出自己所期待的结果，如果用户察觉到了这些，就可能做一些迎合研究者期望的反应。</p><ol start="66"><li>社会期许偏差 Social Desirability Bias</li></ol><p>我们倾向于多表达符合社会期许的事情，而隐瞒那些不符合社会预期的事情。例如在询问是否有不良嗜好、性伴侣数量时，大家会有意无意地隐瞒或淡化实情。</p><p><strong>🔺 示例</strong> </p><p>社会证明是建立信任的好方法。以下是可在产品页面上使用的一些示例：</p><ul><li><p> 知名的客户logo</p></li><li><p>知名的合作伙伴logo</p></li><li><p>客户的好评和真实推荐（来自目标受众）</p></li><li><p>累计数据（客户数量，交易次数等任何有价值的数字）</p></li><li><p>媒体的提及和引用</p></li><li><p>由知名组织颁发的奖项认证</p></li><li><p>证书</p></li><li><p>真实数据支撑案例的链接</p></li></ul><p>不要说“我们很棒，因为……”，而是通过其他人来证实。</p><ol start="67"><li>遗漏变数偏差 Omitted-Variable Bias</li></ol><p>当获得的奖励出乎意料之外，我们获得奖励的喜悦感就会增加。</p><p><strong>🔺 示例</strong> </p><p>为用户提供每日优惠，免费奖金，奖章，奖品等。每天创建的“动作”越多，用户就越会感受到与产品的联系。</p><h2 id="六、50种生活中的认知偏差"><a href="#六、50种生活中的认知偏差" class="headerlink" title="六、50种生活中的认知偏差"></a>六、50种生活中的认知偏差</h2><p><img src="https://raw.githubusercontent.com/zhangandyu/picture/main/%E8%AE%A4%E7%9F%A5%E5%81%8F%E5%B7%AE/63.png"></p><p>  50种认知偏差</p><blockquote><p>意识到这样你才能成为最好的自己</p></blockquote><ol><li><p>基本归因错误</p><p>我们根据他人的个性或基本性格来定义别人，但会用情境因素帮自己开脱。</p><blockquote><p> 张三上课迟到了，肯定是他很懒。你上课迟到了，就是因为早上太忙乱了。</p></blockquote></li><li><p>自利偏见</p><p>我们的失败是由环境造成的，而成功是靠自己的努力。</p><blockquote><p>你获得那个奖是因为努力工作而不是靠别人的帮助和运气。但如果考试不及格，只是因为睡眠不足而已。</p></blockquote></li><li><p>组内偏爱</p><p>我们会更喜欢圈子内，而不是圈子外的人。</p><blockquote><p>小明跟你一个教堂，所以你喜欢他多过张三</p></blockquote></li><li><p>从众效应</p><p>随着越来越多的人接收到某些理念、时尚和信仰，这些理念的影响也会随之壮大。</p><blockquote><p>小明觉得指尖陀螺对孩子挺好，张三也这么觉得</p></blockquote></li><li><p>群体思维</p><p>人们更希望与团体能保持一致与和谐，为了尽量减少冲突，我们偶尔会做一些不合理的决定。</p><blockquote><p>小明想买冰淇淋，张三想买T恤，所以你最终建议买印有冰淇淋图案的T恤。</p></blockquote></li><li><p>光环效应</p><p>如果你认为一个人有积极的品质，这种积极的印象会辐射到那个人的其他特质当中。(这也适用于负面性格)</p><blockquote><p>泰勒太可爱了，她肯定不可能是个刻薄的人     </p></blockquote></li><li><p>道德运气</p><p>一个更好的结果会提高人们对其道德的评价，反之亦然。</p><blockquote><p>某文化赢得了xx之争，是因为他们比输掉的人更有德行。</p></blockquote></li><li><p>错误共识</p><p>现实中支持我们观点的人，要比我们想象中的少。</p><blockquote><p>所有人都这么想</p></blockquote></li><li><p>知识的诅咒</p><p>一旦我们知道了某件事，就很容易假设其他人也同样知道这件事。</p><blockquote><p>张三是一名教师，她很难理解新同学们看事情的角度。</p></blockquote></li><li><p>聚光灯效应</p><p>我们会高估人们对我们的行为和外表的关注程度</p><blockquote><p>小美很担心大家会注意到她的冰淇淋T恤有多丑</p></blockquote></li><li><p>可用性启发式</p><p>我们在做判断时，通常都依赖于脑海中出现的最直观的例子。</p><blockquote><p>选择商店时，你通常会选择最近看到过广告的那家。</p></blockquote></li><li><p>防御性归因</p><p>一件事故中，目击者会隐秘的担心自己也收到同样的指责，如果目击者与受害者的经历更相似，他们就会更少的责怪受害者，转而去攻击加害者。反之亦然。</p><blockquote><p>张三等绿灯时一直在车里玩手机，结果被追尾了。目击事故的小明也有开车发短信的习惯。所以他下了车，对撞了张三的人大吼大叫。</p></blockquote></li><li><p>世界公正假设</p><p>人们倾向于相信世界是公正的；因此我们会认为出现不公正的事是有原因的。</p><blockquote><p>”张三的钱包被偷了，看他总因为T恤的事批评小美，遭报应了吧。“</p></blockquote></li><li><p>朴素现实主义</p><p>我们习惯相信自己观察到的是客观事实，而其他人是不理性，不知情的或者有偏见的。</p><blockquote><p>“我看到了这个世界的真面目，其他人都很蠢”</p></blockquote></li><li><p>朴素犬儒主义</p><p>相信自己观察到的是客观事实，而其他人比他们表现出来的还要更加以自我为中心。</p><blockquote><p>“这人对我好的唯一原因，肯定是想从我这得到点什么。”</p></blockquote></li><li><p>福勒效应（又名巴纳姆效应）</p><p>我们很容易接受一些含混不清，用途广泛的词来形容自己的性格。</p><blockquote><p>“这个星座指南真的太准了”</p></blockquote></li><li><p>邓宁.克鲁格效应</p><p>你知道的越少就越自信，知道的越多就越谦虚</p><blockquote><p>张三自信地向大家保证，冰淇淋里绝对没有海带。海带也没有被勇于乳制品行业。</p></blockquote></li><li><p>锚定效应</p><p>我们做决定时非常依赖第一眼信息。</p><blockquote><p>“这东西写着打五折？那肯定老便宜了”</p></blockquote></li><li><p>自动化系统偏差</p><p>我们很依赖自动化系统，甚至有时候会过于相信，导致真正正确的决策被修改了。</p><blockquote><p>你的手机会自动把 ”its” 改为 “it’s”，所以你会以为这是正确的用法</p></blockquote></li><li><p>谷歌效应（数码健忘症）</p><p>我们经常会忘记在搜索引擎中很容易找到的信息。</p><blockquote><p>“那个喜剧片里的演员叫啥来着？？我都查了8次了”</p></blockquote></li><li><p>阻抗理论</p><p>自由受到限制时，我们很产生不快，所以会做出一些被禁止的行为来释放情绪。</p><blockquote><p>l老师和家长越让孩子去做作业，他越是不肯去。</p></blockquote></li><li><p>确认偏差</p><p>我们倾向于找到并记住能证实我们想法的信息。</p><blockquote><p>用不完整的证据得出一个阴谋论，却忽略那些反例</p></blockquote></li><li><p>逆火效应</p><p>当一个错误的信息被更正时，如果更正的信息与人原本的看法不符，反而会无端加深人们对错误信息的信任。</p><blockquote><p>推翻你阴谋论的证据，很可能是政府伪造的。</p></blockquote></li><li><p>第三人效应</p><p>我们很认为别人比自己更受到大众媒体的影响。</p><blockquote><p>“你显然是被媒体洗脑了。”</p></blockquote></li><li><p>信念偏差</p><p>当我们判断一个观点是否可信时，凭借的不是这个观点是否正确，而是我们愿不愿意相信这个观点。</p><blockquote><p>“小美说她也支持你那个阴谋论。但她没说出什么证据来”</p></blockquote></li><li><p>可用性级联</p><p>某些事情越是被公开和重复讨论，为了融入社会，我们就越会相信这件事的真实性。</p><blockquote><p>一个糖果里藏了刀片的故事广为流传，最终许多美国人不再 在万圣节提供自制糖果。</p></blockquote></li><li><p>衰落主义</p><p>我们会更倾向于将过去浪漫化，并消极地看待未来，认为全世界都在走下坡路。</p><blockquote><p>“在我们那个时代，孩子更懂得尊重”</p></blockquote></li><li><p>现状偏见</p><p>更倾向于保持不变，认为即使是有利的变化也是一种损失。</p><blockquote><p>即使一个APP的服务条款侵犯了小美的隐私，她也不愿意换另一个程序。</p></blockquote></li><li><p>沉默成本谬误（承诺升级）</p><p>即使面临着负面的结果。人们也不愿意放弃前期的投入，反而会在这些注定失败的事情上投入更多。</p><blockquote><p>“来都来了，一不做二不休。”</p></blockquote></li><li><p>赌徒谬误</p><p>认为未来的可能性会收到过去事件的影响。</p><blockquote><p>张三猜硬币已经输了9次，下次一定能猜中。</p></blockquote></li><li><p>零风险偏差</p><p>人们会追求让小风险趋于零，却不会通过某种方式降低大风险的概率。</p><blockquote><p>“疫情来了，多囤点厕纸”</p></blockquote></li><li><p>框架效应</p><p>人们经常从相同的信息中得出不同的结论，这取决于信息呈现的方式。</p><blockquote><p>小美听说最喜欢的候选人以45%的支持率”大获全胜”‘；张三听说候选人的支持率45%”让全国失望“；他们对相同的统计数据有不同的解释。</p></blockquote></li><li><p>刻板印象</p><p>人们普通认为，尽管没有具体的个人信息，但一个群体的成员肯定有某种相同的特征。</p><blockquote><p>那个留着小胡子的人肯定是个嬉皮士，估计还收集了一些黑胶唱片</p></blockquote></li><li><p>外群体同质性偏差</p><p>人们会认为圈外人千篇一律，而自己圈子里的人各个不同。</p><blockquote><p>小美不打游戏，但她觉得玩游戏的人都一样。</p></blockquote></li><li><p>权威偏见</p><p>我们信任权威人物的意见，并经常受其影响。</p><blockquote><p>“我老师告诉我可以这么做”</p></blockquote></li><li><p>安慰剂效应</p><p>当我们相信某种（原本无效的）治疗会奏效，它通常就会产生一点点生理上的效应。</p><blockquote><p>小美服用了一种安慰剂来止痛，结果疼痛真的减轻了。</p></blockquote></li><li><p>幸存者偏差</p><p>人们更倾向于关注那些幸存下来的事物，而忽略那些失败了的。</p><blockquote><p>小美告诉小红，她的包包生意肯定很好，因为有一家成功的时尚公司运用了同样的策略。（但其实其他10家倒闭的公司也用了同样的策略）</p></blockquote></li><li><p>精神活动过速</p><p>我们对时间的感知取决于创伤、药物使用和体力消耗。</p><blockquote><p>当汽车差点撞到我的时候，时间都慢了下来…</p></blockquote></li><li><p>琐碎法则（自行车棚效应）</p><p>人们通常对琐碎的问题给予不成比例的重视，同时又避免面对更复杂的问题。</p><blockquote><p>当地政府没有考虑如何解决流浪人口问题，而是花了大量时间讨论修建自行车道和车棚的问题。</p></blockquote></li><li><p>蔡格尼可记忆效应</p><p>比起已经完成的任务，人们更容易记住未完成的任务。</p><blockquote><p>小张因得自己什么事都没做而感到很沮丧，知道他看了自己的任务清单上已经划掉了很多项。</p></blockquote></li><li><p>宜家效应</p><p>人们很更看重自己参与了一部分创造过程的东西。</p><blockquote><p>“你喜欢我花了20块钱买的这个盆吗？我自己上色。”</p></blockquote></li><li><p>本.富兰克林效应</p><p>人们喜欢帮助别人。如果我们已经帮了别人一个忙之后，我们很更期待去帮他另一个忙，而不是从他那得到一个回馈。</p><blockquote><p>小明给小张借了一支钢笔，当小张又向小明借5块钱时，小明很爽快就借了。</p></blockquote></li><li><p>旁观者效应</p><p>周围人越多，我们帮助受害者的可能性就越小。</p><blockquote><p>一群学生看到有人打架受伤，没有人报警。</p></blockquote></li><li><p>暗示感受性</p><p>我们，尤其是儿童，有时候会将提问者的想法误以为是记忆。</p><blockquote><p>“你从沙发上摔下来是在你妈妈打你之前还是之后？”（此处为陷阱式提问，很可能妈妈并没有打孩子，但孩子的回答极容易被误导。</p></blockquote></li><li><p>虚假记忆</p><p>我们会把想象误以为是真实的记忆。</p><blockquote><p>小美确定小明说了一个关于菠萝的笑话，但这个笑话其实是他自己在电视里看到的。</p></blockquote></li><li><p>潜隐记忆</p><p>我们也会吧真实的记忆误以为是想象。</p><blockquote><p>小张以为他去了墓地，但他确定自己只是做了个很可怕的梦。</p></blockquote></li><li><p>聚类错觉</p><p>我们会在原本随机的数据信息中发现模式和规律。</p><blockquote><p>“你看那朵云彩好像你的猫啊。”</p></blockquote></li><li><p>悲观偏见</p><p>我们有时候会高估坏结果的概率。</p><blockquote><p>“水只剩半杯了，啥都不会变好了。”</p></blockquote></li><li><p>乐观偏见</p><p>我们有时候会对好结果过于乐观。</p><blockquote><p>“水还有半杯呢，一切都会好起来的。”</p></blockquote></li><li><p>偏见盲点</p><p>人们不认为自己有偏见，还会觉得别人比我们自己更偏激。</p><blockquote><p>“我没有偏见。”</p></blockquote></li></ol>]]></content>
      
      
      <categories>
          
          <category> 认知 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 认知 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据分析中必须掌握的数学基础</title>
      <link href="/2021/11/24/2021-12-14-%E6%8A%80%E8%83%BD-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/"/>
      <url>/2021/11/24/2021-12-14-%E6%8A%80%E8%83%BD-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h3 id="平均值（辛普森悖论）"><a href="#平均值（辛普森悖论）" class="headerlink" title="平均值（辛普森悖论）"></a>平均值（辛普森悖论）</h3><p>算数平均值容易存在的两大坑：</p><ol><li><p><strong>被平均</strong> （三个数0、1、20的平均值为7，平均值容易受极大值的影响）</p></li><li><p><strong>辛普森悖论</strong>（在分组中占优势，但是在总体平均值中占劣势）</p><img src="https://github.com/zhangandyu/picture/blob/main/%E6%96%87%E7%AB%A0%E5%9B%BE%E7%89%87/4.png?raw=true" alt="分别投球表现：B 好于 A" style="zoom:50%;"><img src="https://github.com/zhangandyu/picture/blob/main/%E6%96%87%E7%AB%A0%E5%9B%BE%E7%89%87/5.png?raw=true" alt="整体投球表现：A 好于 B" style="zoom:50%;"></li></ol><p>​      比如：游戏公司做了个游戏，有 Android 和 IOS 系统，每个系统都有手机和 Pad 版本。从数据上看 Android 整体付费率比较高，那能直接说明应大力发展Android 系统吗？</p><p>​     实际上这种结论有可能是错误的，还有种情况是 Android 的 Pad 和手机的付费率都比 IOS 低，但是整体上因为 Android 手机（只是手机用户）的用户比较多，导致整体付费率高于 IOS 。</p><blockquote><p>遇到整体平均值高的情况，我们也需要进行更细维度的对比，才能得出正确的结论。</p></blockquote><p>辛普森悖论：</p><iframe width="560" height="315" src="https://www.youtube.com/embed/sxYrzzy3cq8" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe><iframe width="560" height="315" src="https://www.youtube.com/embed/Ljvlby3yZFQ" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe><h3 id="大数定理与小数陷阱（赌徒谬误）"><a href="#大数定理与小数陷阱（赌徒谬误）" class="headerlink" title="大数定理与小数陷阱（赌徒谬误）"></a>大数定理与小数陷阱（赌徒谬误）</h3><p><strong>大数定理</strong>：当随机事件发生的次数足够多时，发生的频率才会趋近于预期的概率。</p><blockquote><p>这个大数要求的是非常大的，赌场一般就利用大数定理来赚钱。</p></blockquote><iframe width="560" height="315" src="https://www.youtube.com/embed/x3yToesPtzo" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe><p><strong>小数陷阱</strong>：如果摇骰子前面开的都是“大”，那我们接下来是不是应该向“小”去加倍下注。因为从大数定律上看，长期出现“大”和“小”的概率应该是趋于一致的，所以未来出现“小”的概率应该增大。其实是错误的，因为从大数定律来看，我们实验的次数太小了。</p><iframe width="560" height="315" src="https://www.youtube.com/embed/yoOocF47BRI" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe><blockquote><ul><li><p>大数定律说的是当随机事件发生的次数足够多时，发生的频率就趋近于预期的概率。对于一件事情，你需要持续不断努力，才可以达到你的期望值。</p></li><li><p>“小数陷阱”则告诉你，每个事件都是独立的事件，“否极泰来”需要足够多的次数才可能出现，做事情要少一些“赌徒心态”，多一些平常心，不要盲目跟风和下注才能获得最后的成功。</p></li></ul></blockquote><h4 id="如何建立自己的“大数据定律”来规避“小数陷阱”"><a href="#如何建立自己的“大数据定律”来规避“小数陷阱”" class="headerlink" title="如何建立自己的“大数据定律”来规避“小数陷阱”"></a>如何建立自己的“大数据定律”来规避“小数陷阱”</h4><p>多利用前人的经验，站在前人实验的结果和规律上，多去学习、阅读，多去经历、总结自己想从事的事业。相信绝大多数人是做不到在赌博中拥有足够大的“大数”，但是没关系，你可以根据自己的生活去建立属于自己的“大数定律”，赋予偶然的生活必然性。</p><p>任何时刻都不要放弃自己的追求，人生只有努力才是向上的，这才是你一生的“大数定律”。要慎始敬终，“慎始”指的是要想清楚，有没有持续投入的准备，没有想清楚就不要开始。“敬终”指的是，一旦做了，持续投入，从头到尾踏踏实实落实。</p><h3 id="数学期望值（墨菲定律）"><a href="#数学期望值（墨菲定律）" class="headerlink" title="数学期望值（墨菲定律）"></a>数学期望值（墨菲定律）</h3><p>期望就是反映在大数定律下多次执行某件事情之后，得到的一个最可能的收益结果。</p><p>墨菲定律：如果有一件坏事可能发生，无论发生的可能性有多小， 也一定会发生。</p><blockquote><p>背后其实是我们对好事情和坏事情的期望值造成的差异。我们对事情的期望值=心理影响 * 事件的概率  </p><img src="https://github.com/zhangandyu/picture/blob/main/%E6%96%87%E7%AB%A0%E5%9B%BE%E7%89%87/6.png?raw=true" style="zoom: 33%;"></blockquote><iframe width="560" height="315" src="https://www.youtube.com/embed/tVBwxHQKO14" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe><h4 id="如何规避墨菲定律"><a href="#如何规避墨菲定律" class="headerlink" title="如何规避墨菲定律"></a>如何规避墨菲定律</h4><p>为大概率坚持，为小概率备份。</p><p>对平均值来说，要学会为不同事物去分组，用更细分的数据来看待问题。对于大数定律来说，要成事，其实需要我们不要有赌徒心态，要学会持续投入。而对于期望值来说，要学会平衡预期和未雨绸缪。</p><h3 id="随机对照（幸存者偏差）"><a href="#随机对照（幸存者偏差）" class="headerlink" title="随机对照（幸存者偏差）"></a>随机对照（幸存者偏差）</h3><h4 id="幸存者偏差"><a href="#幸存者偏差" class="headerlink" title="幸存者偏差"></a>幸存者偏差</h4><blockquote><p>当取的信息的渠道仅来自幸存者时，我们得出的结论可能会与实际情况存在偏差。因为这样做看上去结果的确是由随机对照试验产生，但在逻辑上是错误的，这其实是在用结果来倒推整个前期数据的产生过程。</p></blockquote><h4 id="随机对照试验"><a href="#随机对照试验" class="headerlink" title="随机对照试验"></a>随机对照试验</h4><blockquote><p>解决的问题：当我们不知道客观世界里一个问题的真正答案的时候，可以通过少量的数据来验证非常大的数据规律。</p></blockquote><iframe width="560" height="315" src="https://www.youtube.com/embed/AbMTG8bzVfY" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe><h3 id="幂律分布与帕累托法则"><a href="#幂律分布与帕累托法则" class="headerlink" title="幂律分布与帕累托法则"></a>幂律分布与帕累托法则</h3><p>幂率分布也叫做指数分布</p><p><img src="https://raw.githubusercontent.com/zhangandyu/picture/main/%E6%96%87%E7%AB%A0%E5%9B%BE%E7%89%87/7.png"></p><iframe width="560" height="315" src="https://www.youtube.com/embed/cRVUckjWZTU" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe><p>在日常生活里，不要把所有事都放在同一个优先级上，而是学会用帕累托法则去看待问题，找出最重要的 20% 的问题，并最优先解决。同时，你也要留个心眼：为什么这 20% 的问题对你来说最为重要？</p><p>对应到工作中，你可以多想想以下几个问题。</p><ul><li>在你一天的工作分配当中，由于 80% 的工作都是日常反馈，你是否安排了自己最清醒的时间去处理最重要的 20% 工作？</li><li>你所在的公司，是不是由 20% 的客户来为公司提供了 80% 的利润，如果是，应该如何留住这些客户？</li><li>在团队里，杰出贡献是 20% 的人做的，80% 的人是配合，那么针对这 20% 的人，你应该如何留住他们？</li><li>能否通过弥补 20% 的质量缺口去获得 80% 的收益（或者避免 80% 的客户投诉）？</li><li>在最有效的 20% 的时间内，如何引导团队做出 80% 的相关分析？</li><li>最后再来说说我们个人的发展。为什么有的人一开始和普通人差不多，但是他们后来渐渐地把同龄人甩在了身后？有的人可能会觉得是因为这些人运气好，运气也是实力的一部分，但毕竟“幸运只光顾有准备的人”。你比其他人更努力，每天多积累 1% 哪怕是 0.1% 的优势，这样把优势不断积累下去，你就会占据越来越多的资源，成为这个领域里面的专家。</li></ul><h3 id="正态分布（高斯分布）"><a href="#正态分布（高斯分布）" class="headerlink" title="正态分布（高斯分布）"></a>正态分布（高斯分布）</h3><p><img src="https://raw.githubusercontent.com/zhangandyu/picture/main/%E6%96%87%E7%AB%A0%E5%9B%BE%E7%89%87/8.png"></p><p><img src="https://raw.githubusercontent.com/zhangandyu/picture/main/%E6%96%87%E7%AB%A0%E5%9B%BE%E7%89%87/12.png"></p><p>应用实例：</p><p><strong>领导说要访谈调研下用户整体对你的产品的反馈， 那么需要调研多少用户，才能达到95%的准确率呢?</strong></p><p>计算思路：</p><ul><li>由于我们选择的身高、A/B 测试、用户反馈都是随机分布的（符合正态分布），所以我们可以用正态分布来进行推算；</li><li>领导说要 95% 正确率，其实就是说正态分布钟型曲线中间这个中段要 95%，在计算的时候其实我们可以转换下思路，95% 的正确率也就是指误差在 5% 以内。</li><li>紧接着我们套用附录公式，去查正态分布表进行计算后就可以得出结论。</li></ul><p>计算公式：</p><p><img src="https://raw.githubusercontent.com/zhangandyu/picture/main/%E6%96%87%E7%AB%A0%E5%9B%BE%E7%89%87/11.webp"></p><p>在比如：<strong>我们要根据某一个数据进行运营估计的时候，也可以用到正态分布。</strong></p><p>比如我们现在要根据极客时间用户每天收听音频的平均时长来打造一个用户等级，那这种用户等级分布和所需要的福利金额费用大概是什么样子呢？其实只要我们算出来极客时间的每一个用户的日均平均时长（就是所谓的总体均值），再根据误差范围设定标准差，就可以根据随机抽样和中心极限定理，得出来每个不同等级的用户的数量。这样，我们做积分的估算补贴和使用的时候，心里就有数了。</p><p>​       </p><iframe width="560" height="315" src="https://www.youtube.com/embed/QMAaxvJlSck" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe><p>拉普拉斯分布</p><p><img src="https://raw.githubusercontent.com/zhangandyu/picture/main/%E6%96%87%E7%AB%A0%E5%9B%BE%E7%89%87/9.png"></p><p>怎样去理解这个拉普拉斯分布呢？它经常用在金融领域，尤其是衡量股票收益的时候。起初我们认为股票收益率是服从正态分布，但是由于股票价格波动与时间变化有关，有波动聚集性，最后实际股票的收益率都是符合拉普拉斯分布的，也就是赚大钱的日子其实特别集中，余下的都是赚小钱的日子。</p><p>全国的城市房价分布、一个城市当中的小区房价分布现在也是符合拉普拉斯分布的。因为在信息透明和市场竞争的情况下，工资、房价、股票都会符合一个特点：越塔尖的个体越具有资源吸附能力。</p><p>所以当你在做数据分析的时候，一定得先考虑一下，原有的数据分布模型是否还适用于现有的市场情况？</p><h3 id="标准差与标准误差"><a href="#标准差与标准误差" class="headerlink" title="标准差与标准误差:"></a>标准差与标准误差:</h3><p>标准差：代表一组数值和平均值相比分散开来的程度。标准差是针对具体实例的描述性统计</p><blockquote><p>标准差（Standard deviation）= 一次统计中个体分数间的离散程度，反映了个体对样本整体均值的代表性，用于描述统计。</p></blockquote><p>离散系数 CV：用标准差除以平均值（离散系数 = 标准差 / 平均值），这样的话就规避了单位或者其他因素的这些差异。我们直接看离散系数这个数据，就能知道这几组数据之间的离散程度和差异是什么样的。</p><p>标准误差：标准误差代表一种推论的估计</p><blockquote><p>标准误差（Standard error）= 多次抽样中样本均值间的离散程度，反映了样本均值对总体均值的代表性，用于推论统计。</p><p>一个标准误差范围里，大概就是图里面的 68.3%；</p><p>两个标准误差范围里也就是距离均值（标准件）的 95.4%；</p><p>三个标准误差就是 99.7%；</p><p>6 个标准误差99.99966% </p></blockquote><img src="https://raw.githubusercontent.com/zhangandyu/picture/main/%E6%96%87%E7%AB%A0%E5%9B%BE%E7%89%87/15.webp" style="zoom:50%;"><h3 id="数据抽样"><a href="#数据抽样" class="headerlink" title="数据抽样"></a>数据抽样</h3><h4 id="小数据下进行抽样"><a href="#小数据下进行抽样" class="headerlink" title="小数据下进行抽样"></a>小数据下进行抽样</h4><p>简单随机抽样：简单随机抽样就是从总体 N 个单位中随机地抽取 m 个单位作为样本，使得每一个样本被抽中的概率相同。</p><p>系统抽样：依据一定的抽样距离，从整体中抽取样本。</p><p>分层抽样：将抽样单位按某种特征或某种规则划分为不同的层，然后从不同的层中独立、随机地抽取样本，从而保证样本的结构接近于总体的结构，提高估计的精度。</p><p>整群抽样：将总体中若干个单位合并为组（这样的组被称为群），抽样时直接抽取群，然后对所选群中的所有单位实施调查。</p><h4 id="大数据下进行抽样"><a href="#大数据下进行抽样" class="headerlink" title="大数据下进行抽样"></a>大数据下进行抽样</h4><p>蓄水池算法：给你一个长度很大或者长度大小未知的数据（流），并且你只能访问一次该数据（流）的数据。请写出一个随机选择算法，使得选中数据流中每个数据的概率都相等</p><p>过采样：过采样就是在一个池子里反复去抽样，本来应该抽样 10 个人，我们把这 10 个人反复抽样，变成 50 个人。</p><p>欠采样：欠采样就是在一个池子里本来我们应该抽样 100 个人，现在只抽样 10 个人。</p><h3 id="指数："><a href="#指数：" class="headerlink" title="指数："></a>指数：</h3><h4 id="用户忠诚度指数"><a href="#用户忠诚度指数" class="headerlink" title="用户忠诚度指数"></a>用户忠诚度指数</h4><p>用来衡量用户做某种行为的忠诚度。比如留存率</p><h3 id="常见的因果谬误"><a href="#常见的因果谬误" class="headerlink" title="常见的因果谬误"></a>常见的因果谬误</h3><img src="https://raw.githubusercontent.com/zhangandyu/picture/main/%E6%96%87%E7%AB%A0%E5%9B%BE%E7%89%87/16.webp" style="zoom: 33%;"><p>参考资料：<a href="http://www.huaxiaozhuan.com/">http://www.huaxiaozhuan.com/</a></p>]]></content>
      
      
      <categories>
          
          <category> 数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tableau学习教程</title>
      <link href="/2021/11/14/2021-11-14-Tableau%E5%AD%A6%E4%B9%A0%E8%A7%86%E9%A2%91-6/"/>
      <url>/2021/11/14/2021-11-14-Tableau%E5%AD%A6%E4%B9%A0%E8%A7%86%E9%A2%91-6/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Tableau是一种数据可视化工具或商业智能工具，可以快速分析和显示图表或报表中的数据。 它非常易于使用，为熟练掌握Tableau技能，方便自己后面快速复习，自己准备将操作过程录制成视频，以教为学。</p><h1 id="Tableau与Power-Bi-功能比较"><a href="#Tableau与Power-Bi-功能比较" class="headerlink" title="Tableau与Power Bi 功能比较"></a>Tableau与Power Bi 功能比较</h1><table><thead><tr><th>比较项</th><th>Tableau</th><th>Power BI</th></tr></thead><tbody><tr><td>含义/定义</td><td>Tableau是用于生成具有高度灵活性的报表和数据可视化工具的数据分析和商业智能工具。</td><td>Power BI是一种业务分析工具，用于分析业务并从中获取洞察力。</td></tr><tr><td>诞生年份</td><td>Tableau成立于2003年。</td><td>Power BI成立于2013年</td></tr><tr><td>成本/费用</td><td>Tableau在大型企业中更昂贵，并且在连接到第三方应用程序时支付更多费用。</td><td>与Tableau相比，Power BI的成本更低。</td></tr><tr><td>数据可视化</td><td>在数据可视化方面，Tableau是更受欢迎的工具。</td><td>Power BI专注于预测建模和报告。</td></tr><tr><td>数据源</td><td>Tableau可以访问许多数据库源和服务器。</td><td>例如：文本文件，Excel，JSON文件，Access，PDF文件，统计文件，空间文件等。</td></tr><tr><td>部署</td><td>Tableau具有更灵活的部署。</td><td>它可以在本地使用，也可以使用两种模型选项。</td></tr><tr><td>用户界面</td><td>Tableau具有灵活的用户界面，使用户可以创建自定义仪表板。</td><td>Power BI具有更易理解的界面，更易于学习。</td></tr><tr><td>数据容量</td><td>Tableau适用于基于列的结构，该结构为每列存储唯一值，从而可以存取数百万行。</td><td>Power BI最多可处理10 GB的数据。</td></tr><tr><td>机器学习</td><td>Tableau中机器学习能力是使用Python构建的，这使得它有效地在数据集上执行机器学习操作。</td><td>Power BI与Microsoft Azure集成，有助于分析数据并了解业务模式。</td></tr><tr><td>用户</td><td>Tableau要求分析用户进行分析。</td><td>Power BI需要技术和非技术用户。</td></tr><tr><td>整体功能</td><td>Tableau具有出色的功能。</td><td>Power BI具有良好的功能。</td></tr><tr><td>编程工具支持</td><td>与Power BI相比，Tableau与R语言集成得更好。</td><td>Power BI还使用Microsoft重估分析连接到R语言。</td></tr></tbody></table><h1 id="用Tableau制作地图可视化"><a href="#用Tableau制作地图可视化" class="headerlink" title="用Tableau制作地图可视化"></a>用Tableau制作地图可视化</h1><h2 id="Youtube"><a href="#Youtube" class="headerlink" title="Youtube"></a>Youtube</h2><iframe width="560" height="315" src="https://www.youtube.com/embed/60lnWRU6YM4" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe>]]></content>
      
      
      <categories>
          
          <category> Tableau </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tableau </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客搭建及主题选择教程</title>
      <link href="/2021/11/14/2021-11-14-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA-%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2-1/"/>
      <url>/2021/11/14/2021-11-14-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA-%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2-1/</url>
      
        <content type="html"><![CDATA[<blockquote><p>正所谓前人栽树，后人乘凉。</p><p>感谢<a href="https://github.com/blinkfox/hexo-theme-matery/commits?author=blinkfox">blinkfox</a>提供的<a href="https://github.com/blinkfox/hexo-theme-matery.git">博客模板</a></p><p>为方便自己复习，教程教程转载于：[如何用Hexo+Github Pages快速搭建自己的博客]<a href="https://segmentfault.com/a/1190000023346633">https://segmentfault.com/a/1190000023346633</a></p></blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>从 搭建博客之初，自己在换电脑工作的过程中多次丢失博客内容，特此写文章记录下博客搭建及模板配置教程，方便自己复习。 </p><p>废话不多说了，开始进入正文。</p><h1 id="搭建博客"><a href="#搭建博客" class="headerlink" title="搭建博客"></a>搭建博客</h1><h2 id="初始化博客"><a href="#初始化博客" class="headerlink" title="初始化博客"></a>初始化博客</h2><p>首先自己选个地方，创建一个文件夹，来装我们博客的主体。<br>比如F:Projectsblog，文件夹下右键鼠标，点击Git Bash Here，进入Git命令框，执行以下操作。</p><p><img src="https://raw.githubusercontent.com/zhangandyu/zhangandyu.github.io/main/medias/images/1.png"></p><p>这时候，再bush中输入</p><pre class="line-numbers language-none"><code class="language-none">hexo s<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/zhangandyu/zhangandyu.github.io/main/medias/images/2.png"></p><p>直接网页搜索localhost:4000，你的博客雏形就出来了。这TM才叫功夫不负有心人。</p><p><img src="https://raw.githubusercontent.com/zhangandyu/zhangandyu.github.io/main/medias/images/3.png"></p><h2 id="github的使用"><a href="#github的使用" class="headerlink" title="github的使用"></a>github的使用</h2><p><strong>敲黑板！！！重点来了！！！</strong><br>部署博客到GIthub - Pages，文章开头不是说了吗，如果你了解git那么，这部分，你可以略过，小白们还是来学下。</p><p>首先，注册个github账号吧，总不可能，用别人东西，还不给别人增加流量吧，拒绝白嫖，嘻嘻嘻，<strong>搭建好点赞你懂得</strong>！！！！</p><p>进入正题，其实不要把github想的很难，主要是英文把你难着了吧，哈哈哈，如果英语差可以谷歌浏览器翻译。</p><p>github其实就是个托管代码的，我们在这上面建库，然后把代码push上来，当然我们的博客不用push上来，后面讲解原理。</p><p><img src="https://raw.githubusercontent.com/zhangandyu/zhangandyu.github.io/main/medias/images/4.png"></p><p id="Rename"></p><h2 id="配置SSH钥匙："><a href="#配置SSH钥匙：" class="headerlink" title="配置SSH钥匙："></a>配置SSH钥匙：</h2><p>SSH是个协议，就像HTTPS一样，保证安全的。<br>我们要把项目托管上去，github需要知道一把钥匙，这是公钥，我们自己有一把钥匙，叫私钥。<br>下面配置：<br><strong>1.创建钥匙</strong></p><pre class="line-numbers language-none"><code class="language-none"> $ ssh-keygen -t rsa -C "your_email@example.com"#这将按照你提供的邮箱地址，创建一对密钥Generating public/private rsa key pair.Enter file in which to save the key (/c/Users/you/.ssh/id_rsa): [Press enter]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>直接回车</p><pre class="line-numbers language-none"><code class="language-none">Enter passphrase (empty for no passphrase): [Type a passphrase]Enter same passphrase again: [Type passphrase again]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">Your identification has been saved in /c/Users/you/.ssh/id_rsa.Your public key has been saved in /c/Users/you/.ssh/id_rsa.pub.The key fingerprint is:01:0f:f4:3b:ca:85:d6:17:a1:7d:f0:68:9d:f0:a2:db your_email@example.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>然后钥匙的位置在用户文件下，叫做 <strong>.ssh</strong>,有个后缀是pub的，这个就是公钥，私钥是另一把，把公钥的内容复制下来，到github，点你的头像，有个setting，设置里去配置公钥。</p><p><img src="https://i.loli.net/2021/11/14/Ql45fsRmcpYiBGh.png" alt="image-20211114013115263.png"></p><p><img src="https://raw.githubusercontent.com/zhangandyu/zhangandyu.github.io/main/medias/images/5.png"></p><p>好了配置好公钥了，下面检查一下</p><pre class="line-numbers language-none"><code class="language-none">$ ssh -T git@github.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">The authenticity of host 'github.com (207.97.227.239)' can't be established.RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.Are you sure you want to continue connecting (yes/no)?<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>输入yes就好了，下面就要设置用户信息了</p><pre class="line-numbers language-none"><code class="language-none">$ git config --global user.name "github名字"//用户名$ git config --global user.email  "github注册的邮箱"//填写自己的邮箱<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>下面点击的你新建的仓库，有个：</p><p><img src="https://raw.githubusercontent.com/zhangandyu/zhangandyu.github.io/main/medias/images/6.png"></p><p>复制你的项目地址，到Hexo的配置文件里：就是</p><p><img src="https://raw.githubusercontent.com/zhangandyu/zhangandyu.github.io/main/medias/images/7.png"></p><p>找到deploy（部署），开始只有个type的，加上我写的，只用改repository就行了，branch不用改：</p><pre class="line-numbers language-none"><code class="language-none">deploy:  type: git  repository: git@github.com:chenQD123/chenQD-blog.git  branch: master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>避坑1</strong>：repository必须按照上面方式来写，不能写成<code>https</code>开头，否则会需输入账号密码。</p><p><strong>避坑2</strong>：就是冒号后面有个空格，这是规定，如果没写空格，后面会部署失败，这就像python一样。</p></blockquote><p>然后就是美汁汁的部署你的博客到github上。</p><h2 id="部署："><a href="#部署：" class="headerlink" title="部署："></a>部署：</h2><pre class="line-numbers language-none"><code class="language-none">hexo ghexo d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>避坑</strong></p><pre class="line-numbers language-none"><code class="language-none">hexo d 出现以下错误：Branch 'master' set up to track remote branch 'main' from 'git@github.com:zhangandyu/zhangandyu.github.io.git'.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2021/11/14/BiSE8NTOjmpQoLg.png" alt="4.png"></p><p>则需要的以下两个设置之一进行修改：</p><ul><li>先 hexo clean</li></ul><blockquote><pre class="line-numbers language-none"><code class="language-none">deploy:type: gitrepository: git@github.com:chenQD123/chenQD-blog.gitbranch: master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></blockquote><blockquote><p>hexo 默认分支为master， github仓库默认分支为 main， 如果上传后博客不能成功刷新，则需要修改github仓库默认分支， 或branch参数修改为main。</p><p><img src="https://i.loli.net/2021/11/14/YOGI4sBUkATxwe3.png" alt="1234.png"></p></blockquote><h2 id="美化博客"><a href="#美化博客" class="headerlink" title="美化博客"></a>美化博客</h2><p>如果想使自己的博客好看点可以换主题：<br><a href="https://link.segmentfault.com/?enc=8eLR3W++7eNiMwHkYfsdUA==.Z47l5GuERtAlP/2xews5Q4aH8D9c530bdb2i6A1HlB0=">Hexo官网主题</a><br>建议换个，使用者多点的主题，这种的说明文档写的比较好，你开荒也会容易点。<br>美化博客你只需要点进官网开源的主题，然后找到这个主题的github链接，他会有详细教程的，从安装开始。</p><p>我用的主题为：[matery](<a href="https://github.com/blinkfox/hexo-theme-matery%EF%BC%8C">https://github.com/blinkfox/hexo-theme-matery，</a> 具体安装教程见：<a href="https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md">文档</a></p><h3 id="文章-Front-matter-介绍"><a href="#文章-Front-matter-介绍" class="headerlink" title="文章 Front-matter 介绍"></a>文章 Front-matter 介绍</h3><p><code>Front-matter</code> 选项中的所有内容均为<strong>非必填</strong>的。但我仍然建议至少填写 <code>title</code> 和 <code>date</code> 的值。</p><table><thead><tr><th>配置选项</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>title</td><td><code>Markdown</code> 的文件标题</td><td>文章标题，强烈建议填写此选项</td></tr><tr><td>date</td><td>文件创建时的日期时间</td><td>发布时间，强烈建议填写此选项，且最好保证全局唯一</td></tr><tr><td>author</td><td>根 <code>_config.yml</code> 中的 <code>author</code></td><td>文章作者</td></tr><tr><td>img</td><td><code>featureImages</code> 中的某个值</td><td>文章特征图，推荐使用图床(腾讯云、七牛云、又拍云等)来做图片的路径.如: <code>http://xxx.com/xxx.jpg</code></td></tr><tr><td>top</td><td><code>true</code></td><td>推荐文章（文章是否置顶），如果 <code>top</code> 值为 <code>true</code>，则会作为首页推荐文章</td></tr><tr><td>hide</td><td><code>false</code></td><td>隐藏文章，如果<code>hide</code>值为<code>true</code>，则文章不会在首页显示</td></tr><tr><td>cover</td><td><code>false</code></td><td><code>v1.0.2</code>版本新增，表示该文章是否需要加入到首页轮播封面中</td></tr><tr><td>coverImg</td><td>无</td><td><code>v1.0.2</code>版本新增，表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片</td></tr><tr><td>password</td><td>无</td><td>文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 <code>password</code> 的值，该值必须是用 <code>SHA256</code> 加密后的密码，防止被他人识破。前提是在主题的 <code>config.yml</code> 中激活了 <code>verifyPassword</code> 选项</td></tr><tr><td>toc</td><td><code>true</code></td><td>是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的 <code>config.yml</code> 中激活了 <code>toc</code> 选项</td></tr><tr><td>mathjax</td><td><code>false</code></td><td>是否开启数学公式支持 ，本文章是否开启 <code>mathjax</code>，且需要在主题的 <code>_config.yml</code> 文件中也需要开启才行</td></tr><tr><td>summary</td><td>无</td><td>文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</td></tr><tr><td>categories</td><td>无</td><td>文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类</td></tr><tr><td>tags</td><td>无</td><td>文章标签，一篇文章可以多个标签</td></tr><tr><td>keywords</td><td>文章标题</td><td>文章关键字，SEO 时需要</td></tr><tr><td>reprintPolicy</td><td>cc_by</td><td>文章转载规则， 可以是 cc_by, cc_by_nd, cc_by_sa, cc_by_nc, cc_by_nc_nd, cc_by_nc_sa, cc0, noreprint 或 pay 中的一个</td></tr></tbody></table><blockquote><p><strong>注意</strong>:</p><ol><li>如果 <code>img</code> 属性不填写的话，文章特色图会根据文章标题的 <code>hashcode</code> 的值取余，然后选取主题中对应的特色图片，从而达到让所有文章的特色图<strong>各有特色</strong>。</li><li><code>date</code> 的值尽量保证每篇文章是唯一的，因为本主题中 <code>Gitalk</code> 和 <code>Gitment</code> 识别 <code>id</code> 是通过 <code>date</code> 的值来作为唯一标识的。</li><li>如果要对文章设置阅读验证密码的功能，不仅要在 Front-matter 中设置采用了 SHA256 加密的 password 的值，还需要在主题的 <code>_config.yml</code> 中激活了配置。有些在线的 SHA256 加密的地址，可供你使用：<a href="http://tool.oschina.net/encrypt?type=2">开源中国在线工具</a>、<a href="http://encode.chahuo.com/">chahuo</a>、<a href="http://tool.chinaz.com/tools/hash.aspx">站长工具</a>。</li><li>您可以在文章md文件的 front-matter 中指定 reprintPolicy 来给单个文章配置转载规则</li></ol></blockquote><p>以下为文章的 <code>Front-matter</code> 示例。</p><h4 id="最简示例"><a href="#最简示例" class="headerlink" title="最简示例"></a>最简示例</h4><pre class="line-numbers language-none"><code class="language-none">---title: typora-vue-theme主题介绍date: 2018-09-07 09:25:00---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="最全示例"><a href="#最全示例" class="headerlink" title="最全示例"></a>最全示例</h4><pre class="line-numbers language-none"><code class="language-none">---title: typora-vue-theme主题介绍date: 2018-09-07 09:25:00author: 赵奇img: /source/images/xxx.jpgtop: truehide: falsecover: truecoverImg: /images/1.jpgpassword: 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92toc: falsemathjax: falsesummary: 这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要categories: Markdowntags:  - Typora  - Markdown---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="模板首页蒙板颜色修改"><a href="#模板首页蒙板颜色修改" class="headerlink" title="模板首页蒙板颜色修改"></a>模板首页蒙板颜色修改</h3><p>主题中默认首页展示有颜色蒙板</p><p><img src="https://i.loli.net/2021/11/14/nTKdRzUIuXqLpes.png" alt="5.png"></p><p>如果想取消可以对以下参数进行修改：</p><p>在主题文件的 <code>/source/css/matery.css</code> 文件中，搜索 <code>.bg-color</code> 来修改背景颜色：</p><pre class="line-numbers language-none"><code class="language-none">/* 整体背景颜色，包括导航、移动端的导航、页尾、标签页等的背景颜色. */.bg-color {    background-image: linear-gradient(to right, #4cbf30 0%, #0f9d58 100%);}@-webkit-keyframes rainbow {   /* 动态切换背景颜色. */}@keyframes rainbow {    /* 动态切换背景颜色. */}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将参数<code>0.75</code>、<code>0.6</code>改成<code>0</code></p><p><img src="https://i.loli.net/2021/11/14/eBuxZjVNmnLJ287.png" alt="6.png"></p><h3 id="代码高亮"><a href="#代码高亮" class="headerlink" title="代码高亮"></a>代码高亮</h3><p>从 Hexo5.0 版本开始自带了 <code>prismjs</code> 代码语法高亮的支持，本主题对此进行了改造支持。</p><p>如果你的博客中曾经安装过 <code>hexo-prism-plugin</code> 的插件，那么你须要执行 <code>npm uninstall hexo-prism-plugin</code> 来卸载掉它，否则生成的代码中会有 <code>{</code> 和 <code>}</code> 的转义字符。</p><p>然后，修改 Hexo 根目录下 <code>_config.yml</code> 文件中 <code>highlight.enable</code> 的值为 <code>false</code>，并将 <code>prismjs.enable</code> 的值设置为 <code>true</code>，主要配置如下：</p><pre class="line-numbers language-none"><code class="language-none">highlight:  enable: false  line_number: true  auto_detect: false  tab_replace: ''  wrap: true  hljs: falseprismjs:  enable: true  preprocess: true  line_number: true  tab_replace: ''<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>主题中默认的 <code>prismjs</code> 主题是 <code>Tomorrow Night</code>，如果你想定制自己的主题，可以前往 <a href="https://prismjs.com/download.html">prismjs 下载页面</a> 定制下载自己喜欢的主题 <code>css</code> 文件，然后将此 css 主题文件取名为 <code>prism.css</code>，替换掉 <code>hexo-theme-matery</code> 主题文件夹中的 <code>source/libs/prism/prism.css</code> 文件即可。</p><p>选择自己喜欢的主题并且下载：</p><p><img src="https://raw.githubusercontent.com/zhangandyu/picture/main/%E6%96%87%E7%AB%A0%E5%9B%BE%E7%89%87/3.png" alt="选择主题"></p><p><img src="https://raw.githubusercontent.com/zhangandyu/picture/main/%E6%96%87%E7%AB%A0%E5%9B%BE%E7%89%87/1.png" alt="下载css代码"></p><p>修改后的样式：</p><p><img src="https://raw.githubusercontent.com/zhangandyu/picture/main/%E6%96%87%E7%AB%A0%E5%9B%BE%E7%89%87/2.png" alt="修改后"></p><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p><a href="https://pixabay.com/zh/photos/">免费版权图片网站</a></p><p><a href="https://sm.ms/">图床</a></p>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>技能-Hive-SQL学习</title>
      <link href="/2020/06/02/2021-02-24-%E6%8A%80%E8%83%BD-Hive-SQL%E5%AD%A6%E4%B9%A0-3/"/>
      <url>/2020/06/02/2021-02-24-%E6%8A%80%E8%83%BD-Hive-SQL%E5%AD%A6%E4%B9%A0-3/</url>
      
        <content type="html"><![CDATA[<h2 id="SQL中的简单查询"><a href="#SQL中的简单查询" class="headerlink" title="SQL中的简单查询"></a>SQL中的简单查询</h2><p>表：score_student</p><table><thead><tr><th>id</th><th>name</th><th>class</th><th>age</th><th>score</th></tr></thead><tbody><tr><td>01</td><td>甲</td><td>一班</td><td>18</td><td>{“语文”:89,”数学”:98,”英语”:76}</td></tr><tr><td>02</td><td>乙</td><td>一班</td><td>19</td><td>{“语文”:96,”数学”:52,”英语”:78}</td></tr><tr><td>03</td><td>丙</td><td>二班</td><td>21</td><td>{“语文”:76,”数学”:69,”英语”:89}</td></tr><tr><td>04</td><td>丁</td><td>二班</td><td>23</td><td>{“语文”:92,”数学”:91,”英语”:96}</td></tr><tr><td>05</td><td>张</td><td>三班</td><td>25</td><td>{“语文”:85,”数学”:90,”英语”:73}</td></tr></tbody></table><ol><li><p>获取指定的数据</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span>     id<span class="token punctuation">,</span>    name<span class="token keyword">from</span>     score_student<span class="token keyword">where</span>     class <span class="token operator">=</span> <span class="token string">'一班'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>插入一列固定值</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span>    id<span class="token punctuation">,</span>    name<span class="token punctuation">,</span>    <span class="token string">"age &lt; 20 "</span> <span class="token keyword">as</span> label<span class="token keyword">from</span>     score_student<span class="token keyword">where</span>     age <span class="token operator">&lt;</span> <span class="token number">20</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>id</th><th>name</th><th>label</th></tr></thead><tbody><tr><td>01</td><td>甲</td><td>age &lt; 20</td></tr><tr><td>02</td><td>乙</td><td>age &lt; 20</td></tr></tbody></table></li><li><p>json解析-获取对应的value值</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span>    name<span class="token punctuation">,</span>    json_extract<span class="token punctuation">(</span>score<span class="token punctuation">,</span> <span class="token string">'$.英语'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token string">'英语成绩'</span><span class="token keyword">from</span>     score_student<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>name</th><th>英语成绩</th></tr></thead><tbody><tr><td>甲</td><td>76</td></tr><tr><td>乙</td><td>78</td></tr><tr><td>丙</td><td>89</td></tr><tr><td>张</td><td>73</td></tr></tbody></table></li><li><p>json解析-查看key值</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span>    name<span class="token punctuation">,</span>    json_keys<span class="token punctuation">(</span>score<span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token string">'科目'</span><span class="token keyword">from</span>     score_student<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>name</th><th>科目</th></tr></thead><tbody><tr><td>甲</td><td>[“语文”,”数学”,”英语”]</td></tr><tr><td>乙</td><td>[“语文”,”数学”,”英语”]</td></tr><tr><td>丙</td><td>[“语文”,”数学”,”英语”]</td></tr><tr><td>张</td><td>[“语文”,”数学”,”英语”]</td></tr></tbody></table></li></ol><ol start="5"><li>加入表中一列含有多个元素， 我们可以只查找此列的第一个元素<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span>    name<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token keyword">from</span>    employees<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ol><ol start="6"><li>可以使用 “点” 符号， 如：表的别名.列名<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span>      name<span class="token punctuation">,</span>     address<span class="token punctuation">.</span>city  <span class="token keyword">from</span>      employees<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><ol start="7"><li><p>使用正则表达式，可以选出所有列名以 price 作为前缀的列</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span>     <span class="token string">'price.*'</span>  <span class="token keyword">from</span>      stocks<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>where中关系型运算符优先级高到低为：not - and - or</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span>     <span class="token operator">*</span> <span class="token keyword">from</span>     employees <span class="token keyword">where</span>     country  <span class="token operator">not</span> <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token string">'us'</span><span class="token punctuation">,</span> <span class="token string">'china'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>where中用like、rlike进行数据筛选</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span>     name<span class="token punctuation">,</span>     address<span class="token punctuation">.</span>street <span class="token keyword">from</span>     employees <span class="token keyword">where</span>     address<span class="token punctuation">.</span>street <span class="token operator">rlike</span> <span class="token string">'.*(beijing|shanghai).*'</span>    <span class="token comment">--address.street like '%beijing%' </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><ul><li>like与rlike中常见的通配符</li></ul><table><thead><tr><th>like通配符</th><th>含义</th></tr></thead><tbody><tr><td>%</td><td>匹配0个或任意多个字符</td></tr><tr><td>_</td><td>匹配任意一个字符</td></tr><tr><td>escape</td><td>转义字符，可匹配%和_。如SELECT * FROM table_name WHERE column_name LIKE ‘/%/<em>%</em>‘ ESCAPE’/‘</td></tr><tr><td>——</td><td>————————————————————</td></tr><tr><td></td><td></td></tr></tbody></table><table><thead><tr><th>rlike通配符</th><th>含义</th></tr></thead><tbody><tr><td>.</td><td>匹配任意单个字 符</td></tr><tr><td>*</td><td>匹配0个或多个前一个得到的字符</td></tr><tr><td>[]</td><td>含有任意一个[]内的字符，[ab]*可匹配空串、a、b、或者由任意个a和b组成的字符串</td></tr><tr><td>^</td><td>匹配开头，如^s匹配以s或者S开头的字符串</td></tr><tr><td>$</td><td>匹配结尾，如s$匹配以s结尾的字符串</td></tr><tr><td>{n}</td><td>匹配前一个字符反复n次</td></tr></tbody></table><ol start="10"><li>对数据进行排序——order by<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span>    <span class="token operator">*</span><span class="token keyword">from</span>     a <span class="token keyword">order</span> <span class="token keyword">by</span>     code <span class="token keyword">asc</span><span class="token punctuation">,</span> name <span class="token keyword">desc</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><ul><li>排序说明</li></ul><table><thead><tr><th>字段</th><th>说明</th></tr></thead><tbody><tr><td>order by a,b</td><td>a和b都是升序</td></tr><tr><td>order by a,b desc</td><td>a升序，b降序</td></tr><tr><td>order by a desc，b</td><td>a降序，b升序</td></tr><tr><td>order by a desc，b desc</td><td>a，b都是降序</td></tr></tbody></table><ol start="11"><li><p>对数据进行限制-limit</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span>    account<span class="token keyword">from</span>     employees<span class="token keyword">limit</span> <span class="token number">10</span> <span class="token comment">---使用limit语句限制返回的行数，只显示 10 行</span><span class="token keyword">limit</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token comment">--获取第2行（不包含第2行），以后的3行数据</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>注释</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token operator">/</span><span class="token operator">*</span>大段文字注释<span class="token operator">/</span><span class="token operator">*</span><span class="token keyword">select</span>    account<span class="token keyword">from</span>     employees<span class="token keyword">limit</span> <span class="token number">10</span> <span class="token comment">---使用limit语句限制返回的行数，只显示 10 行， 对某一行进行注释</span><span class="token keyword">limit</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token comment">--获取第2行（不包含第2行），以后的3行数据</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="数据预处理"><a href="#数据预处理" class="headerlink" title="数据预处理"></a>数据预处理</h2><ol><li>排除缺失值<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span>     <span class="token operator">*</span><span class="token keyword">from</span>     score_student<span class="token keyword">where</span>     score <span class="token operator">!=</span> <span class="token string">""</span> <span class="token operator">or</span>     score <span class="token operator">is</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token operator">or</span>     score <span class="token operator">!=</span> <span class="token string">" "</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>缺失值填充<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span>    id<span class="token punctuation">,</span>    <span class="token keyword">coalesce</span><span class="token punctuation">(</span>score<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment">--当score为null值时，将返回1，否则返回score真实值</span>    <span class="token keyword">coalesce</span><span class="token punctuation">(</span> name<span class="token punctuation">,</span> score<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">--当name不为null，那么无论score是否为null，都返回name的真实值。当name为null,而score不为null时，返回score的真实值。当name和score都为null时，返回1</span><span class="token keyword">from</span>     score_student<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol> <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span>    id<span class="token punctuation">,</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>score<span class="token operator">!=</span> <span class="token string">""</span><span class="token punctuation">,</span> score<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">from</span>     score_student<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>重复值处理<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span>      <span class="token keyword">distinct</span> user_account<span class="token punctuation">,</span><span class="token comment">--如果用 distinct, select 后面必须直接跟 distinct</span>    province <span class="token keyword">from</span>        computer<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol> <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span>    user_account<span class="token punctuation">,</span>    province<span class="token keyword">from</span>    computer<span class="token keyword">group</span> <span class="token keyword">by</span>     user_account<span class="token punctuation">,</span>    province<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>数据格式转换-cast与convert函数<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span>    age<span class="token punctuation">,</span>    cast<span class="token punctuation">(</span>age <span class="token keyword">as</span> <span class="token keyword">decimal</span><span class="token punctuation">)</span> <span class="token keyword">as</span> decimal_age<span class="token punctuation">,</span>    <span class="token keyword">convert</span><span class="token punctuation">(</span>age <span class="token keyword">as</span> <span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token keyword">as</span> char_age<span class="token keyword">from</span>     score<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><ul><li>数据类型</li></ul><table><thead><tr><th>类型</th><th>符号</th></tr></thead><tbody><tr><td>浮点型</td><td>decimal</td></tr><tr><td>整形</td><td>signed</td></tr><tr><td>字符型</td><td>char</td></tr><tr><td>二进制</td><td>binary</td></tr><tr><td>日期</td><td>date</td></tr><tr><td>时间</td><td>time</td></tr><tr><td>日期时间</td><td>datetime</td></tr></tbody></table><h2 id="数据运算"><a href="#数据运算" class="headerlink" title="数据运算"></a>数据运算</h2><ol><li>算数运算<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span>    id<span class="token punctuation">,</span>    <span class="token punctuation">(</span>score_a <span class="token operator">+</span> score_b<span class="token punctuation">)</span> <span class="token keyword">as</span> all_score<span class="token keyword">from</span>     score_student<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><ul><li>算数运算符</li></ul><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td>+</td><td>加法</td></tr><tr><td>-</td><td>减法</td></tr><tr><td>*</td><td>乘法</td></tr><tr><td>/</td><td>除法</td></tr><tr><td>% , mod</td><td>取余</td></tr><tr><td>div</td><td>整除</td></tr></tbody></table><ol start="2"><li>比较运算<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span>    id<span class="token punctuation">,</span>    score_a<span class="token punctuation">,</span>    score_b<span class="token punctuation">,</span>    score_a <span class="token operator">&gt;</span> score_b <span class="token keyword">as</span> <span class="token string">'大于'</span> <span class="token comment">--返回1或0</span><span class="token keyword">from</span>    score_student<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><ul><li>比较运算符</li></ul><table><thead><tr><th><strong>操作符</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>=</td><td>等于</td></tr><tr><td>&lt;&gt; , !=</td><td>不等于</td></tr><tr><td>&lt;</td><td>小于</td></tr><tr><td>&gt;</td><td>大于</td></tr><tr><td>&lt;=</td><td>小于或等于</td></tr><tr><td>&gt;=</td><td>大于或等于</td></tr><tr><td>[not] between</td><td>介于</td></tr><tr><td>in</td><td>包含</td></tr><tr><td>is [not] null</td><td>空值</td></tr></tbody></table><ol start="3"><li>逻辑运算<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span>     id<span class="token punctuation">,</span>    score_a<span class="token punctuation">,</span>    score_b<span class="token punctuation">,</span>    <span class="token punctuation">(</span><span class="token punctuation">(</span>score_a <span class="token operator">&gt;</span><span class="token number">85</span><span class="token punctuation">)</span> <span class="token operator">and</span> <span class="token punctuation">(</span> score_b <span class="token operator">&gt;</span> <span class="token number">85</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token string">"双优"</span><span class="token punctuation">,</span>    <span class="token punctuation">(</span><span class="token punctuation">(</span>score_a <span class="token operator">&gt;</span><span class="token number">85</span><span class="token punctuation">)</span> <span class="token operator">or</span> <span class="token punctuation">(</span> score_b <span class="token operator">&gt;</span> <span class="token number">85</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token string">"单优"</span><span class="token keyword">from</span>     score_student<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><ul><li>逻辑运算符</li></ul><table><thead><tr><th><strong>逻辑符</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>and</td><td>和</td></tr><tr><td>or</td><td>或</td></tr><tr><td>not</td><td>非</td></tr></tbody></table><ol start="4"><li>数学运算<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span>     id<span class="token punctuation">,</span>    score_a<span class="token punctuation">,</span>    score_b<span class="token punctuation">,</span>    abs<span class="token punctuation">(</span>score_a <span class="token operator">-</span>core_b <span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token string">"绝对差值"</span><span class="token punctuation">,</span>    sign<span class="token punctuation">(</span>score_a <span class="token operator">-</span>core_b <span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token string">"正负"</span><span class="token keyword">from</span>     score_student<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><ul><li>数学运算符</li></ul><table><thead><tr><th><strong>数学函数</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>abs(x)</td><td>返回x的绝对值</td></tr><tr><td>ceil(x)</td><td>返回不小于x的最小整数值</td></tr><tr><td>floor(x)</td><td>返回不大于x的最大整数值</td></tr><tr><td>rand()</td><td>返回一个随机浮点值</td></tr><tr><td>round(d,x)</td><td>返回d精确度的x</td></tr><tr><td>sign(x)</td><td>返回x的正负，如果为正返回1，为负返回-1</td></tr></tbody></table><ol start="5"><li>聚合运算<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span>     <span class="token function">sum</span><span class="token punctuation">(</span>score_a<span class="token punctuation">)</span> <span class="token keyword">as</span> a_sum<span class="token punctuation">,</span>    <span class="token function">sum</span><span class="token punctuation">(</span>score_b<span class="token punctuation">)</span> <span class="token keyword">as</span> b_sum<span class="token punctuation">,</span>    <span class="token function">sum</span><span class="token punctuation">(</span>a_sum<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">sum</span><span class="token punctuation">(</span>b_sum<span class="token punctuation">)</span> <span class="token keyword">as</span> a_b_sum<span class="token keyword">from</span>     score_student<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><ul><li>聚合函数</li></ul><table><thead><tr><th>聚合函数</th><th>定义</th></tr></thead><tbody><tr><td>count()</td><td>个数统计函数</td></tr><tr><td>sum()</td><td>求和</td></tr><tr><td>avg()</td><td>平均值</td></tr><tr><td>min()</td><td>最小值</td></tr><tr><td>max()</td><td>最大值</td></tr><tr><td>corr(A, B)</td><td>相关系数</td></tr><tr><td>var_pop()</td><td>总体方差</td></tr><tr><td>var_samp()</td><td>样本方差</td></tr><tr><td>std()</td><td>总体标准差</td></tr><tr><td>stddev_samp</td><td>样本标准差</td></tr></tbody></table><ul><li>count(1)、count(*)、count(column) 之间的区别<blockquote><p>执行范围上： count(*) 和 count (1)  都包含了 对NULL的统计。 count(列名)统计时不包含NULL值。<br>执行速度上： 列名为主键时， count(列名) 最快。  当无主键时， count(1) 最快。  当表只有一个字段，count(*) 最快。</p></blockquote></li></ul><h2 id="字符串处理"><a href="#字符串处理" class="headerlink" title="字符串处理"></a>字符串处理</h2><ol><li>字符串函数</li></ol><table><thead><tr><th>函数名</th><th>定义</th></tr></thead><tbody><tr><td>concat(str1, str2,..strn)</td><td>将str1,str2,…strn合并成一个字符串,只要其中一个是NUll，则返回NUll</td></tr><tr><td>concat_ws(s,str1, str2,…strn)</td><td>将str1,str2,…strn用连接符s合并成一个字符串,只能接收 string或string类型的数组，只要有一个字符串</td></tr><tr><td>collect_set(col)</td><td>将某字段的值进行去重汇总，产生array类型字段</td></tr><tr><td>collect_list(col)</td><td>将某字段的值进行汇总不去重，产生array类型字段</td></tr><tr><td>explode(col)</td><td>将hive列中复杂的array或者map结构拆分成多行</td></tr><tr><td>substr / substring(str,m,n)</td><td>获取字符串str从m位置开始，长度为n的字符串</td></tr><tr><td>split(str, s)</td><td>str字符串通过s进行分割</td></tr><tr><td>substring_index(str, s,n)</td><td>str字符串通过第n个s进行分割</td></tr><tr><td>replace(str,a,b)</td><td>将str字符串中的a替换成b</td></tr><tr><td>left(str, n)</td><td>取str字符串中最左边的n个字符</td></tr><tr><td>right(str,n)</td><td>取str字符串中最右边的n个字符</td></tr><tr><td>ltrim(str)</td><td>去除str字符串左边的空格</td></tr><tr><td>rtrim(str)</td><td>去除str字符串右边的空格</td></tr><tr><td><strong>trim(str)</strong></td><td>去除str字符串开头和结尾的空格</td></tr><tr><td>length / char_length(str)</td><td>返回str字符串的字符长度，一个汉字算三个字符</td></tr><tr><td>repeat(str,n)</td><td>将str字符串重复n遍</td></tr><tr><td>lower()</td><td>将字串转化为小写</td></tr><tr><td>upper()</td><td>将字符转化为大写</td></tr><tr><td>lpad(str1，n，str2)</td><td>在str1字符串的左边第n个位置，添加str2</td></tr><tr><td>rpad(str1，n，str2)</td><td>在str1字符串的右边第n个位置，添加str2</td></tr><tr><td>instr (A ,B )</td><td>返回字符B首次在A中出现的位置,不存在返回0</td></tr></tbody></table><ol start="2"><li><p><strong>substr函数与 substring函数用法</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">substr<span class="token punctuation">(</span>string<span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span>: 从右第<span class="token number">4</span>位置截取到最后，结果为：ingsubstring<span class="token punctuation">(</span>string<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>:取左边第<span class="token number">1</span>位置起，<span class="token number">3</span>字长的字符串，结果为：strsubstring<span class="token punctuation">(</span>string<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>:取右边第<span class="token number">1</span>位置起，<span class="token number">3</span>字长的字符串<span class="token punctuation">,</span>右边第一位置往右不够<span class="token number">3</span>字长，结果为：gsubstring<span class="token punctuation">(</span>string<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>:取右边第<span class="token number">1</span>位置起，<span class="token number">3</span>字长的字符串，结果为：ing<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>substring_index函数</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">substring_index<span class="token punctuation">(</span><span class="token string">'15,151,152,16'</span><span class="token punctuation">,</span><span class="token string">','</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>：取第一个逗号前面的字符串，结果为：<span class="token number">15</span>substring_index<span class="token punctuation">(</span><span class="token string">'15,151,152,16'</span><span class="token punctuation">,</span><span class="token string">','</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>：取第二个逗号前面部分，结果为：<span class="token number">15</span><span class="token punctuation">,</span><span class="token number">151</span>substring_index<span class="token punctuation">(</span><span class="token string">'15,151,152,16'</span><span class="token punctuation">,</span><span class="token string">','</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>：取目标字符串中最后一个含 “<span class="token punctuation">,</span>” 位子的后的部分，结果为：<span class="token number">16</span>substring_index<span class="token punctuation">(</span>substring_index<span class="token punctuation">(</span><span class="token string">'15,151,152,16'</span><span class="token punctuation">,</span><span class="token string">','</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">','</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>:取第二个逗号前面部分<span class="token punctuation">,</span>然后最后逗号的前面部分，结果为：<span class="token number">151</span>substring_index<span class="token punctuation">(</span>substring_index<span class="token punctuation">(</span><span class="token string">'15,151,152,16'</span><span class="token punctuation">,</span><span class="token string">','</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">','</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>：取倒数第二个逗号后面部分字符串，再去这部分里第一个都号前的部分，结果为：<span class="token number">152</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>split函数</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">split<span class="token punctuation">(</span><span class="token string">'a,b,c,d'</span><span class="token punctuation">,</span><span class="token string">','</span><span class="token punctuation">)</span>:根据逗号进行分割，结果为： <span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">,</span><span class="token string">"c"</span><span class="token punctuation">,</span><span class="token string">"d"</span><span class="token punctuation">]</span>split<span class="token punctuation">(</span><span class="token string">'a,b,c,d'</span><span class="token punctuation">,</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>： 取结果数组中的某一项，结果为： asplit<span class="token punctuation">(</span><span class="token string">'192.168.0.1'</span><span class="token punctuation">,</span><span class="token string">'\\.'</span><span class="token punctuation">)</span>： 点号这种特殊字符的时候需要做特殊的处理，结果为：<span class="token punctuation">[</span><span class="token string">"192"</span><span class="token punctuation">,</span><span class="token string">"168"</span><span class="token punctuation">,</span><span class="token string">"0"</span><span class="token punctuation">,</span><span class="token string">"1"</span><span class="token punctuation">]</span><span class="token string">"....  split('192.168.0.1','\\\\.') ... "</span>: split包含在 <span class="token string">""</span> 之中时 需要加<span class="token number">4</span>个\<span class="token punctuation">,</span>不然得到的值是<span class="token boolean">null</span><span class="token punctuation">,</span>同样的 <span class="token operator">|</span> 等特殊符号也需要做类似处理。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ol><ul><li>例如： 将一些字段拆解出来进行使用<blockquote><p>比如：Syjh-sjsy-zygn-3_1字段，我们只需要Syjh-sjsy-zygn位置的所有按钮。</p></blockquote><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span>     substring_index<span class="token punctuation">(</span>nbtn_position<span class="token punctuation">,</span> <span class="token string">'-'</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token keyword">as</span> position<span class="token punctuation">,</span>    <span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">distinct</span> user_account<span class="token punctuation">)</span> <span class="token keyword">as</span> uv <span class="token keyword">from</span>     apache_computer_view<span class="token keyword">where</span>     hit_date <span class="token operator">=</span> <span class="token string">'2020-03-01'</span>    <span class="token operator">and</span>     nbtn_position <span class="token operator">like</span> <span class="token string">'%Syjh%'</span><span class="token keyword">group</span> <span class="token keyword">by</span>     substring_index<span class="token punctuation">(</span>nbtn_position<span class="token punctuation">,</span> <span class="token string">'-'</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><ol start="5"><li><strong>lpad(str1,len,str2)</strong> <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> lpad<span class="token punctuation">(</span>nbtn_name<span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token string">'xo'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token string">'左填充'</span><span class="token punctuation">,</span>rpad<span class="token punctuation">(</span>nbtn_name<span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token string">'xo'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token string">'右填充'</span><span class="token punctuation">,</span>nbtn_name <span class="token keyword">as</span> <span class="token string">'不填充'</span><span class="token keyword">from</span> table1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>左填充</th><th>右填充</th><th>不填充</th></tr></thead><tbody><tr><td>xoxo张晓东</td><td>张晓东xoxo</td><td>张晓东</td></tr></tbody></table></li></ol><ol start="6"><li><strong>concat_ws函数</strong> <blockquote><p>把下表中星座和血型一样的人归类到一起：</p></blockquote></li></ol><table><thead><tr><th>name</th><th>contellation</th><th>blood_type</th></tr></thead><tbody><tr><td>孙悟空</td><td>白羊座</td><td>A</td></tr><tr><td>猪八戒</td><td>射手座</td><td>A</td></tr><tr><td>宋宋</td><td>白羊座</td><td>B</td></tr><tr><td>唐僧</td><td>白羊座</td><td>A</td></tr><tr><td>张帅</td><td>射手座</td><td>A</td></tr></tbody></table> <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> con_blood<span class="token punctuation">,</span>concat_ws <span class="token punctuation">(</span>"\"<span class="token punctuation">,</span> collect_set<span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> concat_ws<span class="token punctuation">(</span> <span class="token string">','</span><span class="token punctuation">,</span> contellation<span class="token punctuation">,</span> blood_type<span class="token punctuation">)</span> <span class="token keyword">as</span> con_blood<span class="token punctuation">,</span>name<span class="token keyword">from</span> table1<span class="token punctuation">)</span> <span class="token keyword">group</span> <span class="token keyword">by</span> con_blood<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>得到结果如下：</p></blockquote><table><thead><tr><th>con_blod</th><th>name</th></tr></thead><tbody><tr><td>射手座,A</td><td>猪八戒\张帅</td></tr><tr><td>白羊座，A</td><td>孙悟空\唐僧</td></tr><tr><td>白羊座，B</td><td>宋</td></tr></tbody></table><ol start="7"><li><strong>collect_set函数</strong> </li></ol><blockquote><p>求将每个省的城市列出来<br> </p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> province<span class="token punctuation">,</span> collect_set<span class="token punctuation">(</span>city<span class="token punctuation">)</span> <span class="token keyword">from</span> android <span class="token keyword">where</span>  dt <span class="token operator">=</span> <span class="token string">'2020-05-01'</span> <span class="token operator">and</span> city <span class="token operator">is</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">group</span> <span class="token keyword">by</span> province <span class="token comment">---辽宁省  ["营口市","大连","大连市",.....,"朝阳"]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>求出一个月内活跃天数大于20天的用户数<br> <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">distinct</span> user_account<span class="token punctuation">)</span> <span class="token keyword">as</span> uv <span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token keyword">select</span> user_account<span class="token punctuation">,</span>collect_set<span class="token punctuation">(</span>hit_date<span class="token punctuation">)</span>  <span class="token keyword">as</span> dt<span class="token keyword">from</span> an<span class="token keyword">where</span> hit_date <span class="token operator">between</span> <span class="token string">'2020-05-01'</span> <span class="token operator">and</span> <span class="token string">'2020-05-31'</span><span class="token keyword">group</span> <span class="token keyword">by</span> user_account<span class="token keyword">having</span>size<span class="token punctuation">(</span>dt<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">20</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p></p></blockquote><ol start="8"><li><strong>explode函数</strong>  </li></ol><ul><li><p>函数说明</p><blockquote><ul><li>explode(col): 将hive列中复杂的array或者map结构拆分成多行</li><li><strong>lateral view</strong> 用法： lateral view UDTF(expression) adtable  as a1  说明： 用户和split,explode 等UDTF一起使用，能够将一列数据拆分成多行数据， 在此基础上可以对拆分的数据进行聚合计算. 形成一个新的表，并对原来的表进行侧写</li></ul></blockquote></li><li><p>需求1：</p><blockquote><p>将如下表进行拆分</p></blockquote></li></ul><table><thead><tr><th>movie</th><th>category</th></tr></thead><tbody><tr><td>《疑犯追踪》</td><td>悬疑,动作,科幻,剧情</td></tr><tr><td>《lie to me》</td><td>警匪,动作,心理</td></tr></tbody></table> <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> movie<span class="token punctuation">.</span> categrory_name<span class="token keyword">from</span> movie_infolateral  <span class="token keyword">view</span> explode <span class="token punctuation">(</span> categrory<span class="token punctuation">)</span>  adtable <span class="token keyword">as</span> categrory_name<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>得到结果如下：</p></blockquote><table><thead><tr><th>movie</th><th>category</th></tr></thead><tbody><tr><td>《疑犯追踪》</td><td>悬疑</td></tr><tr><td>《疑犯追踪》</td><td>动作</td></tr><tr><td>《疑犯追踪》</td><td>科幻</td></tr><tr><td>《疑犯追踪》</td><td>剧情</td></tr><tr><td>《lie to me》</td><td>警匪</td></tr><tr><td>《lie to me》</td><td>动作</td></tr><tr><td>《lie to me》</td><td>心理</td></tr></tbody></table><ul><li>需求2： <blockquote><p>将 表 table 中的 <code>adid_list</code> 转换为单独的行。</p></blockquote></li></ul><table><thead><tr><th>pageid</th><th>adid_list</th></tr></thead><tbody><tr><td>front_page</td><td>[1,2,3]</td></tr><tr><td>contact_page</td><td>[3,4]</td></tr></tbody></table> <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> pageid<span class="token punctuation">,</span> adid<span class="token keyword">from</span> talbe1lateral <span class="token keyword">view</span> explode<span class="token punctuation">(</span>adid_list<span class="token punctuation">)</span> adtable <span class="token keyword">as</span> adid<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>输出结果为： </p></blockquote><table><thead><tr><th>pageid</th><th>adid_list</th></tr></thead><tbody><tr><td>front_page</td><td>1</td></tr><tr><td>front_page</td><td>2</td></tr><tr><td>front_page</td><td>3</td></tr><tr><td>contact_page</td><td>3</td></tr><tr><td>contact_page</td><td>4</td></tr></tbody></table><ul><li>需求3： <blockquote><p>多个 lateral view 查询</p></blockquote></li></ul><table><thead><tr><th>array</th><th>col2</th></tr></thead><tbody><tr><td>[1,2]</td><td>[“a”，”b”]</td></tr><tr><td>[3,4]</td><td>[“c”, “d”]</td></tr></tbody></table> <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> mycol1<span class="token punctuation">,</span>mycol2<span class="token keyword">from</span> table1alteral  <span class="token keyword">view</span> explode<span class="token punctuation">(</span>array<span class="token punctuation">)</span> adtable <span class="token keyword">as</span> mycol1 alteral  <span class="token keyword">view</span> explode<span class="token punctuation">(</span>col2<span class="token punctuation">)</span>  adtable <span class="token keyword">as</span> mycol2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>输出结果为： </p></blockquote><table><thead><tr><th>myCol1</th><th>myCol2</th></tr></thead><tbody><tr><td>1</td><td>“a”</td></tr><tr><td>1</td><td>“b”</td></tr><tr><td>2</td><td>“a”</td></tr><tr><td>2</td><td>“b”</td></tr><tr><td>3</td><td>“c”</td></tr><tr><td>3</td><td>“d”</td></tr><tr><td>4</td><td>“c”</td></tr><tr><td>4</td><td>“d”</td></tr></tbody></table><hr><h2 id="控制函数"><a href="#控制函数" class="headerlink" title="控制函数"></a>控制函数</h2><ol><li><p><strong>IF( expr , v1 , v2 )函数</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span>     <span class="token operator">*</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>age<span class="token operator">&lt;</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token string">'少年'</span><span class="token punctuation">,</span><span class="token string">'青年'</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> ifage <span class="token comment">--- 查出班级所有学生，如果年龄小于20，就标准为少年，否则标记为青年。</span><span class="token keyword">from</span>      student<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>ifnull(V1,V2)函数</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span>    ifnull<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment">--如果v1不为空，则直接返回v1;如果v1为空，则返回参数v2</span>    ifnull<span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p><strong>case when 函数</strong></p></li></ol><ul><li>对不同字母进行省份转换<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span><span class="token keyword">case</span>         <span class="token keyword">when</span> province <span class="token operator">like</span> <span class="token string">'ah'</span> <span class="token keyword">then</span> <span class="token string">'安徽'</span>        <span class="token keyword">when</span> province <span class="token operator">like</span> <span class="token string">'fj'</span> <span class="token keyword">then</span> <span class="token string">'福建'</span>        <span class="token keyword">when</span> province <span class="token operator">like</span> <span class="token string">'gd'</span> <span class="token keyword">then</span> <span class="token string">'广东'</span>    <span class="token keyword">else</span> <span class="token string">'m'</span>     <span class="token keyword">end</span> <span class="token keyword">as</span> province <span class="token punctuation">,</span>    <span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">distinct</span> user_account<span class="token punctuation">)</span> uv<span class="token punctuation">,</span>    <span class="token function">count</span><span class="token punctuation">(</span>page_name<span class="token punctuation">)</span> pv<span class="token keyword">from</span> android_log<span class="token keyword">where</span> hit_date <span class="token operator">between</span> <span class="token string">'{}'</span> <span class="token operator">and</span> <span class="token string">'{}'</span><span class="token operator">and</span> page_name <span class="token operator">like</span> <span class="token string">'%Kefujh%'</span><span class="token keyword">group</span> <span class="token keyword">by</span> <span class="token keyword">case</span>         <span class="token keyword">when</span> province <span class="token operator">like</span> <span class="token string">'ah'</span> <span class="token keyword">then</span> <span class="token string">'安徽'</span>        <span class="token keyword">when</span> province <span class="token operator">like</span> <span class="token string">'fj'</span> <span class="token keyword">then</span> <span class="token string">'福建'</span>        <span class="token keyword">when</span> province <span class="token operator">like</span> <span class="token string">'gd'</span> <span class="token keyword">then</span> <span class="token string">'广东'</span>    <span class="token keyword">else</span> <span class="token string">'m'</span>     <span class="token keyword">end</span> <span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token keyword">case</span>         <span class="token keyword">when</span> province <span class="token operator">like</span> <span class="token string">'ah'</span> <span class="token keyword">then</span> <span class="token string">'安徽'</span>        <span class="token keyword">when</span> province <span class="token operator">like</span> <span class="token string">'fj'</span> <span class="token keyword">then</span> <span class="token string">'福建'</span>        <span class="token keyword">when</span> province <span class="token operator">like</span> <span class="token string">'gd'</span> <span class="token keyword">then</span> <span class="token string">'广东'</span>    <span class="token keyword">else</span> <span class="token string">'m'</span>     <span class="token keyword">end</span> <span class="token keyword">limit</span> <span class="token number">1000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><ul><li>范围转换<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token keyword">case</span> <span class="token keyword">when</span> population <span class="token operator">&lt;</span> <span class="token number">250</span> <span class="token keyword">then</span> <span class="token string">'1'</span> <span class="token keyword">when</span> population  <span class="token operator">=</span> <span class="token number">250</span> <span class="token operator">and</span>  population <span class="token operator">&lt;</span> <span class="token number">500</span> <span class="token keyword">then</span> <span class="token string">'2'</span><span class="token keyword">else</span> <span class="token boolean">null</span> <span class="token keyword">end</span>  <span class="token keyword">as</span> pop_class<span class="token punctuation">,</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">as</span> cntfrom <span class="token keyword">from</span> pop <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="日期函数"><a href="#日期函数" class="headerlink" title="日期函数"></a>日期函数</h2><ol><li><strong>时间函数</strong></li></ol><table><thead><tr><th>函数名</th><th>定义</th></tr></thead><tbody><tr><td>NOW()</td><td>当前时间</td></tr><tr><td>curdate()</td><td>获取当前时刻的日期</td></tr><tr><td>curtime()</td><td>获取当前时刻的时间</td></tr><tr><td>date()</td><td>返回时间的日期部分</td></tr><tr><td>year()</td><td>返回时间的年份</td></tr><tr><td>month()</td><td>返回时间的月份</td></tr><tr><td>day()</td><td>返回日期的天</td></tr><tr><td>hour()</td><td>返回时间的小时</td></tr><tr><td>minute()</td><td>返回时间的分钟</td></tr><tr><td>second()</td><td>返回时间的秒</td></tr><tr><td>week ()</td><td>第几周</td></tr><tr><td>time()</td><td>将日期转换为时间</td></tr><tr><td>dayofweek()</td><td>返回星期几，1为星期天</td></tr><tr><td>dayofyear()</td><td>一年中的第几天</td></tr><tr><td>weekofyear(now())</td><td>获取当前时间是全年的第几周</td></tr><tr><td>quarter()</td><td>获取时间所属的季度</td></tr><tr><td>sec_to_time ( )</td><td>秒数转成时间</td></tr><tr><td>date_add(dt,interval 1 day )</td><td>时间相加</td></tr><tr><td>date_sub(date,INTERVAL expr（时间间隔） type（时间类型，天、月、年）)</td><td>时间相减</td></tr><tr><td>datediff()</td><td>时间的差值</td></tr><tr><td>extract()</td><td>抽取具体的年、月、日</td></tr><tr><td>date_format()</td><td>输出指定时间格式</td></tr></tbody></table><ol start="2"><li> <strong>extract(unit from datetime)用法</strong></li></ol><ul><li>unit的取值说明为：</li></ul><table><thead><tr><th>unit</th><th>说明</th></tr></thead><tbody><tr><td>year</td><td>年</td></tr><tr><td>month</td><td>月</td></tr><tr><td>day</td><td>日</td></tr><tr><td>hour</td><td>小时</td></tr><tr><td>minute</td><td>分钟</td></tr><tr><td>second</td><td>秒</td></tr><tr><td>week</td><td>周</td></tr></tbody></table> <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span>     extract<span class="token punctuation">(</span><span class="token keyword">year</span> <span class="token keyword">from</span> <span class="token string">"2020-07-29 10:31:10"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> y<span class="token punctuation">,</span>    extract<span class="token punctuation">(</span><span class="token keyword">month</span> <span class="token keyword">from</span>  <span class="token string">"2020-07-29 10:31:10"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> m<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>输出结果为：</p></blockquote><table><thead><tr><th>y</th><th>m</th></tr></thead><tbody><tr><td>2020</td><td>07</td></tr></tbody></table><ol start="3"><li><strong>date_format() 用法</strong></li></ol><ul><li>参数可选格式：</li></ul><table><thead><tr><th>主题</th><th>格式</th><th>描述</th></tr></thead><tbody><tr><td>年</td><td>%Y</td><td>4位数字表示的年</td></tr><tr><td>月</td><td>%b</td><td>月份对应的英文缩写</td></tr><tr><td>月</td><td>%M</td><td>月份对应的英文全称</td></tr><tr><td>月</td><td>%m</td><td>以01-12的形式表示的月</td></tr><tr><td>月</td><td>%c</td><td>以1-12的形式表示的月</td></tr><tr><td>日</td><td>%d</td><td>以01-31的形式表示某月中的第几天</td></tr><tr><td>日</td><td>%e</td><td>以1-31的形式表示某月中的第几天</td></tr><tr><td>日</td><td>%D</td><td>用th后缀表示某月中的第几天</td></tr><tr><td>日</td><td>%j</td><td>以001-366的形式表示一年中的第几天</td></tr><tr><td>周</td><td>%a</td><td>星期几对应的英文缩写</td></tr><tr><td>周</td><td>%W</td><td>星期几对应的英文全称</td></tr><tr><td>时</td><td>%H</td><td>以00-23的形式表示的小时</td></tr><tr><td>时</td><td>%h</td><td>以01-12的形式表示的小时</td></tr><tr><td>分</td><td>%i</td><td>以00-59的形式表示的分钟</td></tr><tr><td>秒</td><td>%S</td><td>以00-59的形式表示的秒</td></tr><tr><td>秒</td><td>%f</td><td>微秒</td></tr><tr><td>时分秒</td><td>%T</td><td>返回当前时刻的时分秒（hh:mm:ss)</td></tr></tbody></table> <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span>     date_format<span class="token punctuation">(</span><span class="token string">"2020-07-29 10:31:10"</span><span class="token punctuation">,</span> <span class="token string">"%Y-%m-%d"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="4"><li><strong>datediff-求留存率</strong><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">with</span> a1 <span class="token keyword">as</span> <span class="token punctuation">(</span><span class="token keyword">select</span>     hit_date<span class="token punctuation">,</span>    user_account<span class="token keyword">from</span>     computer_view<span class="token punctuation">.</span><span class="token keyword">data</span><span class="token keyword">where</span>     hit_date <span class="token operator">between</span> <span class="token string">'2019-04-25'</span> <span class="token operator">and</span> <span class="token string">'2019-05-13'</span>    <span class="token operator">and</span>     btn_information <span class="token operator">is</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">)</span><span class="token punctuation">,</span>a2 <span class="token keyword">as</span> <span class="token punctuation">(</span><span class="token keyword">select</span>     hit_date<span class="token punctuation">,</span>    user_account<span class="token keyword">from</span>     computer_view<span class="token punctuation">.</span><span class="token keyword">data</span><span class="token keyword">where</span>     hit_date <span class="token operator">between</span> <span class="token string">'2019-04-25'</span> <span class="token operator">and</span> <span class="token string">'2019-05-13'</span>    <span class="token operator">and</span>     btn_information <span class="token operator">is</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">)</span><span class="token keyword">select</span> a1<span class="token punctuation">.</span>hit_date<span class="token punctuation">,</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">distinct</span> a1<span class="token punctuation">.</span>user_account<span class="token punctuation">)</span> uv<span class="token punctuation">,</span><span class="token comment">---一次性求次1日，次3日， 次7日留存，此方法不能计算pv，会造成笛卡尔积</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">distinct</span> <span class="token keyword">case</span> <span class="token keyword">when</span> datediff<span class="token punctuation">(</span>a2<span class="token punctuation">.</span>hit_date<span class="token punctuation">,</span> a1<span class="token punctuation">.</span>hit_date<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token keyword">then</span> a1<span class="token punctuation">.</span>user_account <span class="token keyword">else</span> <span class="token boolean">null</span> <span class="token keyword">end</span> <span class="token punctuation">)</span> next_day<span class="token punctuation">,</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">distinct</span> <span class="token keyword">case</span> <span class="token keyword">when</span> datediff<span class="token punctuation">(</span>a2<span class="token punctuation">.</span>hit_date<span class="token punctuation">,</span> a1<span class="token punctuation">.</span>hit_date<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">3</span> <span class="token keyword">then</span> a1<span class="token punctuation">.</span>user_account <span class="token keyword">else</span> <span class="token boolean">null</span> <span class="token keyword">end</span> <span class="token punctuation">)</span> three_day<span class="token punctuation">,</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">distinct</span> <span class="token keyword">case</span> <span class="token keyword">when</span> datediff<span class="token punctuation">(</span>a2<span class="token punctuation">.</span>hit_date<span class="token punctuation">,</span> a1<span class="token punctuation">.</span>hit_date<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">7</span> <span class="token keyword">then</span> a1<span class="token punctuation">.</span>user_account <span class="token keyword">else</span> <span class="token boolean">null</span> <span class="token keyword">end</span> <span class="token punctuation">)</span> seven_day<span class="token keyword">from</span> a1 <span class="token keyword">join</span> a2 <span class="token keyword">on</span> a1<span class="token punctuation">.</span>user_account <span class="token operator">=</span> a2<span class="token punctuation">.</span>user_account<span class="token keyword">group</span> <span class="token keyword">by</span> a1<span class="token punctuation">.</span>hit_date<span class="token keyword">order</span> <span class="token keyword">by</span> a1<span class="token punctuation">.</span>hit_date<span class="token keyword">limit</span> <span class="token number">100</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p> date_add 求留存率</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">---步骤1：统计每天的uv</span><span class="token comment">---步骤2： - 统计10-15号每天的次日留存数， 统计次3、7日留存只需将1换为3、7</span><span class="token keyword">with</span> a1 <span class="token keyword">as</span> <span class="token punctuation">(</span>    <span class="token keyword">select</span>         user_account<span class="token punctuation">,</span>        hit_date    <span class="token keyword">from</span>         computer_view<span class="token punctuation">.</span><span class="token keyword">data</span>    <span class="token keyword">where</span>         hit_date <span class="token operator">between</span>  <span class="token string">'2018-11-10'</span> <span class="token operator">and</span> <span class="token string">'2018-11-15'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>a2 <span class="token keyword">as</span> <span class="token punctuation">(</span>        <span class="token keyword">select</span>         user_account<span class="token punctuation">,</span>        hit_date    <span class="token keyword">from</span>         computer_view<span class="token punctuation">.</span><span class="token keyword">data</span>    <span class="token keyword">where</span>         hit_date <span class="token operator">between</span> <span class="token string">'2018-11-10'</span> <span class="token operator">and</span> <span class="token string">'2018-11-25'</span><span class="token punctuation">)</span><span class="token keyword">select</span>     a1<span class="token punctuation">.</span>hit_date<span class="token punctuation">,</span>    <span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">distinct</span> a1<span class="token punctuation">.</span>user_account<span class="token punctuation">)</span> <span class="token keyword">as</span> uv<span class="token keyword">from</span>    a1 <span class="token keyword">join</span> a2 <span class="token keyword">on</span> a1<span class="token punctuation">.</span>user_account <span class="token operator">=</span> a2<span class="token punctuation">.</span>user_account<span class="token keyword">WHERE</span>       a2<span class="token punctuation">.</span>hit_date <span class="token operator">=</span>  date_add<span class="token punctuation">(</span>a1<span class="token punctuation">.</span>hit_date<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">group</span> <span class="token keyword">by</span>     a1<span class="token punctuation">.</span>hit_date<span class="token keyword">order</span> <span class="token keyword">BY</span>    a1<span class="token punctuation">.</span>hit_date步骤<span class="token number">3</span>：计算留存率<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>计算留存率的其他写法-迷神</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 留存sql优化</span><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">from</span><span class="token punctuation">(</span>    <span class="token keyword">select</span> userid<span class="token punctuation">,</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">from</span><span class="token punctuation">(</span>        <span class="token keyword">select</span> t1<span class="token punctuation">.</span>userid<span class="token punctuation">,</span>                t1<span class="token punctuation">.</span>statdate        <span class="token keyword">from</span>            table1 t1        <span class="token keyword">where</span>            t1<span class="token punctuation">.</span>statdate <span class="token operator">=</span> ${上<span class="token number">30</span>天日期}            <span class="token operator">and</span> t1<span class="token punctuation">.</span>statdate <span class="token operator">&lt;=</span> ${上一天日期}        <span class="token keyword">group</span> <span class="token keyword">by</span>            t1<span class="token punctuation">.</span>userid<span class="token punctuation">,</span>            t1<span class="token punctuation">.</span>statdate        <span class="token punctuation">)</span> s1    <span class="token keyword">group</span> <span class="token keyword">by</span>        userid    <span class="token keyword">having</span>        <span class="token function">count</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token number">2</span>    <span class="token punctuation">)</span> R1<span class="token comment">--此sql为一个样例，计算连续跟任意都适用，至于计算第N天，只需要更改下日期过滤条件，变成=$[上N天日期]，=${上一天日期}。 </span><span class="token comment">--另外，这种方式适合跑当前周期数据，如果跑历史数据，可以写个循环。当然，最暴力还是直接用userid 关联。</span><span class="token comment">--这种写法，更多是针对现在大部分分布式处理平台的特性，尽可能将数据合理均匀分片，每台服务器各自运算自己的，最后汇总。 尽可能少用 count distinct 这种写法，因为无法利用分片的特性。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>留存率的另一种写法-勇哥</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">with</span> a1 <span class="token keyword">as</span> <span class="token punctuation">(</span><span class="token keyword">select</span>hit_date<span class="token punctuation">,</span>user_account<span class="token punctuation">,</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">as</span> hit_count<span class="token keyword">from</span> apache_computer_view<span class="token punctuation">.</span>client_android_log<span class="token keyword">WHERE</span> hit_date <span class="token operator">between</span> <span class="token string">'2020-04-01'</span> <span class="token operator">and</span>  <span class="token string">'2020-04-07'</span><span class="token operator">and</span>btn_navigation  <span class="token operator">like</span> <span class="token string">"%查询办理%"</span><span class="token keyword">group</span> <span class="token keyword">by</span>    <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>a2 <span class="token keyword">as</span> <span class="token punctuation">(</span><span class="token keyword">select</span>hit_date<span class="token punctuation">,</span>    user_account<span class="token punctuation">,</span>    <span class="token function">count</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">as</span> hit_count<span class="token keyword">from</span> apache_computer_view<span class="token punctuation">.</span>client_android_log<span class="token keyword">WHERE</span>hit_date <span class="token operator">between</span> <span class="token string">'2020-04-01'</span> <span class="token operator">and</span>  <span class="token string">'2020-04-07'</span><span class="token operator">and</span>btn_navigation  <span class="token operator">like</span> <span class="token string">"%查询办理%"</span><span class="token keyword">group</span> <span class="token keyword">by</span>    <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">select</span> a1<span class="token punctuation">.</span>hit_date <span class="token keyword">as</span> one<span class="token punctuation">,</span>a2<span class="token punctuation">.</span>hit_date <span class="token keyword">as</span> two<span class="token punctuation">,</span>datediff<span class="token punctuation">(</span>a2<span class="token punctuation">.</span>hit_date<span class="token punctuation">,</span> a1<span class="token punctuation">.</span>hit_date<span class="token punctuation">)</span> <span class="token keyword">as</span> cha<span class="token punctuation">,</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">distinct</span> a2<span class="token punctuation">.</span>user_account<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">sum</span><span class="token punctuation">(</span>a2<span class="token punctuation">.</span>hit_count<span class="token punctuation">)</span><span class="token keyword">from</span>    a1 <span class="token keyword">left</span> <span class="token keyword">join</span> a2 <span class="token keyword">on</span> a1<span class="token punctuation">.</span>user_account <span class="token operator">=</span> a2<span class="token punctuation">.</span>user_account<span class="token keyword">group</span> <span class="token keyword">by</span>    <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token keyword">having</span>    cha <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token keyword">order</span> <span class="token keyword">by</span>    <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span>​<span class="token punctuation">`</span><span class="token punctuation">`</span><span class="token punctuation">`</span> <span class="token operator">-</span> 计算月留存率的简单写法：筛选出在两个月份出现的用户​<span class="token punctuation">`</span><span class="token punctuation">`</span><span class="token punctuation">`</span><span class="token keyword">sql</span><span class="token keyword">with</span> a1 <span class="token keyword">as</span> <span class="token punctuation">(</span><span class="token keyword">select</span>     user_account<span class="token punctuation">,</span>    <span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">distinct</span> <span class="token keyword">month</span> <span class="token punctuation">(</span>hit_date<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">as</span> c<span class="token keyword">from</span>    android_log <span class="token keyword">where</span>      hit_date <span class="token operator">between</span> <span class="token string">'2019-03-01'</span> <span class="token operator">and</span> <span class="token string">'2019-04-31'</span><span class="token keyword">group</span> <span class="token keyword">by</span>  user_account<span class="token keyword">having</span>   c <span class="token operator">=</span> <span class="token number">2</span><span class="token keyword">union</span> <span class="token keyword">select</span>     user_account<span class="token punctuation">,</span>    <span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">distinct</span> <span class="token keyword">month</span> <span class="token punctuation">(</span>hit_date<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">as</span> c<span class="token keyword">from</span>     ios_log <span class="token keyword">where</span>      hit_date <span class="token operator">between</span> <span class="token string">'2019-03-01'</span> <span class="token operator">and</span> <span class="token string">'2019-04-31'</span><span class="token keyword">group</span> <span class="token keyword">by</span>  user_account<span class="token keyword">having</span>   c <span class="token operator">=</span> <span class="token number">2</span>    <span class="token punctuation">)</span><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">distinct</span> user_account<span class="token punctuation">)</span> <span class="token keyword">as</span> uv <span class="token keyword">from</span> a1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="5"><li><p><strong>日期转换</strong></p><p>把2020-12-01日期字段改成：2020-12-01 这样的形式</p><pre class="line-numbers language-none"><code class="language-none">from_unixtime(unix_timestamp(hit_date,'yyyymmdd'),'yyyy-mm-dd')<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h2 id="数据分组与透视"><a href="#数据分组与透视" class="headerlink" title="数据分组与透视"></a>数据分组与透视</h2><ol><li><p><strong>对分组后的数据进行聚合运算</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span>         <span class="token keyword">year</span><span class="token punctuation">(</span>ymd<span class="token punctuation">)</span><span class="token punctuation">,</span>     <span class="token function">avg</span><span class="token punctuation">(</span>price_close<span class="token punctuation">)</span> <span class="token comment">--- 对结果进行分类</span><span class="token keyword">from</span>         stocks<span class="token keyword">where</span>         exchange <span class="token operator">=</span> <span class="token string">'nasdaq'</span><span class="token keyword">group</span> <span class="token keyword">by</span>         <span class="token keyword">year</span><span class="token punctuation">(</span>ymd<span class="token punctuation">)</span><span class="token keyword">order</span> <span class="token keyword">by</span>         <span class="token keyword">year</span><span class="token punctuation">(</span>ymd<span class="token punctuation">)</span> <span class="token keyword">desc</span><span class="token punctuation">;</span>  <span class="token comment">--desc 从高到低排列</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>对聚合后的数据进行条件筛选</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span>         deparment<span class="token punctuation">,</span>     <span class="token function">avg</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span> <span class="token keyword">as</span> average <span class="token keyword">from</span>          salary_info<span class="token keyword">group</span> <span class="token keyword">by</span>         deparment <span class="token keyword">having</span>         average <span class="token operator">&gt;</span> <span class="token number">3000</span><span class="token comment">--- having 子句来限制输出结果--- 查找平均工资大于3000的部门</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><ul><li>having 与 where 的区别：<blockquote><p>Where 是一个约束声明，使用Where约束来自数据库的数据，Where是在结果返回之前起作用的，Where中不能使用聚合函数。<br>Having是一个过滤声明，是在查询返回结果集以后对查询结果进行的过滤操作，在Having中可以使用聚合函数。</p></blockquote></li></ul><ol start="3"><li><strong>group_concat()函数</strong><blockquote><p>对以下数据进行分组处理</p></blockquote></li></ol><table><thead><tr><th>id</th><th>score</th></tr></thead><tbody><tr><td>1</td><td>78</td></tr><tr><td>2</td><td>52</td></tr><tr><td>1</td><td>69</td></tr><tr><td>2</td><td>45</td></tr></tbody></table> <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span>    id<span class="token punctuation">,</span>    group_concat<span class="token punctuation">(</span>score<span class="token punctuation">)</span> <span class="token keyword">as</span> g_score<span class="token keyword">from</span>     <span class="token keyword">tables</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>得到结果如下</p></blockquote><table><thead><tr><th>id</th><th>score</th></tr></thead><tbody><tr><td>1</td><td>78,69</td></tr><tr><td>2</td><td>52,45</td></tr></tbody></table><ol start="4"><li><strong>rollup 函数用法</strong></li></ol><ul><li> 需求背景： 求每个省份的销量，然后求每个省份下城市的销量，汇总到一张表中。</li></ul><blockquote><p>写法1：</p></blockquote> <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span>     province<span class="token punctuation">,</span>    <span class="token boolean">null</span> <span class="token keyword">as</span> city<span class="token punctuation">,</span>    <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">order</span><span class="token punctuation">)</span><span class="token keyword">from</span>     table_sales<span class="token keyword">group</span> <span class="token keyword">by</span>     province<span class="token keyword">union</span> <span class="token keyword">all</span> <span class="token keyword">select</span>     province<span class="token punctuation">,</span>    city<span class="token punctuation">,</span>    <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">order</span><span class="token punctuation">)</span><span class="token keyword">from</span>     table_sales<span class="token keyword">group</span> <span class="token keyword">by</span>     province<span class="token punctuation">,</span>    city<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>写法2：<br> </p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span>  province<span class="token punctuation">,</span> city<span class="token punctuation">,</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">order</span><span class="token punctuation">)</span><span class="token keyword">from</span> table_sales<span class="token keyword">group</span> <span class="token keyword">by</span>  province<span class="token punctuation">,</span>city<span class="token keyword">with rollup</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p></p></blockquote><blockquote><p>得到结果如下：</p></blockquote><table><thead><tr><th>province</th><th>city</th><th>sum(order)</th></tr></thead><tbody><tr><td>陕西</td><td>null</td><td>50</td></tr><tr><td>陕西</td><td>西安</td><td>20</td></tr><tr><td>陕西</td><td>渭南</td><td>10</td></tr><tr><td>陕西</td><td>汉中</td><td>20</td></tr><tr><td>北京</td><td>北京</td><td>24</td></tr><tr><td>null</td><td>null</td><td>74</td></tr></tbody></table><ol start="5"><li>数据透视表</li></ol><ul><li> 将下表进行按照年份和季度进行透视汇总</li></ul><table><thead><tr><th>年</th><th>季度</th><th>销售量</th></tr></thead><tbody><tr><td>1991</td><td>1</td><td>11</td></tr><tr><td>1991</td><td>2</td><td>12</td></tr><tr><td>1991</td><td>3</td><td>13</td></tr><tr><td>1991</td><td>4</td><td>14</td></tr><tr><td>1992</td><td>1</td><td>21</td></tr><tr><td>1992</td><td>2</td><td>22</td></tr><tr><td>1992</td><td>3</td><td>23</td></tr><tr><td>1992</td><td>4</td><td>24</td></tr></tbody></table> <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> 年<span class="token punctuation">,</span><span class="token function">sum</span><span class="token punctuation">(</span> <span class="token keyword">case</span> <span class="token keyword">when</span>  季度 <span class="token operator">=</span> <span class="token number">1</span> <span class="token keyword">then</span> 销售量  <span class="token keyword">else</span> <span class="token boolean">null</span> <span class="token keyword">end</span> <span class="token punctuation">)</span> 一季度<span class="token punctuation">,</span><span class="token function">sum</span><span class="token punctuation">(</span> <span class="token keyword">case</span> <span class="token keyword">when</span> 季度 <span class="token operator">=</span> <span class="token number">2</span> <span class="token keyword">then</span> 销售量 <span class="token keyword">else</span> <span class="token boolean">null</span> <span class="token keyword">end</span> <span class="token punctuation">)</span> <span class="token keyword">as</span> 二季度<span class="token punctuation">,</span><span class="token function">sum</span><span class="token punctuation">(</span> <span class="token keyword">case</span> <span class="token keyword">when</span> 季度 <span class="token operator">=</span> <span class="token number">3</span> <span class="token keyword">then</span> 销售量 <span class="token keyword">else</span> <span class="token boolean">null</span> <span class="token keyword">end</span> <span class="token punctuation">)</span> <span class="token keyword">as</span>  三季度<span class="token punctuation">,</span><span class="token function">sum</span><span class="token punctuation">(</span> <span class="token keyword">case</span> <span class="token keyword">when</span> 季度 <span class="token operator">=</span> <span class="token number">4</span> <span class="token keyword">then</span> 销售量 <span class="token keyword">else</span> <span class="token boolean">null</span> <span class="token keyword">end</span> <span class="token punctuation">)</span> <span class="token keyword">as</span> 四季度<span class="token keyword">from</span> page <span class="token keyword">group</span> <span class="token keyword">by</span> 年<span class="token keyword">order</span> <span class="token keyword">by</span> 年<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>查询结果如下：</p></blockquote><table><thead><tr><th>年</th><th>一季度</th><th>二季度</th><th>三季度</th><th>四季度</th></tr></thead><tbody><tr><td>1991</td><td>11</td><td>12</td><td>13</td><td>14</td></tr><tr><td>1992</td><td>21</td><td>22</td><td>23</td><td>24</td></tr></tbody></table><ul><li>统计各部门男女分别有多少人</li></ul><table><thead><tr><th>姓名</th><th>部门</th><th>性别</th></tr></thead><tbody><tr><td>甲</td><td>A</td><td>男</td></tr><tr><td>乙</td><td>A</td><td>男</td></tr><tr><td>丙</td><td>B</td><td>女</td></tr><tr><td>丁</td><td>A</td><td>女</td></tr><tr><td>张</td><td>B</td><td>男</td></tr><tr><td>赵</td><td>B</td><td>女</td></tr></tbody></table> <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token string">'部门'</span><span class="token punctuation">,</span><span class="token function">sum</span><span class="token punctuation">(</span> <span class="token keyword">case</span> <span class="token keyword">when</span> 性别 <span class="token operator">=</span> <span class="token string">'男'</span> <span class="token keyword">then</span> <span class="token number">1</span>  <span class="token keyword">else</span> <span class="token boolean">null</span> <span class="token keyword">end</span> <span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token string">'男'</span><span class="token punctuation">,</span><span class="token function">sum</span><span class="token punctuation">(</span> <span class="token keyword">case</span> <span class="token keyword">when</span> 性别 <span class="token operator">=</span> <span class="token string">'女'</span> <span class="token keyword">then</span> <span class="token number">1</span> <span class="token keyword">else</span> <span class="token boolean">null</span> <span class="token keyword">end</span> <span class="token punctuation">)</span> <span class="token keyword">as</span>  <span class="token string">'女'</span><span class="token keyword">from</span> table1<span class="token keyword">group</span> <span class="token keyword">by</span> <span class="token string">'部门'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>得到结果如下:</p></blockquote><table><thead><tr><th>部门</th><th>男</th><th>女</th></tr></thead><tbody><tr><td>A</td><td>2</td><td>1</td></tr><tr><td>B</td><td>1</td><td>2</td></tr></tbody></table><p> <code>rollup</code> 函数输出结果，不会有 <code>null, null, null, city</code> 值， 和 <code>cube</code> 的区别在于： <code>cube</code> 是维度更细的统计，假设数据有 <code>n</code> 个维度， 那么 <code>rollup</code> 会有 <code>n</code> 个聚合，<code>cube</code> 会有 <code>2n</code> 个聚合。 </p><p>解法1：分别写5个sql，这种方法太低效了， 还需要在excel中进行合并。<br> </p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span>order_id<span class="token punctuation">)</span>  <span class="token keyword">as</span> sales <span class="token keyword">from</span> table1 <span class="token comment">---全国成交量</span><span class="token keyword">select</span> area<span class="token punctuation">,</span> <span class="token function">count</span><span class="token punctuation">(</span>order_id<span class="token punctuation">)</span> <span class="token keyword">as</span> sales <span class="token keyword">from</span> table1 <span class="token keyword">group</span> <span class="token keyword">by</span> area<span class="token comment">--大区成交量</span><span class="token keyword">select</span> area<span class="token punctuation">,</span> province<span class="token punctuation">,</span> <span class="token function">count</span><span class="token punctuation">(</span>order_id<span class="token punctuation">)</span> <span class="token keyword">as</span> sales <span class="token keyword">from</span> table1 <span class="token keyword">group</span> <span class="token keyword">by</span> area<span class="token punctuation">,</span> province<span class="token comment">--省成交量</span><span class="token keyword">select</span> area<span class="token punctuation">,</span> province<span class="token punctuation">,</span> city<span class="token punctuation">,</span> <span class="token function">count</span><span class="token punctuation">(</span>order_id<span class="token punctuation">)</span> <span class="token keyword">as</span> sales <span class="token keyword">from</span> table1 <span class="token keyword">group</span> <span class="token keyword">by</span>  area<span class="token punctuation">,</span> province<span class="token punctuation">,</span> city<span class="token comment">---城市成交量</span><span class="token keyword">select</span> area<span class="token punctuation">,</span> province<span class="token punctuation">,</span> city<span class="token punctuation">,</span> shop<span class="token punctuation">,</span> <span class="token function">count</span><span class="token punctuation">(</span>order_id<span class="token punctuation">)</span> <span class="token keyword">as</span> sales <span class="token keyword">from</span> table1 <span class="token keyword">group</span> <span class="token keyword">by</span> area<span class="token punctuation">,</span> province<span class="token punctuation">,</span> city<span class="token punctuation">,</span> shop<span class="token comment">--店铺成交量</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p></p><blockquote><p>解法2：通过 union 和 union all 对查询结果进行纵向合并—sql中有很多 null, 这是因为 union all 拼接的两个表的列数需要相等。</p></blockquote> <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token boolean">null</span><span class="token punctuation">,</span> <span class="token boolean">null</span><span class="token punctuation">,</span> <span class="token boolean">null</span><span class="token punctuation">,</span> <span class="token boolean">null</span><span class="token punctuation">,</span> <span class="token boolean">null</span><span class="token punctuation">,</span> <span class="token function">count</span><span class="token punctuation">(</span>order_id<span class="token punctuation">)</span>  <span class="token keyword">as</span> sales <span class="token keyword">from</span> table1 <span class="token comment">---全国成交量</span><span class="token keyword">union</span> <span class="token keyword">all</span> <span class="token keyword">select</span> <span class="token boolean">null</span><span class="token punctuation">,</span> <span class="token boolean">null</span><span class="token punctuation">,</span> <span class="token boolean">null</span><span class="token punctuation">,</span><span class="token boolean">null</span><span class="token punctuation">,</span>  area<span class="token punctuation">,</span> <span class="token function">count</span><span class="token punctuation">(</span>order_id<span class="token punctuation">)</span> <span class="token keyword">as</span> sales <span class="token keyword">from</span> table1 <span class="token keyword">group</span> <span class="token keyword">by</span> area<span class="token comment">--大区成交量</span><span class="token keyword">union</span> <span class="token keyword">all</span> <span class="token keyword">select</span> <span class="token boolean">null</span><span class="token punctuation">,</span> <span class="token boolean">null</span><span class="token punctuation">,</span><span class="token boolean">null</span><span class="token punctuation">,</span>  area<span class="token punctuation">,</span> province<span class="token punctuation">,</span> <span class="token function">count</span><span class="token punctuation">(</span>order_id<span class="token punctuation">)</span> <span class="token keyword">as</span> sales <span class="token keyword">from</span> table1 <span class="token keyword">group</span> <span class="token keyword">by</span> area<span class="token punctuation">,</span> province<span class="token comment">--省成交量</span><span class="token keyword">union</span> <span class="token keyword">all</span> <span class="token keyword">select</span> <span class="token boolean">null</span><span class="token punctuation">,</span> <span class="token boolean">null</span><span class="token punctuation">,</span> area<span class="token punctuation">,</span> province<span class="token punctuation">,</span> city<span class="token punctuation">,</span> <span class="token function">count</span><span class="token punctuation">(</span>order_id<span class="token punctuation">)</span> <span class="token keyword">as</span> sales <span class="token keyword">from</span> table1 <span class="token keyword">group</span> <span class="token keyword">by</span>  area<span class="token punctuation">,</span> province<span class="token punctuation">,</span> city<span class="token comment">---城市成交量</span><span class="token keyword">union</span> <span class="token keyword">all</span><span class="token keyword">select</span> <span class="token boolean">null</span><span class="token punctuation">,</span>  area<span class="token punctuation">,</span> province<span class="token punctuation">,</span> city<span class="token punctuation">,</span> shop<span class="token punctuation">,</span> <span class="token function">count</span><span class="token punctuation">(</span>order_id<span class="token punctuation">)</span> <span class="token keyword">as</span> sales <span class="token keyword">from</span> table1 <span class="token keyword">group</span> <span class="token keyword">by</span> area<span class="token punctuation">,</span> province<span class="token punctuation">,</span> city<span class="token punctuation">,</span> shop <span class="token comment">--店铺成交量</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果如下：</p><p><img src="https://i.loli.net/2019/06/10/5cfe6c219ca3f57084.png" alt="sql结果"></p><p>解法3：用<code>grouping sets</code>来根据不同维度组合进行聚合</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token boolean">null</span><span class="token punctuation">,</span> area<span class="token punctuation">,</span> province<span class="token punctuation">,</span> city<span class="token punctuation">,</span> shop<span class="token keyword">from</span> table1<span class="token keyword">group</span> <span class="token keyword">by</span> <span class="token boolean">null</span><span class="token punctuation">,</span> area<span class="token punctuation">,</span> province<span class="token punctuation">,</span> city<span class="token punctuation">,</span> shopgrouping <span class="token keyword">set</span><span class="token punctuation">(</span> <span class="token boolean">null</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">,</span> area<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">,</span> area<span class="token punctuation">,</span>province<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">,</span> area<span class="token punctuation">,</span> province<span class="token punctuation">,</span> city<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">,</span>area<span class="token punctuation">,</span> province<span class="token punctuation">,</span> city<span class="token punctuation">,</span>shop<span class="token punctuation">)</span> <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>得到结果与利用 <code>union all</code>拼接结果相同。<code>group by</code>后面的字段表示要分组聚合的全部字段， <code>grouping sets</code>后面为 <code>group by</code> 后面各种字段的组合。</p><p>解法4：<code>cube</code>函数， 对<code>group by</code>的维度的所有组合进行聚合。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span>  area<span class="token punctuation">,</span> province<span class="token punctuation">,</span> city<span class="token punctuation">,</span> shop<span class="token keyword">from</span> table1<span class="token keyword">group</span> <span class="token keyword">by</span>  area<span class="token punctuation">,</span> province<span class="token punctuation">,</span> city<span class="token punctuation">,</span> shop<span class="token keyword">with</span> cube<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>cube</code> 会先对全部数据进行聚合，即 <code>null,null,null,null</code> 进行聚合，(只是不像解法3一样，显示null列， 如需显示只要加入null即可） 然后对 <code>area, null, null, null</code> 进行聚合，</p><hr><h2 id="窗口函数"><a href="#窗口函数" class="headerlink" title="窗口函数"></a>窗口函数</h2><table><thead><tr><th>函数名</th><th>定义</th></tr></thead><tbody><tr><td>over()</td><td>指定分析函数工作的数据窗口大小，这个数据窗口大小可能会随着行的变化而变化</td></tr><tr><td><strong>常跟的函数</strong></td><td><strong>说明</strong></td></tr><tr><td>current row</td><td>当前行</td></tr><tr><td>n preceding</td><td>往前n行数据</td></tr><tr><td>n following</td><td>往后n行数据</td></tr><tr><td>unbounded</td><td>起点</td></tr><tr><td>uvbounded preceding</td><td>表示从前面的起点开始</td></tr><tr><td>unbounded following</td><td>表示到后面的终点</td></tr><tr><td>lag(col, n)</td><td>往前第n行数据</td></tr><tr><td>lead(col, n)</td><td>往后第n行数据</td></tr><tr><td>ntile(n)</td><td>把有序分区中的行分发到指定数据的组中， 各个组有编号，编号从1开始，ntile返回此行所属组的编号</td></tr><tr><td>first_value()</td><td>返回组中数据窗口的第一个值</td></tr><tr><td>last_value()</td><td>返回组中数据窗口的最后一个值</td></tr></tbody></table><ol><li><strong>聚合函数+over()</strong></li></ol><blockquote><p>商业表如下</p></blockquote><table><thead><tr><th>shop_name</th><th>order_date</th><th>cost</th></tr></thead><tbody><tr><td>A</td><td>2017-01-01</td><td>10</td></tr><tr><td>B</td><td>2017-01-01</td><td>15</td></tr><tr><td>C</td><td>2017-01-01</td><td>20</td></tr><tr><td>A</td><td>2017-01-02</td><td>25</td></tr><tr><td>B</td><td>2017-01-02</td><td>25</td></tr><tr><td>C</td><td>2017-01-02</td><td>20</td></tr><tr><td>A</td><td>2017-01-03</td><td>15</td></tr><tr><td>B</td><td>2017-01-03</td><td>10</td></tr><tr><td>C</td><td>2017-01-03</td><td>20</td></tr></tbody></table><ul><li>求每个店铺的每天效率和全部总销量</li></ul><blockquote><p>写法1</p></blockquote> <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span>    shop_name<span class="token punctuation">,</span>    order_date<span class="token punctuation">,</span>    cost<span class="token punctuation">,</span>    <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token function">sum</span><span class="token punctuation">(</span>cost<span class="token punctuation">)</span> <span class="token keyword">from</span> business<span class="token punctuation">)</span> <span class="token keyword">as</span> sum_cost<span class="token keyword">from</span>     business<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>写法2<br> </p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"> <span class="token keyword">select</span>     shop_name<span class="token punctuation">,</span>    order_date<span class="token punctuation">,</span>    cost<span class="token punctuation">,</span>    <span class="token function">sum</span><span class="token punctuation">(</span>cost<span class="token punctuation">)</span><span class="token keyword">over</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> sum_cost<span class="token keyword">from</span>     business<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p></p></blockquote><blockquote><p>得到结果如下</p></blockquote><table><thead><tr><th>shop_name</th><th>order_date</th><th>cost</th><th>sum_cost</th></tr></thead><tbody><tr><td>A</td><td>2017-01-01</td><td>10</td><td>150</td></tr><tr><td>B</td><td>2017-01-01</td><td>15</td><td>150</td></tr><tr><td>C</td><td>2017-01-01</td><td>20</td><td>150</td></tr><tr><td>A</td><td>2017-01-02</td><td>25</td><td>150</td></tr><tr><td>B</td><td>2017-01-02</td><td>25</td><td>150</td></tr><tr><td>C</td><td>2017-01-02</td><td>20</td><td>150</td></tr><tr><td>A</td><td>2017-01-03</td><td>15</td><td>150</td></tr><tr><td>B</td><td>2017-01-03</td><td>10</td><td>150</td></tr><tr><td>C</td><td>2017-01-03</td><td>20</td><td>150</td></tr></tbody></table><ol start="2"><li><strong>partition by 子句</strong></li></ol><ul><li>查询各店铺日销量明细及各店铺平均每日销量</li></ul><blockquote><p>写法1<br> </p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">with</span> a1 <span class="token keyword">as</span> <span class="token punctuation">(</span>    <span class="token keyword">select</span>         shop_name<span class="token punctuation">,</span>order_name<span class="token punctuation">,</span> cost    <span class="token keyword">from</span>         business<span class="token punctuation">)</span><span class="token punctuation">,</span>a2 <span class="token keyword">as</span> <span class="token punctuation">(</span>    <span class="token keyword">select</span>         shop_name<span class="token punctuation">,</span>        <span class="token function">avg</span><span class="token punctuation">(</span>cost<span class="token punctuation">)</span> <span class="token keyword">as</span> avg_cost    <span class="token keyword">from</span>        business    <span class="token keyword">group</span> <span class="token keyword">by</span>         shop_name<span class="token punctuation">)</span><span class="token keyword">select</span>     a1<span class="token punctuation">.</span>shop_name<span class="token punctuation">,</span>    a1<span class="token punctuation">.</span>order_name<span class="token punctuation">,</span>    a1<span class="token punctuation">.</span>cost<span class="token punctuation">,</span>    a2<span class="token punctuation">.</span>avg_cost<span class="token keyword">from</span>     a1 <span class="token keyword">left</span> <span class="token keyword">join</span> a2 <span class="token keyword">on</span> a1<span class="token punctuation">.</span>shop_name <span class="token operator">=</span> a2<span class="token punctuation">.</span>shop_name<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p></p></blockquote><blockquote><p>写法2</p></blockquote> <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"> <span class="token keyword">select</span>     shop_name<span class="token punctuation">,</span>    order_name<span class="token punctuation">,</span>    cost<span class="token punctuation">,</span>    <span class="token function">avg</span><span class="token punctuation">(</span>cost<span class="token punctuation">)</span><span class="token keyword">over</span><span class="token punctuation">(</span><span class="token keyword">partition</span> <span class="token keyword">by</span> shop_name<span class="token punctuation">)</span> <span class="token keyword">as</span> avg_cost<span class="token keyword">from</span>    business<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>输出结果如下：</p></blockquote><table><thead><tr><th>shop_name</th><th>order_date</th><th>cost</th><th>age_cost</th></tr></thead><tbody><tr><td>A</td><td>2017-01-01</td><td>10</td><td>16.7</td></tr><tr><td>B</td><td>2017-01-01</td><td>15</td><td>16.7</td></tr><tr><td>C</td><td>2017-01-01</td><td>20</td><td>20</td></tr><tr><td>A</td><td>2017-01-02</td><td>25</td><td>16.7</td></tr><tr><td>B</td><td>2017-01-02</td><td>25</td><td>16.7</td></tr><tr><td>C</td><td>2017-01-02</td><td>20</td><td>20</td></tr><tr><td>A</td><td>2017-01-03</td><td>15</td><td>16.7</td></tr><tr><td>B</td><td>2017-01-03</td><td>10</td><td>16.7</td></tr><tr><td>C</td><td>2017-01-03</td><td>20</td><td>20</td></tr></tbody></table><ol start="3"><li> order by 子句</li></ol><ul><li>求不同店铺每日明细，及按照日期进行累加<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"> <span class="token keyword">select</span>     shop_name<span class="token punctuation">,</span>    order_name<span class="token punctuation">,</span>    cost<span class="token punctuation">,</span>    <span class="token function">sum</span><span class="token punctuation">(</span>cost<span class="token punctuation">)</span><span class="token keyword">over</span><span class="token punctuation">(</span><span class="token keyword">partition</span> <span class="token keyword">by</span> shop_name <span class="token keyword">order</span> <span class="token keyword">by</span> order_date<span class="token punctuation">)</span>  <span class="token keyword">as</span> sum_cost    <span class="token comment">---只根据日期进行累加，不区分店铺。先排序，之后按照顺序，从起到到当前行进行求和</span>    <span class="token comment">---sum(cost)over( order by orderdate   rows between unbounded preceding and  current row)</span>    <span class="token comment">--- 按照日期进行排序，并将当前日期和前一天、后一天数据求和</span>    <span class="token comment">---sum(cost) over(order by  orderdate  rows between 1   preceding  between  1 following ) </span><span class="token keyword">from</span>     business    <span class="token comment">--- sum没有问题，但是count(distinct user_account) 就不能用这种方法</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>输出结果如下：</p></blockquote></li></ul><table><thead><tr><th>shop_name</th><th>order_date</th><th>cost</th><th>age_cost</th></tr></thead><tbody><tr><td>A</td><td>2017-01-01</td><td>10</td><td>10</td></tr><tr><td>A</td><td>2017-01-02</td><td>25</td><td>35</td></tr><tr><td>A</td><td>2017-01-03</td><td>15</td><td>50</td></tr><tr><td>B</td><td>2017-01-01</td><td>15</td><td>15</td></tr><tr><td>B</td><td>2017-01-02</td><td>25</td><td>40</td></tr><tr><td>B</td><td>2017-01-03</td><td>10</td><td>50</td></tr><tr><td>C</td><td>2017-01-01</td><td>20</td><td>60</td></tr><tr><td>C</td><td>2017-01-02</td><td>20</td><td>60</td></tr><tr><td>C</td><td>2017-01-03</td><td>20</td><td>60</td></tr></tbody></table><p>求每个人将按照日期进行累加的消费金额</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> name<span class="token punctuation">,</span> <span class="token function">sum</span><span class="token punctuation">(</span>cost<span class="token punctuation">)</span> <span class="token keyword">over</span> <span class="token punctuation">(</span> <span class="token keyword">partition</span> <span class="token keyword">by</span> name <span class="token keyword">order</span> <span class="token keyword">by</span>  orderdate  <span class="token keyword">row</span> <span class="token operator">between</span> <span class="token keyword">unbounded</span> <span class="token keyword">preceding</span> <span class="token operator">and</span> <span class="token keyword">current</span> <span class="token keyword">row</span><span class="token punctuation">)</span> <span class="token keyword">from</span>  business <span class="token keyword">group</span> <span class="token keyword">by</span> name <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>要将cost按照日期进行倒序累加</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"> <span class="token keyword">select</span> <span class="token operator">*</span><span class="token punctuation">,</span><span class="token function">sum</span><span class="token punctuation">(</span>cost<span class="token punctuation">)</span> <span class="token keyword">over</span> <span class="token punctuation">(</span> <span class="token keyword">order</span> <span class="token keyword">by</span> orderdate <span class="token keyword">desc</span> <span class="token keyword">row</span> <span class="token operator">between</span> <span class="token keyword">unbounded</span> <span class="token keyword">preceding</span> <span class="token operator">and</span> <span class="token keyword">current</span> <span class="token keyword">row</span><span class="token punctuation">)</span><span class="token keyword">from</span> business ​<span class="token punctuation">`</span><span class="token punctuation">`</span><span class="token punctuation">`</span> <span class="token number">4.</span> ntile<span class="token punctuation">(</span><span class="token punctuation">)</span>函数<span class="token operator">-</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">[</span>ntile函数详解<span class="token punctuation">]</span><span class="token punctuation">(</span>https:<span class="token comment">//www.cnblogs.com/52xf/p/4209211.html)** </span><span class="token operator">&gt;</span> ntile函数可以将有序数据，根据指定的组数进行分组处理。 编号从<span class="token number">1</span>开始，对于每一行，ntile将返回此行所属的组编号。 ntile函数的分组依据：<span class="token operator">&gt;</span><span class="token number">1.</span> 检查能不能对所有满足条件的记录进行平均分组，若能则直接平均分配完成分组。<span class="token operator">&gt;</span><span class="token number">2.</span> 若不能，则会先分出一个组，此组个数为（总个数<span class="token operator">/</span>总组数）<span class="token operator">+</span><span class="token number">1</span>。<span class="token operator">&gt;</span><span class="token number">3.</span> 分配之后系统会继续比较余下的记录数与未分配的组数能不能进行平均分配，若不能，则根据上面条件再分配。<span class="token operator">&gt;</span><span class="token operator">-</span> 例如：将<span class="token number">6</span>个记录分为<span class="token number">4</span>组， 不能平均分配则，第一组记录数为 （<span class="token number">6</span><span class="token operator">/</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span> <span class="token operator">=</span> <span class="token number">2</span>条记录。剩余<span class="token number">4</span>条记录分为<span class="token number">3</span>组，不能平均分配，则第二组记录数为（<span class="token number">4</span><span class="token operator">/</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token operator">=</span><span class="token number">2</span>条记录。剩余<span class="token number">2</span>条记录分为<span class="token number">2</span>组，则剩余<span class="token number">2</span>组各<span class="token number">1</span>条记录。<span class="token operator">*</span> 将表分成三组​<span class="token punctuation">`</span><span class="token punctuation">`</span><span class="token punctuation">`</span><span class="token keyword">sql</span><span class="token keyword">select</span>      <span class="token keyword">select</span>     shop_name<span class="token punctuation">,</span>    order_name<span class="token punctuation">,</span>    cost<span class="token punctuation">,</span>    ntile<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">over</span> <span class="token keyword">as</span> cut_group<span class="token keyword">from</span>     business<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>输出结果如下</p></blockquote><table><thead><tr><th>shop_name</th><th>order_date</th><th>cost</th><th>cut_group</th></tr></thead><tbody><tr><td>A</td><td>2017-01-01</td><td>10</td><td>1</td></tr><tr><td>B</td><td>2017-01-01</td><td>15</td><td>1</td></tr><tr><td>C</td><td>2017-01-01</td><td>20</td><td>1</td></tr><tr><td>A</td><td>2017-01-02</td><td>25</td><td>2</td></tr><tr><td>B</td><td>2017-01-02</td><td>25</td><td>2</td></tr><tr><td>C</td><td>2017-01-02</td><td>20</td><td>2</td></tr><tr><td>A</td><td>2017-01-03</td><td>15</td><td>3</td></tr><tr><td>B</td><td>2017-01-03</td><td>10</td><td>3</td></tr><tr><td>C</td><td>2017-01-03</td><td>20</td><td>3</td></tr></tbody></table><ul><li>将各个店铺销量进行升序排序后进行内部切分<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span>      <span class="token keyword">select</span>     shop_name<span class="token punctuation">,</span>    order_name<span class="token punctuation">,</span>    cost<span class="token punctuation">,</span>    ntile<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">over</span><span class="token punctuation">(</span><span class="token keyword">partition</span> <span class="token keyword">by</span> shop_name <span class="token keyword">order</span> <span class="token keyword">by</span> cost<span class="token punctuation">)</span> <span class="token keyword">as</span> cut_group<span class="token keyword">from</span>     business<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><blockquote><p>输出结果如下</p></blockquote><table><thead><tr><th>shop_name</th><th>order_date</th><th>cost</th><th>age_cost</th></tr></thead><tbody><tr><td>A</td><td>2017-01-01</td><td>10</td><td>1</td></tr><tr><td>A</td><td>2017-01-02</td><td>25</td><td>2</td></tr><tr><td>A</td><td>2017-01-03</td><td>15</td><td>3</td></tr><tr><td>B</td><td>2017-01-01</td><td>15</td><td>1</td></tr><tr><td>B</td><td>2017-01-02</td><td>25</td><td>2</td></tr><tr><td>B</td><td>2017-01-03</td><td>10</td><td>3</td></tr><tr><td>C</td><td>2017-01-01</td><td>20</td><td>1</td></tr><tr><td>C</td><td>2017-01-02</td><td>20</td><td>2</td></tr><tr><td>C</td><td>2017-01-03</td><td>20</td><td>3</td></tr></tbody></table><ul><li>查询前50%时间的订单信息<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span>  <span class="token operator">*</span>  <span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token keyword">select</span> name<span class="token punctuation">,</span>orderdate<span class="token punctuation">,</span>cost<span class="token punctuation">,</span>ntile<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">over</span><span class="token punctuation">(</span><span class="token keyword">order</span> <span class="token keyword">by</span> orderdate<span class="token punctuation">)</span> <span class="token keyword">as</span> git<span class="token keyword">from</span> business<span class="token punctuation">)</span><span class="token keyword">where</span> git <span class="token operator">=</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><ol start="5"><li><strong>排序函数</strong></li></ol><ul><li>SQl 中用于排序的函数有：rank、dense_rank、row_number、ntile函数,其语法为：</li></ul> <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">rank<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">over</span> <span class="token punctuation">(</span> <span class="token keyword">partition</span> <span class="token keyword">by</span> A <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> B  <span class="token keyword">desc</span> <span class="token punctuation">)</span>   <span class="token comment">---1、1、3</span>dense_rank<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">over</span> <span class="token punctuation">(</span><span class="token keyword">partition</span> <span class="token keyword">by</span> A <span class="token keyword">order</span> <span class="token keyword">by</span> B <span class="token keyword">desc</span><span class="token punctuation">)</span>  <span class="token comment">--- 1、1、2</span>row_number<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">over</span> <span class="token punctuation">(</span><span class="token keyword">partition</span> <span class="token keyword">by</span> A <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> b <span class="token keyword">desc</span><span class="token punctuation">)</span>    <span class="token comment">--1、2、3</span>ntile<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">over</span> <span class="token punctuation">(</span><span class="token keyword">partition</span> <span class="token keyword">by</span> A <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> b <span class="token keyword">desc</span><span class="token punctuation">)</span>      <span class="token comment">--分组</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>找出各省点击人数Top10的按钮？<blockquote><ol><li>取出 省份、按钮和 uv;</li><li>各省分组内，按照uv进行从大到小排序，并输出一列排序序号;</li><li>根据排序序号，取出排序前10的按钮和省份。 </li></ol></blockquote></li></ul> <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> province<span class="token punctuation">,</span>nbtn_name<span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token keyword">select</span>     province<span class="token punctuation">,</span>  <span class="token comment">--省份</span>    nbtn_name<span class="token punctuation">,</span> <span class="token comment">--按钮 </span>    uv<span class="token punctuation">,</span>        <span class="token comment">--uv</span>    dense_rank<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">over</span><span class="token punctuation">(</span><span class="token keyword">partition</span> <span class="token keyword">by</span> province <span class="token keyword">order</span> <span class="token keyword">by</span> uv  <span class="token keyword">DESC</span><span class="token punctuation">)</span> <span class="token keyword">as</span> ran <span class="token comment">--排序</span><span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token keyword">select</span>    province<span class="token punctuation">,</span>    nbtn_name<span class="token punctuation">,</span>    <span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">distinct</span> user_account<span class="token punctuation">)</span> <span class="token keyword">as</span> uv<span class="token keyword">from</span>     table1<span class="token keyword">where</span>     nbtn_name <span class="token operator">is</span> <span class="token operator">not</span> <span class="token boolean">null</span>      <span class="token operator">and</span>     hit_date <span class="token operator">=</span> <span class="token string">'2020-06-01'</span><span class="token keyword">group</span> <span class="token keyword">by</span>     province<span class="token punctuation">,</span>    nbtn_name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">where</span> ran <span class="token operator">between</span> <span class="token string">'1'</span> <span class="token operator">and</span> <span class="token string">'10'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>求连续3个月活跃的用户数</li></ul> <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">distinct</span> user_account<span class="token punctuation">)</span> <span class="token keyword">as</span> uv <span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token keyword">select</span> dt<span class="token punctuation">,</span>user_account<span class="token punctuation">,</span>dense_rank<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">over</span><span class="token punctuation">(</span><span class="token keyword">partition</span> <span class="token keyword">by</span> user_account <span class="token keyword">order</span> <span class="token keyword">by</span> dt<span class="token punctuation">)</span> <span class="token keyword">as</span> raws<span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">select</span> user_account<span class="token punctuation">,</span><span class="token keyword">month</span><span class="token punctuation">(</span>hit_date<span class="token punctuation">)</span>  <span class="token keyword">as</span> dt <span class="token keyword">from</span> table1<span class="token keyword">where</span> hit_date <span class="token operator">between</span> <span class="token string">'2020-04-01'</span> <span class="token operator">and</span> <span class="token string">'2020-06-31'</span><span class="token keyword">group</span> <span class="token keyword">by</span> user_account<span class="token punctuation">,</span> dt<span class="token punctuation">)</span> a1<span class="token punctuation">)</span> a2<span class="token punctuation">)</span><span class="token keyword">where</span> a2<span class="token punctuation">.</span>raws <span class="token operator">=</span> <span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>求4月连续7天进行签到的用户数<blockquote><ol><li>求出手机号和日期，并去重</li><li>根据手机号，对日期进行排序，并且日期和排序进行相减</li><li>对相减后得到的日期进行统计，并计算数量大于7的用户</li><li>对数量大于7的用户进行去重处理</li></ol></blockquote><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">distinct</span> user_account<span class="token punctuation">)</span> <span class="token keyword">as</span> uv <span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token keyword">select</span> user_account<span class="token punctuation">,</span>raw<span class="token punctuation">,</span><span class="token function">count</span><span class="token punctuation">(</span>raw<span class="token punctuation">)</span> <span class="token keyword">as</span> raw_1<span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token keyword">select</span> user_account<span class="token punctuation">,</span>hit_date<span class="token punctuation">,</span>date_sub<span class="token punctuation">(</span>hit_date<span class="token punctuation">,</span> row_number<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">over</span><span class="token punctuation">(</span><span class="token keyword">partition</span> <span class="token keyword">by</span> user_account <span class="token keyword">order</span> <span class="token keyword">by</span> hit_date<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token keyword">as</span> raw<span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token keyword">select</span>user_account<span class="token punctuation">,</span>hit_date<span class="token keyword">from</span> apache_computer_view<span class="token punctuation">.</span>client_android_log<span class="token keyword">where</span> hit_date <span class="token operator">between</span> <span class="token string">'2020-04-01'</span> <span class="token operator">and</span> <span class="token string">'2020-04-31'</span><span class="token keyword">group</span> <span class="token keyword">by</span> user_account<span class="token punctuation">,</span>hit_date<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">group</span> <span class="token keyword">by</span> user_account<span class="token punctuation">,</span>raw<span class="token punctuation">)</span><span class="token keyword">where</span> raw_1 <span class="token operator">&gt;=</span> <span class="token number">7</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><ol start="6"><li><strong>lag()和lead()函数</strong></li></ol><ul><li>查询顾客的上次购买时间</li></ul> <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span><span class="token punctuation">,</span>    lag<span class="token punctuation">(</span>orderdate<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">over</span><span class="token punctuation">(</span> partation <span class="token keyword">by</span> name <span class="token keyword">order</span> <span class="token keyword">by</span>  orderdate<span class="token punctuation">)</span><span class="token keyword">from</span>     business<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>查询顾客上次购买的时间, 与下次购买时间。相邻两个时间戳如何相减，求时间</li></ul> <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span><span class="token punctuation">,</span>    lag<span class="token punctuation">(</span>orderdate<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">over</span> <span class="token punctuation">(</span><span class="token keyword">partition</span> <span class="token keyword">by</span> name <span class="token keyword">order</span> <span class="token keyword">by</span> orderdate<span class="token punctuation">)</span> <span class="token keyword">as</span> up_date<span class="token punctuation">,</span>    lead<span class="token punctuation">(</span>orderdate<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">over</span> <span class="token punctuation">(</span><span class="token keyword">partition</span> <span class="token keyword">by</span> name <span class="token keyword">order</span> <span class="token keyword">by</span> orderdate<span class="token punctuation">)</span> <span class="token keyword">as</span> downdate<span class="token keyword">from</span>     business <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="7"><li> <strong>first_value()和last_value函数</strong></li></ol><ul><li>查询用户第一次购买时间和最后一次购买时间<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span>     <span class="token operator">*</span><span class="token punctuation">,</span>    first_value<span class="token punctuation">(</span>orderdate<span class="token punctuation">)</span> <span class="token keyword">over</span><span class="token punctuation">(</span><span class="token keyword">partition</span> <span class="token keyword">by</span> name <span class="token keyword">order</span> <span class="token keyword">by</span>  orderdate<span class="token punctuation">)</span> <span class="token keyword">as</span> first_date<span class="token punctuation">,</span>    last_value<span class="token punctuation">(</span>orderdate<span class="token punctuation">)</span> <span class="token keyword">over</span> <span class="token punctuation">(</span><span class="token keyword">partition</span> <span class="token keyword">by</span> name <span class="token keyword">order</span> <span class="token keyword">by</span> orderdate<span class="token punctuation">)</span> <span class="token keyword">as</span> last_date<span class="token keyword">from</span>     business<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="多表连接"><a href="#多表连接" class="headerlink" title="多表连接"></a>多表连接</h2><ol><li><strong>join</strong></li></ol><blockquote><p>Hive中Join的关联键必须在ON ()中指定，不能在Where中指定,ON 子句指定了两个表间数据进行连接的条件。</p></blockquote><p><img src="https://i.loli.net/2019/06/11/5cffb911ad8e183153.png" alt="join"></p><ul><li>对于多张表进行连接查询</li></ul> <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span>    <span class="token operator">*</span><span class="token keyword">FROM</span>    <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a <span class="token keyword">JOIN</span> b <span class="token keyword">ON</span> a<span class="token punctuation">.</span>ymd <span class="token operator">=</span> b<span class="token punctuation">.</span>ymd<span class="token punctuation">)</span>      <span class="token keyword">JOIN</span> c <span class="token keyword">ON</span> a<span class="token punctuation">.</span>ymd <span class="token operator">=</span> c<span class="token punctuation">.</span>ymd<span class="token punctuation">)</span>      <span class="token keyword">join</span> d <span class="token keyword">on</span> a<span class="token punctuation">.</span>ymd <span class="token operator">=</span> d<span class="token punctuation">.</span>ymd<span class="token punctuation">)</span>       <span class="token comment">---为什么条件内不将表 b 和表 c 进行连接操作， 因为 Hive总是按照从左到右的顺序来执行</span><span class="token keyword">WHERE</span>     a<span class="token punctuation">.</span> symbol <span class="token operator">=</span> <span class="token string">'Apple'</span>  <span class="token operator">AND</span> b<span class="token punctuation">.</span>symbol <span class="token operator">=</span> <span class="token string">'Ibm'</span> <span class="token operator">AND</span> c<span class="token punctuation">.</span>symbol <span class="token operator">=</span> <span class="token string">'Google'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li> <strong>并集：union 与 union all</strong></li></ol> <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">with</span> a1 <span class="token keyword">as</span> <span class="token punctuation">(</span>        <span class="token keyword">select</span>            user_account        <span class="token keyword">from</span>            <span class="token keyword">data</span>        <span class="token keyword">where</span>            hit_date <span class="token operator">between</span> <span class="token string">'2018-12-01'</span> <span class="token operator">and</span> <span class="token string">'2018-12-02'</span>            <span class="token operator">and</span>            nbtn_name <span class="token operator">like</span> <span class="token string">"%支付宝%"</span>        <span class="token keyword">union</span>         <span class="token keyword">select</span>            user_account        <span class="token keyword">from</span>            <span class="token keyword">data</span>        <span class="token keyword">where</span>            hit_date <span class="token operator">between</span> <span class="token string">'2018-12-01'</span> <span class="token operator">and</span> <span class="token string">'2018-12-02'</span>        <span class="token operator">and</span>        nbtn_name <span class="token operator">like</span> <span class="token string">"%手淘%"</span><span class="token punctuation">)</span><span class="token keyword">select</span>    <span class="token function">count</span><span class="token punctuation">(</span>user_account<span class="token punctuation">)</span> <span class="token keyword">as</span> pv<span class="token keyword">from</span>    a1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>union 与 union all 的不同：<blockquote><ul><li>union, 结果包含所有行， 并删除重复行</li><li>unoin all, 结果包含所有行， 但不删除重复行</li></ul></blockquote></li></ul><ol start="3"><li> <strong>交集：intersect</strong></li></ol> <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">with</span> a1 <span class="token keyword">as</span> <span class="token punctuation">(</span>        <span class="token keyword">select</span>            user_account        <span class="token keyword">from</span>            data1        <span class="token keyword">where</span>            hit_date <span class="token operator">between</span> <span class="token string">'2018-12-01'</span> <span class="token operator">and</span> <span class="token string">'2018-12-02'</span>            <span class="token operator">and</span>            nbtn_name <span class="token operator">like</span> <span class="token string">"%支付宝%"</span>        <span class="token keyword">intersect</span>        <span class="token keyword">select</span>            user_account        <span class="token keyword">from</span>            data1        <span class="token keyword">where</span>            hit_date <span class="token operator">between</span> <span class="token string">'2018-12-01'</span> <span class="token operator">and</span> <span class="token string">'2018-12-02'</span>        <span class="token operator">and</span>        nbtn_name <span class="token operator">like</span> <span class="token string">"%手淘%"</span><span class="token punctuation">)</span><span class="token keyword">select</span>    <span class="token function">count</span><span class="token punctuation">(</span>user_account<span class="token punctuation">)</span> <span class="token keyword">as</span> pv<span class="token keyword">from</span>    a1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li> <strong>差集：except</strong></li></ol> <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">with</span> a1 <span class="token keyword">as</span> <span class="token punctuation">(</span>        <span class="token keyword">select</span>            user_account        <span class="token keyword">from</span>            <span class="token keyword">data</span>        <span class="token keyword">where</span>            hit_date <span class="token operator">between</span> <span class="token string">'2018-12-01'</span> <span class="token operator">and</span> <span class="token string">'2018-12-25'</span>            <span class="token operator">and</span>            nbtn_name <span class="token operator">like</span> <span class="token string">"%支付宝%"</span>        <span class="token keyword">except</span>        <span class="token keyword">select</span>            user_account        <span class="token keyword">from</span>            <span class="token keyword">data</span>        <span class="token keyword">where</span>            hit_date <span class="token operator">between</span> <span class="token string">'2018-12-01'</span> <span class="token operator">and</span> <span class="token string">'2018-12-25'</span>        <span class="token operator">and</span>        nbtn_name <span class="token operator">like</span> <span class="token string">"%手淘%"</span><span class="token punctuation">)</span><span class="token keyword">select</span>    <span class="token function">count</span><span class="token punctuation">(</span>user_account<span class="token punctuation">)</span> <span class="token keyword">as</span> pv<span class="token keyword">from</span>    a1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h2><ol><li><p>select 子查询</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span>    shop_name<span class="token punctuation">,</span>    order_date<span class="token punctuation">,</span>    cost<span class="token punctuation">,</span>    <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token function">sum</span><span class="token punctuation">(</span>cost<span class="token punctuation">)</span> <span class="token keyword">from</span> business<span class="token punctuation">)</span> <span class="token keyword">as</span> sum_cost<span class="token keyword">from</span>     business<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>from 子查询</p></li></ol><ul><li>求连续3个月活跃的用户数</li></ul> <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">distinct</span> user_account<span class="token punctuation">)</span> <span class="token keyword">as</span> uv <span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token keyword">select</span> dt<span class="token punctuation">,</span>user_account<span class="token punctuation">,</span>dense_rank<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">over</span><span class="token punctuation">(</span><span class="token keyword">partition</span> <span class="token keyword">by</span> user_account <span class="token keyword">order</span> <span class="token keyword">by</span> dt<span class="token punctuation">)</span> <span class="token keyword">as</span> raws<span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">select</span> user_account<span class="token punctuation">,</span><span class="token keyword">month</span><span class="token punctuation">(</span>hit_date<span class="token punctuation">)</span>  <span class="token keyword">as</span> dt <span class="token keyword">from</span> table1<span class="token keyword">where</span> hit_date <span class="token operator">between</span> <span class="token string">'2020-04-01'</span> <span class="token operator">and</span> <span class="token string">'2020-06-31'</span><span class="token keyword">group</span> <span class="token keyword">by</span> user_account<span class="token punctuation">,</span> dt<span class="token punctuation">)</span> a1<span class="token punctuation">)</span> a2<span class="token punctuation">)</span><span class="token keyword">where</span> a2<span class="token punctuation">.</span>raws <span class="token operator">=</span> <span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>where 子查询</li></ol><ul><li>把平均成绩大于600的同学每次月考成绩提取出来<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span>    id<span class="token punctuation">,</span>    score<span class="token punctuation">,</span>    month_num<span class="token keyword">from</span>     table_score<span class="token keyword">where</span>     id <span class="token operator">in</span>     <span class="token punctuation">(</span>        <span class="token keyword">select</span>             id<span class="token punctuation">,</span> age<span class="token punctuation">(</span>score<span class="token punctuation">)</span>        <span class="token keyword">from</span>         table_score        <span class="token keyword">group</span> <span class="token keyword">by</span>             id        <span class="token keyword">having</span>            age<span class="token punctuation">(</span>score<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">600</span>    <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><ol start="4"><li>with 临时表</li></ol> <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">with</span> a1 <span class="token keyword">as</span> <span class="token punctuation">(</span>        <span class="token keyword">select</span>            user_account        <span class="token keyword">from</span>            <span class="token keyword">data</span>        <span class="token keyword">where</span>            hit_date <span class="token operator">between</span> <span class="token string">'2018-12-01'</span> <span class="token operator">and</span> <span class="token string">'2018-12-25'</span>            <span class="token operator">and</span>            nbtn_name <span class="token operator">like</span> <span class="token string">"%支付宝%"</span>        <span class="token keyword">except</span>        <span class="token keyword">select</span>            user_account        <span class="token keyword">from</span>            <span class="token keyword">data</span>        <span class="token keyword">where</span>            hit_date <span class="token operator">between</span> <span class="token string">'2018-12-01'</span> <span class="token operator">and</span> <span class="token string">'2018-12-25'</span>        <span class="token operator">and</span>        nbtn_name <span class="token operator">like</span> <span class="token string">"%手淘%"</span><span class="token punctuation">)</span><span class="token keyword">select</span>    <span class="token function">count</span><span class="token punctuation">(</span>user_account<span class="token punctuation">)</span> <span class="token keyword">as</span> pv<span class="token keyword">from</span>    a1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Hive避免数据倾斜"><a href="#Hive避免数据倾斜" class="headerlink" title="Hive避免数据倾斜"></a>Hive避免数据倾斜</h2><blockquote><ul><li>数据倾斜：当我们在Hive上进行查询时，因为数据的分散度不够， 导致大量数据集中在一台或者几台服务器上， 导致数据的计算速度远远低于平均计算速度， 计算过程特别耗时。</li><li>数据倾斜的表现：任务进度长时间维持在99%，查看任务监控页面，发现只有少量子任务未完成。</li></ul></blockquote><ol><li><strong>小表Join大表</strong></li></ol><ul><li>Hive 会假定查询中最后一个表是最大的表， 在对每行记录进行连续操作时， 它会尝试将其他表缓存起来，然后扫描最后那个表进行计算。因此，我们在查询时，要保证连续查询中的表的大小从左到右依次是增加的。<blockquote><ul><li>假如，在 a, b 两个表中，b表最小， 则 写sql时需让b表在左，a表在右：</li></ul></blockquote></li></ul> <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span>    a<span class="token punctuation">.</span>price_close<span class="token punctuation">,</span> b<span class="token punctuation">.</span>price_close<span class="token keyword">FROM</span>    b <span class="token keyword">JOIN</span> a <span class="token keyword">ON</span> b<span class="token punctuation">.</span>ymd <span class="token operator">=</span> a<span class="token punctuation">.</span>ymd <span class="token operator">AND</span> b<span class="token punctuation">.</span>symbol <span class="token operator">=</span> a<span class="token punctuation">.</span>symbol<span class="token keyword">WHERE</span>    a<span class="token punctuation">.</span>symbol <span class="token operator">=</span> <span class="token string">'APPLE'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span>    <span class="token comment">/*+3`'LKLLGFG Streamtable(a)*/</span> a<span class="token punctuation">.</span>price_close<span class="token punctuation">,</span> b<span class="token punctuation">.</span>price_close<span class="token comment">---Hive支持使用/*+STREAMTALBE*/语法指定哪张表是大表， 不需要排序</span><span class="token keyword">FROM</span>    a <span class="token keyword">JOIN</span> B <span class="token keyword">on</span> a<span class="token punctuation">.</span>ymd <span class="token operator">=</span> b<span class="token punctuation">.</span>ymd <span class="token operator">AND</span> a<span class="token punctuation">.</span>symbol <span class="token operator">=</span> b<span class="token punctuation">.</span>symbol<span class="token keyword">WHERE</span>    a<span class="token punctuation">.</span>symbol <span class="token operator">=</span> <span class="token string">'Apple'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li> <strong>大表JOIN大表</strong></li></ol><ul><li> 空key过滤 <blockquote><p>有时join超时是因为某些key对应的数据太多，而相同key对应的数据都会发送到相同的reducer上，从而导致内存不够。此时我们应该仔细分析这些异常的key，很多情况下，这些key对应的数据是异常数据，我们需要在sql语句中进行过滤。</p></blockquote></li></ul><ul><li> 空key转换 <blockquote><ul><li>有时虽然某个key为空对应的数据很多，但是相应的数据不是异常数据，必须要包含在join的结果中，此时我们可以表a中key为空的字段赋一个随机值，是的数据随机均匀地分布到不同的reducer上。</li><li>把空值的 key 变成一个字符串加上随机数，就能把倾斜的数据分到不同的 reduce 上 ,解决数据倾斜问题。</li></ul></blockquote></li></ul><ol start="3"><li> <strong>count(distinct) 去重统计</strong></li></ol><ul><li>数据量大时，由于count distinct 操作需要用一个 reduce task 来完成， 这一个reduce 需要处理的数据量太大，会导致整个job很难完成，一般 count distinct 使用先group by 再 count的方式替换。</li></ul> <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">distinct</span> id<span class="token punctuation">)</span> <span class="token keyword">from</span> bigtable<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre> <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token keyword">select</span> id <span class="token keyword">from</span> bigtable <span class="token keyword">group</span> <span class="token keyword">by</span> id<span class="token punctuation">)</span> a<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="4"><li> <strong>避免笛卡尔积</strong></li></ol><p> 尽量避免产生笛卡尔积，如join时不加on条件，或无效的on条件。hive只能使用1个reducer来完成笛卡尔积</p><ol start="5"><li> <strong>行列过滤</strong></li></ol><ul><li>列处理： 在查询中， 避免使用 select *, 使用条件限制取需要的列。</li><li> 行处理： 在分区剪裁中，当使用join外关联时，如果将副表的过滤条件写在where后面，那么就会先全表关联，之后再过滤, 这样会耗费资源。</li></ul><blockquote><p>优化前后<br> </p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> o<span class="token punctuation">.</span>id <span class="token keyword">from</span> bigtable b <span class="token keyword">join</span> ori o <span class="token keyword">on</span><span class="token punctuation">.</span>id <span class="token operator">=</span> b<span class="token punctuation">.</span>id <span class="token keyword">where</span> o<span class="token punctuation">.</span>id <span class="token operator">&lt;=</span><span class="token number">10</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p></p></blockquote> <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> b<span class="token punctuation">.</span>id <span class="token keyword">from</span> bigtable b<span class="token keyword">join</span> <span class="token punctuation">(</span><span class="token keyword">select</span> id <span class="token keyword">from</span> ori <span class="token keyword">where</span> id <span class="token operator">&lt;=</span><span class="token number">10</span><span class="token punctuation">)</span> o <span class="token keyword">on</span> b<span class="token punctuation">.</span>id <span class="token operator">=</span> o<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>优化前后</p></blockquote><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span>    a<span class="token punctuation">.</span>price_close<span class="token punctuation">,</span> b<span class="token punctuation">.</span>price_close<span class="token keyword">FROM</span>    b <span class="token keyword">JOIN</span> a <span class="token keyword">ON</span> b<span class="token punctuation">.</span>ymd <span class="token operator">=</span> a<span class="token punctuation">.</span>ymd <span class="token operator">AND</span> b<span class="token punctuation">.</span>symbol <span class="token operator">=</span> a<span class="token punctuation">.</span>symbol<span class="token keyword">WHERE</span>    s<span class="token punctuation">.</span>symbol <span class="token operator">=</span> <span class="token string">'APPLE'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span>    a<span class="token punctuation">.</span>price_close<span class="token punctuation">,</span> b<span class="token punctuation">.</span>price_close<span class="token keyword">FROM</span>    b <span class="token keyword">JOIN</span> a <span class="token keyword">ON</span> <span class="token punctuation">(</span> b<span class="token punctuation">.</span>ymd <span class="token operator">=</span> a<span class="token punctuation">.</span>ymd <span class="token operator">AND</span> b<span class="token punctuation">.</span>symbol <span class="token operator">=</span> a<span class="token punctuation">.</span>symbol <span class="token operator">and</span> s<span class="token punctuation">.</span>symbol <span class="token operator">=</span> <span class="token string">'APPLE'</span>  <span class="token comment">--正确的写法是将 where 条件写在 on 后面</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="6"><li> <strong>union all 子查询避免中使用 group by等</strong></li></ol><ul><li>union all 子查询避免中使用 group by【替换 count(distinct) 除外】、count(distinct)、max、min等。</li></ul> <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">with</span> a1 <span class="token keyword">as</span> <span class="token punctuation">(</span>        <span class="token keyword">select</span>            user_account<span class="token punctuation">,</span>            hit_date        <span class="token keyword">from</span>            <span class="token keyword">data</span>        <span class="token keyword">where</span>            hit_date <span class="token operator">between</span> <span class="token string">'2018-12-01'</span> <span class="token operator">and</span> <span class="token string">'2018-12-13'</span>            <span class="token operator">and</span>            nbtn_name <span class="token operator">like</span> <span class="token string">"%支付宝%"</span>        <span class="token keyword">union</span> <span class="token keyword">all</span>         <span class="token keyword">select</span>            user_account<span class="token punctuation">,</span>            hit_date        <span class="token keyword">from</span>            <span class="token keyword">data</span>        <span class="token keyword">where</span>            hit_date <span class="token operator">between</span> <span class="token string">'2018-12-01'</span> <span class="token operator">and</span> <span class="token string">'2018-12-13'</span>        <span class="token operator">and</span>        nbtn_name <span class="token operator">like</span> <span class="token string">"%支付宝%"</span><span class="token punctuation">)</span><span class="token keyword">select</span>    hit_date<span class="token punctuation">,</span>    <span class="token function">count</span><span class="token punctuation">(</span>user_account<span class="token punctuation">)</span> <span class="token keyword">as</span> pv<span class="token keyword">from</span>    a1<span class="token keyword">group</span> <span class="token keyword">by</span>    hit_date<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="7"><li> <strong>避免不同数据类型进行关联</strong></li></ol><ul><li>使用CAST函数对数据类型进行转换，语法为cast(value AS TYPE)</li></ul> <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span>     a<span class="token punctuation">.</span>price_close<span class="token punctuation">,</span>    b<span class="token punctuation">.</span>price_close<span class="token keyword">from</span>    a <span class="token keyword">join</span> b  <span class="token keyword">on</span> a<span class="token punctuation">.</span>user_id <span class="token operator">=</span> cast<span class="token punctuation">(</span>b<span class="token punctuation">.</span>user_id <span class="token keyword">as</span> string<span class="token punctuation">)</span><span class="token keyword">where</span>    hit_date <span class="token operator">between</span> <span class="token string">'2018-11-01'</span> <span class="token operator">and</span> <span class="token string">'2018-11-02'</span>    <span class="token operator">and</span>     a<span class="token punctuation">.</span>symbol <span class="token operator">=</span> <span class="token string">'apple'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Hive的查询注意事项以及优化总结： 1. 尽量尽早过滤数据，减少每个阶段的数据量。对于分区表要加分区，同时只选择需要使用到的字段</p><ol><li>对历史库的计算经验</li><li>尽量原子化操作，尽量避免一个SQL包含复杂逻辑，可以使用中间表来完成复杂的逻辑</li><li>join操作 小表要注意放在join的左边，否则会引起磁盘和内存的大量消耗</li><li>如果union all的部分个数大于2，或者每个union部分数据量大，应该拆成多个insert into语句，实际测试过程中，执行时间能提升50%</li></ol><h2 id="用python脚本连接数据库"><a href="#用python脚本连接数据库" class="headerlink" title="用python脚本连接数据库"></a>用python脚本连接数据库</h2><p>作为一名数据分析师，日报、周报、月报数据一个也不能少。 相应的， 就要在数据库中提取大量的数据， 并处理大量的Excel表格。</p><p>在提取和处理数据的过程中， 对于一些重复性的劳动， 写个Python脚本来实现半自动化， 能够大幅提高自己的工作效率。 以下是自己工作中的一点总结经验。 </p><!-- 对于数据库的ip地址，用户名，密码等， 如果不清楚，或数据库连接不上， 需要和开发人员对接 --><ol><li><p>首先， 用Python连接数据库</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pyhive <span class="token keyword">import</span> hive <span class="token keyword">import</span> timeconn <span class="token operator">=</span> hive<span class="token punctuation">.</span>Connection<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'ip地址'</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">10000</span><span class="token punctuation">,</span> username<span class="token operator">=</span><span class="token string">'用户名'</span><span class="token punctuation">,</span> database <span class="token operator">=</span> <span class="token string">'default'</span><span class="token punctuation">,</span> auth<span class="token operator">=</span><span class="token string">'NOSASL'</span><span class="token punctuation">)</span>cursor <span class="token operator">=</span> conn<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 获得连接的游标</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>设置开始和结束时间 可以用python中的time函数设置时间</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">startdate <span class="token operator">=</span> <span class="token string">'2018-09-01'</span>enddate   <span class="token operator">=</span> <span class="token string">'2018-09-19'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>用Python中的format函数将日期传入{}中</p><ul><li>python中写sql脚本时， 需要用\来进行换行符的转换, \后面不能有空格。日期用两个{}来代替， 用format函数将开始日期与结束日期传入</li></ul></li></ol> <pre class="line-numbers language-python" data-language="python"><code class="language-python">sql_jifenxinxi_an <span class="token operator">=</span> <span class="token triple-quoted-string string">"""select     count(distinct user_account) as uv,     count(1) as pv from     computer_view.data where     hit_date between "{}" and "{}"     and     (btn_position like "服务-查询-积分信息%"     or     btn_home = "积分-扇形左"     ) limit 1000"""</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>startdate<span class="token punctuation">,</span>enddate<span class="token punctuation">)</span><span class="token comment"># format 插入时间</span>cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql_jifenxinxi_an<span class="token punctuation">)</span><span class="token comment"># 运行此语句</span>cursor<span class="token punctuation">.</span>fetchall<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#fetchall():接收全部的返回结果行.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><!-- 我们可以按照这个格式写工作中需要运行的多个SQL语句。 这样， 当脚本运行的时候， 我们可以腾出时间来去干其他工作， 等过一段时间，所有的SQL语句都跑完了， 我们再进行统一的整理。 --><hr><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li><a href="https://mp.weixin.qq.com/s/Xw5DOHHGh838w8YXT9lO5g">讲讲 group 的plus版-张俊红</a></li><li>《对比excel,轻松学sql数据分析》</li><li>hive入门-视频课程</li></ol><iframe width="560" height="315" src="https://www.youtube.com/embed/9otkcuic-2o" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe>]]></content>
      
      
      <categories>
          
          <category> SQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python-Pandas库学习</title>
      <link href="/2020/06/01/2020-08-12-%E6%8A%80%E8%83%BD-Python-pandas%E5%BA%93%E5%AD%A6%E4%B9%A0-2/"/>
      <url>/2020/06/01/2020-08-12-%E6%8A%80%E8%83%BD-Python-pandas%E5%BA%93%E5%AD%A6%E4%B9%A0-2/</url>
      
        <content type="html"><![CDATA[<h2 id="读取与写入Excel数据"><a href="#读取与写入Excel数据" class="headerlink" title="读取与写入Excel数据"></a>读取与写入Excel数据</h2><ul><li><a href="https://blog.csdn.net/m0_37693335/article/details/81474995">相对路径与绝对路径</a></li></ul><ol><li>读取文件夹内容<blockquote><p>r（转义符）避免路径中的\被转义。路径中不加 \ 则需要把所有的\写成/。</p></blockquote></li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">from</span> pandas <span class="token keyword">import</span> Series<span class="token punctuation">,</span> DataFrame<span class="token keyword">import</span> osfile_list <span class="token operator">=</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span><span class="token string">r'E:\工作文件\周报\周数据\测试\0902-0908'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>file_list<span class="token punctuation">,</span> <span class="token string">'\t'</span><span class="token punctuation">)</span><span class="token comment"># 读取当前文件夹地址</span>os<span class="token punctuation">.</span>getcwd<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>读取xls格式Excel表</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_excel<span class="token punctuation">(</span><span class="token string">'E:/工作文件/an-商品汇总-uv.xls'</span><span class="token punctuation">)</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_excel<span class="token punctuation">(</span><span class="token string">r'E:\工作文件\an-商品汇总-uv.xls'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="3"><li>读取csv格式Excel表</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'E:/工作文件/周报/周数据/测试/0902-0908/商品汇总.csv'</span><span class="token punctuation">)</span><span class="token comment"># 读取csv文件，并用 分隔符分割</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">r'E:\商品汇总.csv'</span><span class="token punctuation">,</span> sep <span class="token operator">=</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token comment"># 只读取文件前两行</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">r'E:\商品汇总.csv'</span><span class="token punctuation">,</span> nrows <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li> 读取显示编码错误</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 修改方式</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span>path <span class="token operator">+</span> <span class="token string">'登记用户 20191127.csv'</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">"gbk"</span> <span class="token punctuation">)</span><span class="token comment"># 当文件路径包含中文解析错误时，设置 engine 参数来消除这个错误</span><span class="token comment"># 错误原因， 当调用read_csv方法时，默认使用C语言作为解析语言，只需要将默认值c语言更改为python</span><span class="token comment"># 如果文件格式是  csv usf-8, 那么编码也改为 utf-8-sig</span><span class="token comment"># 如果文件格式是 csv格式， 则编码格式为 gbk</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'登记用户 20191127.csv'</span><span class="token punctuation">,</span> engine <span class="token operator">=</span> <span class="token string">'python'</span><span class="token punctuation">,</span> encoding <span class="token operator">=</span> <span class="token string">'utf-8-sig'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>读取txt格式数据</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_table<span class="token punctuation">(</span><span class="token string">r'C:\Users\Administrator\Desktop\haha.txt'</span><span class="token punctuation">,</span> sep <span class="token operator">=</span> <span class="token string">' '</span><span class="token punctuation">)</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">r'C:\Users\Administrator\Desktop\haha.txt'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    df <span class="token operator">=</span> f<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span> df <span class="token operator">=</span> np<span class="token punctuation">.</span>loadtxt<span class="token punctuation">(</span><span class="token string">r'C:\Users\Administrator\Desktop\haha.txt'</span><span class="token punctuation">)</span>  <span class="token comment"># 将txt文件存为numpy数组</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="5"><li>读取excel中的sheet名称</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_Excel<span class="token punctuation">(</span><span class="token string">r'E:\工作文件\an-商品汇总-uv.xlsx'</span><span class="token punctuation">,</span> sheet_name <span class="token operator">=</span> <span class="token string">'sheet1'</span><span class="token punctuation">)</span><span class="token comment"># 传入sheet的顺序，从0开始计数</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_Excel<span class="token punctuation">(</span><span class="token string">r'E:\工作文件\an-商品汇总-uv.xlsx'</span><span class="token punctuation">,</span> sheet_name <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token comment"># 读取sheet,并制定文件中的第几行做行索引</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_Excel<span class="token punctuation">(</span><span class="token string">r'E:\工作文件\an-商品汇总-uv.xlsx'</span><span class="token punctuation">,</span> sheet_name <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> index_col <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token comment"># 读取sheet文件， 并制定文件中的第几列做列索引</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_Excel<span class="token punctuation">(</span><span class="token string">r'E:\工作文件\商品汇总.xlsx'</span><span class="token punctuation">,</span> sheet_name <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> head <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token comment"># 当本地文件过多时，可以通过设定 usecols 参数来指定要导入的列</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_Excel<span class="token punctuation">(</span><span class="token string">r'E:\商品汇总.xlsx'</span><span class="token punctuation">,</span> usecols <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token comment"># uescols = [0,2]</span><span class="token comment"># 读取excel中所有sheet，并进行合并</span>rbook <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>kong_data <span class="token operator">=</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span><span class="token string">r'F:\省资源位'</span><span class="token punctuation">)</span><span class="token keyword">for</span> file_name <span class="token keyword">in</span> kong_data<span class="token punctuation">:</span>    data_excel <span class="token operator">=</span> pd<span class="token punctuation">.</span>ExcelFile<span class="token punctuation">(</span><span class="token string">r'F:\省资源位\\'</span><span class="token operator">+</span>file_name<span class="token punctuation">)</span>    sheet <span class="token operator">=</span> data_excel<span class="token punctuation">.</span>sheet_names    <span class="token keyword">for</span> i <span class="token keyword">in</span> sheet<span class="token punctuation">:</span>        data_button_rest <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_excel<span class="token punctuation">(</span><span class="token string">r'F:\省资源位\\'</span><span class="token operator">+</span>file_name<span class="token punctuation">,</span> sheet_name<span class="token operator">=</span> i <span class="token punctuation">)</span>        rbook<span class="token punctuation">.</span>append<span class="token punctuation">(</span>data_button_rest<span class="token punctuation">)</span>        result_df <span class="token operator">=</span>pd<span class="token punctuation">.</span>concat<span class="token punctuation">(</span>rbook<span class="token punctuation">)</span>datas_excel <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>result_df<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>将运行的所有数据都展现出来， 而不是只展现最后一条</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span>  IPython<span class="token punctuation">.</span>core<span class="token punctuation">.</span>interactiveshell <span class="token keyword">import</span> InteractiveShellInteractiveShell<span class="token punctuation">.</span>ast_node_interactivity <span class="token operator">=</span> <span class="token string">"all"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="6"><li>将数据写入Excel表， 并输出</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 写入数据</span>df<span class="token punctuation">.</span>to_excel<span class="token punctuation">(</span><span class="token string">'C:/Users/Administrator/Desktop/'</span><span class="token operator">+</span><span class="token string">'商品分类.xlsx'</span><span class="token punctuation">)</span>df<span class="token punctuation">.</span>to_excel<span class="token punctuation">(</span><span class="token string">r'C:\Users\Administrator\Desktop\\'</span><span class="token operator">+</span><span class="token string">'商品分类.xlsx'</span><span class="token punctuation">)</span>df<span class="token punctuation">.</span>to_excel<span class="token punctuation">(</span><span class="token string">r'C:\Users\Administrator\Desktop/'</span><span class="token operator">+</span><span class="token string">'商品分类.xlsx'</span><span class="token punctuation">)</span><span class="token comment"># 写入数据，且不带索引</span>df<span class="token punctuation">.</span>to_excel<span class="token punctuation">(</span><span class="token string">'C:/Users/商品分类.xlsx'</span><span class="token punctuation">,</span> sheet_name <span class="token operator">=</span> <span class="token string">'首页'</span><span class="token punctuation">,</span> index <span class="token operator">=</span> <span class="token boolean">False</span><span class="token punctuation">)</span><span class="token comment"># 设置要导出的列</span>df<span class="token punctuation">.</span>to_excel<span class="token punctuation">(</span><span class="token string">'C:/Users/商品分类.xlsx'</span><span class="token punctuation">,</span> sheet_name <span class="token operator">=</span> <span class="token string">'首页'</span><span class="token punctuation">,</span> index <span class="token operator">=</span> <span class="token boolean">False</span><span class="token punctuation">,</span>           columns <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'ID'</span><span class="token punctuation">,</span> '销量’<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 设置编码格式</span>df<span class="token punctuation">.</span>to_excel<span class="token punctuation">(</span><span class="token string">'C:/Users/商品分类.xlsx'</span><span class="token punctuation">,</span> sheet_name <span class="token operator">=</span> <span class="token string">'首页'</span><span class="token punctuation">,</span> index <span class="token operator">=</span> <span class="token boolean">False</span><span class="token punctuation">,</span>           encoding <span class="token operator">=</span> <span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token comment"># 缺失值、无穷值处理</span>df<span class="token punctuation">.</span>to_excel<span class="token punctuation">(</span><span class="token string">'C:/Users/商品分类.xlsx'</span><span class="token punctuation">,</span> sheet_name <span class="token operator">=</span> <span class="token string">'首页'</span><span class="token punctuation">,</span> index <span class="token operator">=</span> <span class="token boolean">False</span><span class="token punctuation">,</span>           na_rep <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token comment"># 缺失值用0填充</span>           inf_rep <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment"># 无穷之用0填充</span>           <span class="token punctuation">)</span><span class="token comment"># 导出csv文件，设置分隔符</span>df<span class="token punctuation">.</span>to_excel<span class="token punctuation">(</span><span class="token string">'C:/Users/商品分类.xlsx'</span><span class="token punctuation">,</span> sheet_name <span class="token operator">=</span> <span class="token string">'首页'</span><span class="token punctuation">,</span> index <span class="token operator">=</span> <span class="token boolean">False</span><span class="token punctuation">,</span>            sep <span class="token operator">=</span> <span class="token string">','</span>           <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>将求出的数据存储在excel中的多个sheet中</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">from</span> openpyxl <span class="token keyword">import</span> load_workbook writer <span class="token operator">=</span> pd<span class="token punctuation">.</span>ExcelWriter<span class="token punctuation">(</span><span class="token string">'F:/notebooks/zhoushuju.xlsx'</span><span class="token punctuation">)</span>btn_navigation<span class="token punctuation">.</span>to_excel<span class="token punctuation">(</span>writer<span class="token punctuation">,</span> sheet_name <span class="token operator">=</span> <span class="token string">'底部导航'</span><span class="token punctuation">)</span>shouye_top20<span class="token punctuation">.</span>to_excel<span class="token punctuation">(</span>writer<span class="token punctuation">,</span> sheet_name <span class="token operator">=</span> <span class="token string">'首页top20'</span><span class="token punctuation">)</span>writer<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span>writer<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="7"><li>其他数据格式</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 从SQL表/库导入数据 </span><span class="token keyword">import</span> pymysqleng <span class="token operator">=</span> pymysql<span class="token punctuation">.</span>connet<span class="token punctuation">(</span>host<span class="token operator">=</span> <span class="token string">'100.129'</span><span class="token punctuation">,</span> user <span class="token operator">=</span> <span class="token string">'root'</span><span class="token punctuation">,</span> password <span class="token operator">=</span> <span class="token string">'1234'</span><span class="token punctuation">,</span> df <span class="token operator">=</span> <span class="token string">'db'</span><span class="token punctuation">,</span> charset <span class="token operator">=</span> <span class="token string">'ugf8'</span><span class="token punctuation">)</span>query <span class="token operator">=</span> <span class="token triple-quoted-string string">"""select * from android_log """</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_sql<span class="token punctuation">(</span>query<span class="token punctuation">,</span> eng<span class="token punctuation">)</span><span class="token comment"># 导出数据到SQL表 </span>df<span class="token punctuation">.</span>to_sql<span class="token punctuation">(</span>table_name<span class="token punctuation">,</span> eng<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="8"><li>常见问题</li></ol><ul><li>当文件有中文时， 可能会出现错误：Initializing from file failed 有中文， 可以用此方法解决</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span>‘我的文件<span class="token punctuation">.</span>csv’<span class="token punctuation">)</span>res <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span>f<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>查看大文件有多少列</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">data <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'E:/用户明细.csv'</span><span class="token punctuation">)</span>data1 <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span>data<span class="token punctuation">,</span> iterator<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>data2 <span class="token operator">=</span> data1<span class="token punctuation">.</span>get_chunk<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>data2<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><a href="http://wiki.jikexueyuan.com/project/explore-python/Advanced-Features/iterator.html">迭代器</a></p><h1 id="对输出数据进行处理"><a href="#对输出数据进行处理" class="headerlink" title="对输出数据进行处理"></a>对输出数据进行处理</h1><p><a href="https://www.jianshu.com/p/5c0aa1fa19af">pandas的数据输出显示设置</a></p><ol><li>对表中某一列元素进行相同操作</li></ol><pre class="line-numbers language-none"><code class="language-none">df['金额'].apply(lambda x:x+1)df['金额'] +2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="2"><li>对表中每一个元素进行相同操作</li></ol><pre class="line-numbers language-none"><code class="language-none">df.applymap(lambda x:x+1)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pddf <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">150</span><span class="token punctuation">,</span> <span class="token number">150</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># pd.set_option('expand_frame_repr', False) #数据超过总宽度后，是否折叠显示</span>pd<span class="token punctuation">.</span>set_option<span class="token punctuation">(</span><span class="token string">'display.width'</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token comment">#数据显示总宽度</span>pd<span class="token punctuation">.</span>set_option<span class="token punctuation">(</span><span class="token string">'max_rows'</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token comment">#显示最多行数，超出该数以省略号表示</span>pd<span class="token punctuation">.</span>set_option<span class="token punctuation">(</span><span class="token string">'max_columns'</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token comment">#显示最多列数，超出该数以省略号表示</span>pd<span class="token punctuation">.</span>set_option<span class="token punctuation">(</span><span class="token string">'max_colwidth'</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token comment">#设置单列的宽度，用字符个数表示，单个数据长度超出该数时以省略号表示</span>pd<span class="token punctuation">.</span>set_option<span class="token punctuation">(</span><span class="token string">'large_repr'</span><span class="token punctuation">,</span> <span class="token string">'truncate'</span><span class="token punctuation">)</span> <span class="token comment">#数据超过设置显示最大行列数时，带省略号显示/若是info则是统计信息显示</span>pd<span class="token punctuation">.</span>set_option<span class="token punctuation">(</span><span class="token string">'show_dimensions'</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">)</span> <span class="token comment">#当数据带省略号显示时，是否在最后显示数据的维度</span><span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">)</span>pd<span class="token punctuation">.</span>set_option<span class="token punctuation">(</span><span class="token string">'max_info_columns'</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token comment">#当列数超过这个值时，调用df.info()函数时不会统计每列的非空值。</span><span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>将数据变成小数形式<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd inputfile <span class="token operator">=</span> <span class="token string">'../data/electricity_data.xls'</span>outputfile <span class="token operator">=</span> <span class="token string">'./electricity_data_analyze1.xls'</span> data <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_excel<span class="token punctuation">(</span>inputfile<span class="token punctuation">)</span>data<span class="token punctuation">[</span><span class="token string">u'线损率'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token string">u'供入电量'</span><span class="token punctuation">]</span><span class="token operator">-</span>data<span class="token punctuation">[</span><span class="token string">u'供出电量'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">/</span>data<span class="token punctuation">[</span><span class="token string">u'供入电量'</span><span class="token punctuation">]</span>    <span class="token comment">#data[u'线损率']的类型为series； data[u'线损率']为小数</span>data<span class="token punctuation">[</span><span class="token string">u'线损率'</span><span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">u'线损率'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> <span class="token builtin">format</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token string">'.2%'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">#Series.apply()让序列的值依次在lambda函数中执行； data['线损率']由小数转化为百分数</span> data<span class="token punctuation">.</span>to_excel<span class="token punctuation">(</span>outputfile<span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>``` <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token comment">## 描述数据</span><span class="token number">1</span><span class="token punctuation">.</span> 表信息```pythondf<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><ol start="2"><li>显示数据的行列数</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">df<span class="token punctuation">.</span>shape<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>查看数据格式dtpyes</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">df<span class="token punctuation">.</span>dtypes<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="4"><li>显示列名、元素</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">df<span class="token punctuation">.</span>columnsdf<span class="token punctuation">.</span>values<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="5"><li> 添加默认列名</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 如果数据没有标题行，可用pandas添加默认的列名</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_excel<span class="token punctuation">(</span><span class="token string">'x.xlsx'</span><span class="token punctuation">,</span> header <span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="6"><li> 显示前数据前5行</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">df<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>df<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'标题'</span><span class="token punctuation">,</span> <span class="token string">'客户端uv'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="7"><li>显示数据后5行</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">df<span class="token punctuation">.</span>tail<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="8"><li>值</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">df<span class="token punctuation">.</span>values<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="9"><li>读取a列</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">df<span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="10"><li>找到重复值</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">df<span class="token punctuation">.</span>duplicated<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="11"><li> 显示数据唯一值（unique函数）</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 数据有0， 是因对缺失值进行了填充</span>df<span class="token punctuation">[</span><span class="token string">'经纪人级别'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>unique<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="12"><li>对第几行数据不读取</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#不读取哪里数据，可用skiprows=[i]，跳过文件的第i行不读取</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_excel<span class="token punctuation">(</span><span class="token string">'x.xlsx'</span><span class="token punctuation">,</span>skiprows<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="13"><li> 对缺失值进行识别</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 所有缺失值显示为True</span>pd<span class="token punctuation">.</span>insull<span class="token punctuation">(</span>df<span class="token punctuation">)</span>  <span class="token comment"># df.isnull()</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="14"><li>计算</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#计算此data的数量</span>df<span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value_counts<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 升序计数</span>df<span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value_counts<span class="token punctuation">(</span>ascending <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment"># 升序计数并分组</span>df<span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value_counts<span class="token punctuation">(</span>ascending <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">,</span> bins <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token comment"># 计数</span>df<span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="15"><li>字符和数值之间的转化</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 转化成整数</span><span class="token builtin">float</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 转化成整数</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 转化成整数</span><span class="token builtin">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 转化成整数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="16"><li> 获取数据分布情况</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">data<span class="token punctuation">.</span>describe<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="数据清洗"><a href="#数据清洗" class="headerlink" title="数据清洗"></a>数据清洗</h2><ol><li><p>删除空值 （dropna函数）</p><p>  <a href="https://blog.csdn.net/yuanxiang01/article/details/78738812">DataFrame中的空值处理</a></p></li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">df<span class="token punctuation">.</span>dropna<span class="token punctuation">(</span>how<span class="token operator">=</span><span class="token string">'any'</span><span class="token punctuation">)</span>df<span class="token punctuation">.</span>dropna<span class="token punctuation">(</span>how <span class="token operator">=</span> <span class="token string">'all'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">用法：DataFrame.drop(labels=None,axis=0, index=None, columns=None, inplace=False)参数说明：labels 就是要删除的行列的名字，用列表给定axis 默认为0，指删除行，因此删除columns时要指定axis=1；index 直接指定要删除的行columns 直接指定要删除的列inplace=False，默认该删除操作不改变原数据，而是返回一个执行删除操作后的新dataframe；inplace=True，则会直接在原数据上进行删除操作，删除后无法返回。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none"># 删除包含 集团 二字 的行read_data = df[- df['所属省份名称'].isin(['集团'])] <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="2"><li>数值删除</li></ol><ul><li>删除列</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 删除列, axis=1表示删除列</span>df<span class="token punctuation">.</span>drop<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"销售额"</span><span class="token punctuation">,</span> <span class="token string">"ID"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> axis <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span>df<span class="token punctuation">.</span>drop<span class="token punctuation">(</span>columns <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"销售额"</span><span class="token punctuation">,</span> <span class="token string">"ID"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 传入列位置</span>df<span class="token punctuation">.</span>drop<span class="token punctuation">(</span>df<span class="token punctuation">.</span>columns<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> axis <span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>删除行</li></ul><pre class="line-numbers language-none"><code class="language-none"># 删除行，筛选行名df.drop(['一','二'], axis = 0)df.drop(index = ['一', '二'])# 删除行，筛选行索引df.drop(df.index[[0,1]], axis = 0)# 只要年龄小于40的用户df[df['ID'] &lt; 40]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li> 填充（fillna函数）</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 空值用0填充</span>df<span class="token punctuation">.</span>fillna<span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>df<span class="token punctuation">.</span>replace<span class="token punctuation">(</span>np<span class="token punctuation">.</span>NaN<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token comment"># 用均值对空值进行填充</span>df<span class="token punctuation">[</span><span class="token string">'时长'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token string">'时长'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 按照不同列进行填充</span>df<span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'性别'</span> <span class="token punctuation">:</span> <span class="token string">'男'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>更改数据格式，更改数据类型</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 将数据格式int64,改为float格式</span>df<span class="token punctuation">[</span><span class="token string">'大区'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token string">'float64'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="5"><li>更改列名称, 修改列名。 </li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">df<span class="token punctuation">.</span>columns <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'导航'</span><span class="token punctuation">,</span><span class="token string">'uv'</span><span class="token punctuation">,</span> <span class="token string">'pv'</span><span class="token punctuation">,</span><span class="token string">'户均点击'</span><span class="token punctuation">]</span><span class="token punctuation">]</span>df<span class="token punctuation">.</span>rename<span class="token punctuation">(</span>columns<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'IM渠道'</span><span class="token punctuation">:</span> <span class="token string">'渠道'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="6"><li>添加修改索引</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 添加索引</span>df<span class="token punctuation">.</span>index <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token comment"># 修改索引,重新设置</span>df <span class="token operator">=</span> df<span class="token punctuation">.</span>set_index<span class="token punctuation">[</span><span class="token string">'标题'</span><span class="token punctuation">]</span><span class="token comment"># 重命名索引</span>df<span class="token punctuation">.</span>rename <span class="token punctuation">(</span>index <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">:</span> <span class="token string">'一'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li> 重置索引</li></ul><p><img src="https://i.loli.net/2019/12/21/C7cxnGMVfFDeLEX.jpg" alt="图1"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">DataFrame<span class="token punctuation">.</span>reset_index<span class="token punctuation">(</span>level<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> drop<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> inplace<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token comment"># 默认将所有index转化成columns</span>df<span class="token punctuation">.</span>reset_index<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#将第0级索引转化为 columns</span>df<span class="token punctuation">.</span>reset_index<span class="token punctuation">(</span>level<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment"># 将原索引删除，不加入columns</span>df<span class="token punctuation">.</span>reset_index<span class="token punctuation">(</span>drop <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="7"><li><p>删除重复值</p><p> <a href="https://www.cnblogs.com/cocowool/p/8421997.html">Pandas删除数据的几种情况</a></p></li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 默认第一次出现的保留，其余删除</span>df<span class="token punctuation">[</span><span class="token string">'门店'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>drop_duplicates<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 最后一次出现的保留，其余删除</span>df<span class="token punctuation">[</span><span class="token string">'门店'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>drop_duplicates<span class="token punctuation">(</span>keep <span class="token operator">=</span> <span class="token string">'last'</span><span class="token punctuation">)</span><span class="token comment"># 多列去重</span>df<span class="token punctuation">.</span>drop_duplicates<span class="token punctuation">(</span>subset <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'姓名'</span><span class="token punctuation">,</span> <span class="token string">'唯一识别码'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="8"><li>对列表内的值进行替换</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 一对一替换</span>df<span class="token punctuation">[</span><span class="token string">'ID'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'1053'</span><span class="token punctuation">,</span> <span class="token string">'110'</span><span class="token punctuation">)</span><span class="token comment"># 多对一替换</span>df<span class="token punctuation">[</span><span class="token string">'ID'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'1053'</span><span class="token punctuation">:</span> <span class="token string">'110'</span><span class="token punctuation">,</span> <span class="token string">'230'</span><span class="token punctuation">:</span> <span class="token string">'33'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>df<span class="token punctuation">.</span>columns<span class="token punctuation">.</span><span class="token builtin">str</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">,</span> <span class="token string">'_'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="对数据进行处理"><a href="#对数据进行处理" class="headerlink" title="对数据进行处理"></a>对数据进行处理</h2><ol><li>对两个数据进行合并- merge, join, concat函数</li></ol><ul><li>merge</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 按照轴把多个对象拼接起来</span>pd<span class="token punctuation">.</span>concat<span class="token punctuation">(</span>df1<span class="token punctuation">,</span> df2<span class="token punctuation">)</span><span class="token comment"># join函数适合根据索引进行合并，合并索引相同但列不同的对象</span><span class="token comment"># merge函数，根据一个或多个键连接多行, 相当于excel中的vlookup</span><span class="token comment"># 将left和right进行合并</span>pd<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token comment"># 指定以key为键进行合并</span>pd<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">,</span> on <span class="token operator">=</span> <span class="token string">'key'</span><span class="token punctuation">)</span> pd<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>name_3<span class="token punctuation">,</span> name_1<span class="token punctuation">,</span> left_on <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'ming'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> right_on <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'标记'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># key2列不相同的部分会直接舍弃掉</span>pd<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">,</span> on <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'key'</span><span class="token punctuation">,</span> <span class="token string">'key2'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 保留key2列不相同的部分</span>pd<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">,</span> on <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'key'</span><span class="token punctuation">,</span> <span class="token string">'key2'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> how <span class="token operator">=</span> <span class="token string">'outer'</span><span class="token punctuation">)</span><span class="token comment"># 不相同的部分指定以左表为基准</span>pd<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">,</span> on <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'key'</span><span class="token punctuation">,</span> <span class="token string">'key2'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> how <span class="token operator">=</span> <span class="token string">'left'</span><span class="token punctuation">)</span><span class="token comment"># 重复列名处理</span><span class="token comment"># pd.merge()会自动给这些重复名添加后缀_x、_y，也可以自己命名。</span>pd<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>df1<span class="token punctuation">,</span>df2<span class="token punctuation">,</span> on <span class="token operator">=</span> <span class="token string">'id'</span><span class="token punctuation">,</span> suffixes<span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'_L'</span><span class="token punctuation">,</span> <span class="token string">'_R'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">#按照索引进行合并</span>pd<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>df1<span class="token punctuation">,</span>df2<span class="token punctuation">,</span>left_index<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>right_index<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li> concat函数, 按照标题进行拼接</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 普通合并</span>pd<span class="token punctuation">.</span>concat<span class="token punctuation">(</span><span class="token punctuation">[</span>df1<span class="token punctuation">,</span> df2<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 索引设置</span>pd<span class="token punctuation">.</span>concat<span class="token punctuation">(</span><span class="token punctuation">[</span>df1<span class="token punctuation">,</span> df2<span class="token punctuation">]</span><span class="token punctuation">,</span> ignore_index<span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment"># 合并后删除重复值</span>pd<span class="token punctuation">.</span>concat<span class="token punctuation">(</span><span class="token punctuation">[</span>df1<span class="token punctuation">,</span> df2<span class="token punctuation">]</span><span class="token punctuation">,</span> ignore_index <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">.</span>drop_duplicates<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>对数据进行排序</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 按照ID进行升序排列</span><span class="token comment"># 按照ID进行降序排列</span>df<span class="token punctuation">.</span>sort_values<span class="token punctuation">(</span>by <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'ID'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ascending <span class="token operator">=</span> <span class="token boolean">False</span><span class="token punctuation">)</span><span class="token comment"># 在保证销售额列降序的情况下，对ID列进行升序处理</span>data<span class="token punctuation">.</span>sort_values<span class="token punctuation">(</span>by <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'销售额'</span><span class="token punctuation">,</span> <span class="token string">'ID'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>ascending <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">]</span><span class="token punctuation">,</span> inplace <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment"># 默认将ID是缺失值的列显示在最后面</span>df<span class="token punctuation">.</span>sort_values<span class="token punctuation">(</span>by <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'ID'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 将ID是缺失值的列显示在最前面</span>df<span class="token punctuation">.</span>sort_values<span class="token punctuation">(</span>by <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'ID'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> na_position <span class="token operator">=</span> <span class="token string">'first'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>对数值进行排名</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 对应Excel中的 rank.avg函数</span>df<span class="token punctuation">[</span><span class="token string">'ID'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>rank<span class="token punctuation">(</span>method<span class="token operator">=</span> <span class="token string">'average'</span><span class="token punctuation">)</span><span class="token comment"># 按值在所有的排列数据中出现的先后顺序排名</span>df<span class="token punctuation">[</span><span class="token string">'ID'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>rank<span class="token punctuation">(</span>method <span class="token operator">=</span> <span class="token string">'first'</span><span class="token punctuation">)</span><span class="token comment">#  与Excel中rank.eq 函数的功能一样</span>df<span class="token punctuation">[</span><span class="token string">'ID'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>rank<span class="token punctuation">(</span>method <span class="token operator">=</span> <span class="token string">'min'</span><span class="token punctuation">)</span><span class="token comment"># 与min相反，取重复值对应的最大排名</span>df<span class="token punctuation">[</span><span class="token string">'ID'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>rank<span class="token punctuation">(</span>method <span class="token operator">=</span> <span class="token string">'max'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>对数据进行分组</li></ol><pre class="line-numbers language-none"><code class="language-none"># 如果price列的值&gt;3000，group列显示high，否则显示lowdf['group'] = np.where(df['客户当天发送消息数'] &gt; 5,'high','low')# 对符合多个条件进行分组# 符合经纪人级别为A1且经纪人响应时长&gt;24的在sign列显示为1df.loc[(df['经纪人级别'] == 'A1') &amp; (df['经纪人响应时长']&gt;= 24.0), 'sign']=1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>对数据进行分列</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'网'</span><span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> df<span class="token punctuation">[</span><span class="token string">'客户注册渠道'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                index<span class="token operator">=</span>df<span class="token punctuation">.</span>index<span class="token punctuation">,</span>columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'客户注册渠道'</span><span class="token punctuation">,</span><span class="token string">'size'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>!<span class="token operator">-</span><span class="token operator">-</span> df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> 首页jhrj_1<span class="token punctuation">[</span><span class="token string">'所属省份编码'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                index<span class="token operator">=</span>df<span class="token punctuation">.</span>index<span class="token punctuation">,</span>columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'客户注册渠道'</span><span class="token punctuation">,</span><span class="token string">'size'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token comment"># 分列完对数据进行合并</span>df1 <span class="token operator">=</span> pd<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>首页jhrj_1<span class="token punctuation">,</span> df<span class="token punctuation">,</span> left_index <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">,</span> right_index <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="5"><li>新增一列</li></ol><pre class="line-numbers language-none"><code class="language-none">data = data.assign(ration = [4, 2, 5, 6, 7, 8, 2, 9, 4])data['rations'] = [5, 2, 5, 6, 7, 8, 2, 9, 4]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="6"><li>对数据进行切分</li></ol><pre class="line-numbers language-none"><code class="language-none"># 指明切分区间pd.cut(df['年龄'], bins = [0,3,6,10])# 将数据切成3份pd.qcut(df['年龄'],3 )<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="7"><li>取出的数据， 指定取到小数点几位数？</li></ol><pre class="line-numbers language-none"><code class="language-none"># 取到小数点后3位for i in a :    print("%.3f"%c)# 设置小数点位数，四舍五入df['cnts'].round( decimals = 2)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="8"><li>将 list 格式转化成 DataFrame 格式</li></ol><pre class="line-numbers language-none"><code class="language-none">df = pd.DataFrame(data, columns = ['省份', '按钮名称', 'uv', 'pv'] )<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="数据选择"><a href="#数据选择" class="headerlink" title="数据选择"></a>数据选择</h2><ol><li>选择某一列/ 某几列</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 普通索引- 根据名称进行选择</span>df<span class="token punctuation">[</span><span class="token string">'客户端uv'</span><span class="token punctuation">]</span>df<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'标题'</span><span class="token punctuation">,</span> <span class="token string">'客户端uv'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token comment"># 位置索引 / 切片索引， 根据所在第几列进行选择</span><span class="token comment"># : 表示选择所有的行， 逗号后面表示要选择列的位置区域</span>df<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token comment"># 获取第1列和第3列的数值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>选择某一行/某几行</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 普通索引-loc</span>df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token string">'第一行'</span><span class="token punctuation">]</span>df<span class="token punctuation">.</span>log<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'第一行'</span><span class="token punctuation">,</span> <span class="token string">'第二行'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token comment"># 位置索引，切片索引</span> <span class="token comment"># 选择第一行</span>df<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token comment"># 选择第一行和第二行</span>df<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>根据指定条件进行筛选</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 选择年龄小于200的数据</span>df<span class="token punctuation">[</span>df<span class="token punctuation">[</span><span class="token string">'年龄'</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">200</span><span class="token punctuation">]</span>  <span class="token comment">#年龄小于200，且id小于300</span>df<span class="token punctuation">[</span><span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token string">'年龄'</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>   <span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">]</span>df<span class="token punctuation">[</span>np<span class="token punctuation">.</span>logical_and<span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token string">'年龄'</span><span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token number">10</span><span class="token punctuation">,</span> df<span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token comment"># A列值大于10，或 B列值大于5</span>df<span class="token punctuation">[</span><span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token string">'C'</span><span class="token punctuation">]</span> <span class="token operator">&gt;</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">]</span>df<span class="token punctuation">[</span>np<span class="token punctuation">.</span>logical_or<span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token number">10</span><span class="token punctuation">,</span> df<span class="token punctuation">[</span><span class="token string">'C'</span><span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token comment"># 当 A列的值大于13时， 显示B，c列的值</span>df<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'B'</span><span class="token punctuation">,</span><span class="token string">'C'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>df<span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token number">13</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>行列同时选择</li></ol><ul><li>普通索引+普通索引选择指定的行和列</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'第一行'</span><span class="token punctuation">,</span> <span class="token string">'第三行'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'订单号’, '</span>ID'<span class="token punctuation">]</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>位置索引 + 位置索引选择指定的行和列</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">df<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span>df<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>布尔索引+ 普通索引</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">df<span class="token punctuation">[</span>df<span class="token punctuation">[</span><span class="token string">'年龄'</span><span class="token punctuation">]</span><span class="token operator">&lt;</span> <span class="token number">200</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'订单编号'</span><span class="token punctuation">,</span> <span class="token string">'ID'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>切片索引+ 普通索引</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">df<span class="token punctuation">.</span>ix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'订单变化'</span><span class="token punctuation">,</span> <span class="token string">'ID'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="5"><li>按条件进行提取</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 用isin函数进行判断</span><span class="token comment"># 使用isin函数根据特定值筛选记录。筛选A值等于10或者13的记录</span>df<span class="token punctuation">[</span>df<span class="token punctuation">.</span>A<span class="token punctuation">.</span>isin<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token comment"># 查看这一列是否包含某个值</span>df<span class="token punctuation">[</span><span class="token string">'级别'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>isin<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'A3'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># 先判断是否包含，然后将符合条件的数据提取出来。</span>df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>df<span class="token punctuation">[</span><span class="token string">'级别'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>isin<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'A3'</span><span class="token punctuation">,</span><span class="token string">'M4'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="数据汇总"><a href="#数据汇总" class="headerlink" title="数据汇总"></a>数据汇总</h2><ol><li>对数据进行分类 - group by函数</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 按照某列分组求和</span>df<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token string">'渠道'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 按照多列分组求和</span>df<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'渠道'</span><span class="token punctuation">,</span> <span class="token string">'ID'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 对分组后的结果进行重新索引</span>df<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token string">'渠道'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reset_index<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li> aggregate方法</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 对同一列 先做计数汇总运算，再做汇总运算</span>df<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token string">'渠道'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>aggregate<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'count'</span><span class="token punctuation">,</span> <span class="token string">'sum'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 针对不同的列做不同的汇总运算</span>df<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token string">'渠道'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>aggregate<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'ID'</span> <span class="token punctuation">:</span> <span class="token string">'count'</span><span class="token punctuation">,</span>                              <span class="token string">'销量'</span> <span class="token punctuation">:</span> <span class="token string">'sum'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>pivot_table-数据透视表</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 为方便处理， 一般需要对结果进行重置索引</span>pd<span class="token punctuation">.</span>pivot_table<span class="token punctuation">(</span>df<span class="token punctuation">,</span> values <span class="token operator">=</span> <span class="token string">'ID'</span><span class="token punctuation">,</span> columns <span class="token operator">=</span> <span class="token string">'渠道'</span><span class="token punctuation">,</span>                index <span class="token operator">=</span> <span class="token string">'客户分类'</span><span class="token punctuation">,</span> aggfun <span class="token operator">=</span> <span class="token string">'count'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reset_index<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p> pd.pivot_table(data, values, index, columns, aggfunc, fill_value, margins, dropna, margins_name = ‘All’)</p><blockquote><p>data: 数据<br>values: 对应的值<br>index: 对应的行<br>columns: 对应的列<br>aggfunc : 对values的计算类型<br>fill_value : 对空值的填充值<br>margins: 是否显示合计列<br>dropna: 是否删除缺失值，如果为真，则一整行全删除<br>margins_name: 合计列的列名</p></blockquote><ol start="4"><li>对数据进行映射</li></ol><pre class="line-numbers language-none"><code class="language-none"># 用map函数对字典进行映射， 新加一列data['upper'] = data['group'].map(dataUpper)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="5"><li>数据采样</li></ol><pre class="line-numbers language-none"><code class="language-none"># 简单随机抽取sampledf.sample(n=3)# 设置采样权重# 需要对每一行进行权重设置，列表行数少可行，过多不可行# 假设有4行数据，设置采样权重weights = [0, 0, 0.5, 0.5]df.sample(n=4, weights=weights)## 确定采样后是否放回# 采样后放回，Truedf.sample(n=6, replace=True)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="6"><li>统计计算</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 计算每一列的个数</span>df<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 计算每一行的个数</span>df<span class="token punctuation">.</span>count<span class="token punctuation">(</span>axis <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token comment"># 求和</span>df<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span>df<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span>axis <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token comment"># 中位数</span>df<span class="token punctuation">.</span>median<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 求和</span>df<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 求最大值</span>df<span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 求最小值</span>df<span class="token punctuation">.</span><span class="token builtin">min</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 求众数</span>df<span class="token punctuation">.</span>mode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 求方差</span>df<span class="token punctuation">.</span>var<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 求标准差</span>df<span class="token punctuation">.</span>std<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 求分位数</span>df<span class="token punctuation">.</span>quantile<span class="token punctuation">(</span><span class="token number">0.75</span><span class="token punctuation">,</span> axis <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token comment"># 描述统计 describe函数</span><span class="token comment">#自动生成数据的数量，均值，标准差等数据</span><span class="token comment">#round（2）,显示小数点后面2位数，T转置</span>df<span class="token punctuation">.</span>describe<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">round</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span>T<span class="token comment"># 标准差std()</span>df<span class="token punctuation">[</span><span class="token string">'经纪人响应时长'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>std<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 协方差cov</span>df<span class="token punctuation">[</span><span class="token string">'经纪人当天发送消息数'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cov<span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token string">'客户当天发送消息数'</span><span class="token punctuation">]</span><span class="token comment"># 相关性分析corr</span>df<span class="token punctuation">[</span><span class="token string">'客户当天发送消息数'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>corr<span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token string">'经纪人当天发送消息数'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="7"><li>数值计数</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 查看不同值出现的次数， #默认进行排列</span>df<span class="token punctuation">[</span><span class="token string">'ID'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value_counts<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 查看不同值出现的占比, #默认进行排列</span>df<span class="token punctuation">[</span><span class="token string">'ID'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value_counts<span class="token punctuation">(</span>normalize <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment"># 查看不同值出现的占比， 不进行排列</span>df<span class="token punctuation">[</span><span class="token string">'ID'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value_counts<span class="token punctuation">(</span>normalize <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">,</span> sort <span class="token operator">=</span> <span class="token boolean">False</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="8"><li>插入数据</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 在 insert方法中，指明要插入的位置、插入新列的列名，以及要插入的数据</span>df<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'销售品id'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'01'</span><span class="token punctuation">,</span> <span class="token string">'02'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="9"><li>对数据进行转置</li></ol><pre class="line-numbers language-none"><code class="language-none">df.T<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="10"><li>索引重塑</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 将表格型数据转化成树形数据</span>df<span class="token punctuation">.</span>stack<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 将树形数据转化成表格型数据</span>df<span class="token punctuation">.</span>stack<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>unstack<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2019/12/22/8dJwIqrSRTLYvnK.jpg" alt="索引重塑"></p><ol start="11"><li>长宽表转换</li></ol><ul><li>宽表<br><img src="https://i.loli.net/2019/12/22/plz94hj3vIuHA2B.jpg" alt="宽表"></li><li>长表<br><img src="https://i.loli.net/2019/12/22/6XKpcg2RMoTaPmW.jpg" alt="长表"></li></ul><ul><li>将长表转化成宽表,对数据进行透视, 相当于Excel中的数据透视表功能。</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">df<span class="token punctuation">.</span>pivot_table<span class="token punctuation">(</span>index <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'computer'</span><span class="token punctuation">,</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> columns <span class="token operator">=</span> <span class="token string">'year'</span><span class="token punctuation">,</span> values <span class="token operator">=</span> <span class="token string">'sale'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>将宽表转换成长表</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 方法1： melt()</span>df<span class="token punctuation">.</span>melt<span class="token punctuation">(</span>id_vars <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'company'</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> var_name <span class="token operator">=</span> <span class="token string">'year'</span><span class="token punctuation">,</span> value_name <span class="token operator">=</span> <span class="token string">'sale'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 方法1： stack()</span><span class="token comment"># 在保持行索引不变的前提下，将列索引转化成行索引 </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2019/12/22/4pKoUMivFNIqzXu.jpg" alt="宽表转换成长表"></p><hr><h2 id="对字符串进行操作"><a href="#对字符串进行操作" class="headerlink" title="对字符串进行操作"></a>对字符串进行操作</h2><ol><li> 大小写</li></ol><pre class="line-numbers language-none"><code class="language-none">a.lower()a.upper()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="2"><li>长度</li></ol><pre class="line-numbers language-none"><code class="language-none"># 长度a.len()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="3"><li> 去除空格</li></ol><pre class="line-numbers language-none"><code class="language-none">a.strip()a.lstrip()alrstrip()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="5"><li>切分与分列、 合并</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#切分</span>a<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'_'</span><span class="token punctuation">)</span><span class="token comment"># 切分， 且成为新列</span>a<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'_'</span><span class="token punctuation">,</span> expand <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment"># 对切分进行限制, 只切1次</span>a<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'_'</span><span class="token punctuation">,</span> expand <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">,</span> n<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment"># 查看是否包含</span>a<span class="token punctuation">.</span><span class="token builtin">str</span><span class="token punctuation">.</span>contains<span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">)</span><span class="token comment"># 分列</span>s<span class="token punctuation">.</span><span class="token builtin">str</span><span class="token punctuation">.</span>get_dummies<span class="token punctuation">(</span>sep<span class="token operator">=</span> <span class="token string">'|'</span><span class="token punctuation">)</span>df <span class="token operator">=</span> 首页jhrj_1<span class="token punctuation">[</span><span class="token string">'所属省份编码'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">str</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span>  <span class="token comment"># expand=True  可以把用分割的内容直接分列</span>首页jhrj_1<span class="token punctuation">[</span><span class="token string">"所属省份编码1"</span><span class="token punctuation">]</span><span class="token operator">=</span>df<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token comment"># 切分并在原表中进行合并</span>首页jhrj_2 <span class="token operator">=</span> pd<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>首页jhrj_1<span class="token punctuation">,</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>首页jhrj_1<span class="token punctuation">[</span><span class="token string">'所属省份编码'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">str</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">,</span> expand <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>               how <span class="token operator">=</span> <span class="token string">'left'</span><span class="token punctuation">,</span> left_index <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">,</span> right_index <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment"># pandas对dataframe中的某一列使用split做字符串切割：</span><span class="token comment"># words = df['col'].split()</span><span class="token comment"># 报错：</span><span class="token comment"># AttributeError: 'Series' object has no attribute 'split'</span><span class="token comment"># 原因是df['col']返回的是一个Series对象，需要先把Series对象转换为字符串：pandas.Series.str.split</span><span class="token comment"># words = df['col'].str.split()</span>对两列数据进行合并df<span class="token punctuation">[</span><span class="token string">'省份_名称'</span><span class="token punctuation">]</span> <span class="token operator">=</span> df<span class="token punctuation">[</span><span class="token string">'省份'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">str</span><span class="token punctuation">.</span>cat<span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token string">'名称'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>sep <span class="token operator">=</span> <span class="token string">'_'</span><span class="token punctuation">)</span>首页jdt_1<span class="token punctuation">[</span><span class="token string">'省份_标题'</span><span class="token punctuation">]</span> <span class="token operator">=</span> 首页jdt_1<span class="token punctuation">[</span><span class="token string">'所属省份编码'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">str</span><span class="token punctuation">.</span>cat<span class="token punctuation">(</span>首页jdt_1<span class="token punctuation">[</span><span class="token string">'标题'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>sep <span class="token operator">=</span> <span class="token string">'_'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="日期-时间"><a href="#日期-时间" class="headerlink" title="日期-时间"></a>日期-时间</h2><ul><li> 当前日期</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> time<span class="token keyword">from</span> datetime <span class="token keyword">import</span> datetime<span class="token punctuation">,</span> time<span class="token punctuation">,</span> timedelta<span class="token comment"># 返回当前日期和时间</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 返回当前时间的年</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>year<span class="token comment"># 返回当前时间的月份</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>month<span class="token comment"># 返回当前日期的日期</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>day<span class="token comment"># 返回当前时刻在周几</span><span class="token comment"># python周几默认是从0开始的</span>datatime<span class="token punctuation">.</span>now<span class="token punctuation">.</span>weekeday<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token comment"># 返回当前时间所在周的周数</span>datatime<span class="token punctuation">.</span>now<span class="token punctuation">.</span>isocalendar<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>返回指定日期</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 只展现日期</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">.</span>date<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 只展示时间</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 显示当前日期</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">'%Y-%m-%d'</span><span class="token punctuation">)</span><span class="token comment">#2018-12-22</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span>'<span class="token operator">%</span>Y<span class="token operator">-</span><span class="token operator">%</span>m<span class="token operator">-</span><span class="token operator">%</span>d <span class="token operator">%</span>H<span class="token punctuation">:</span><span class="token operator">%</span>M<span class="token punctuation">:</span><span class="token operator">%</span>S"<span class="token punctuation">)</span><span class="token comment"># 将时间格式转化成字符串格式</span>now<span class="token operator">=</span><span class="token builtin">str</span><span class="token punctuation">(</span> datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 将字符串格式转化为时间格式</span>parse<span class="token punctuation">(</span>str_now<span class="token punctuation">)</span> <span class="token comment"># 往后推一天</span>date<span class="token operator">+</span> Day<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment"># 往后推一个小时</span>date <span class="token operator">+</span> Hour<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment"># 往前推一天</span>date <span class="token operator">-</span> Day<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment"># 昨天</span>ysd <span class="token operator">=</span> now <span class="token operator">-</span> timedelta<span class="token punctuation">(</span>days <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">#本月第一天</span>ysd <span class="token operator">=</span> now<span class="token punctuation">.</span>replace<span class="token punctuation">(</span>day <span class="token operator">=</span> now<span class="token punctuation">.</span>day<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">#  上月最后一天</span>lastmonth_end <span class="token operator">=</span> now<span class="token punctuation">.</span>replace<span class="token punctuation">(</span>day <span class="token operator">=</span> now<span class="token punctuation">.</span>day<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">-</span> timedelta<span class="token punctuation">(</span>days<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment"># 上月第一天</span>lastmonth_first <span class="token operator">=</span> now<span class="token punctuation">.</span>replace<span class="token punctuation">(</span>month <span class="token operator">=</span> now<span class="token punctuation">.</span>month<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> day <span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>lastmonth_first <span class="token operator">=</span> lastmonth_end<span class="token punctuation">.</span>replace<span class="token punctuation">(</span>day<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">#提取2016年11月2号的数据</span>df<span class="token punctuation">[</span><span class="token string">'2016-11-02'</span> <span class="token punctuation">:</span> <span class="token string">'2016-11-02'</span><span class="token punctuation">]</span>dt_time <span class="token operator">=</span> dt<span class="token punctuation">.</span>datetime<span class="token punctuation">(</span>year <span class="token operator">=</span> <span class="token number">2018</span><span class="token punctuation">,</span> month<span class="token operator">=</span><span class="token number">9</span><span class="token punctuation">,</span> day <span class="token operator">=</span> <span class="token number">17</span><span class="token punctuation">,</span> hour <span class="token operator">=</span> <span class="token number">22</span><span class="token punctuation">,</span> minute <span class="token operator">=</span> <span class="token number">43</span><span class="token punctuation">)</span><span class="token comment"># 构造时间序列， 构造十个日期， 每12分钟一次</span>pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span>pd<span class="token punctuation">.</span>date_range<span class="token punctuation">(</span>start <span class="token operator">=</span> <span class="token string">'2018-09-17 22:43:00'</span><span class="token punctuation">,</span> periods <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span> freq <span class="token operator">=</span> <span class="token string">'12min'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 取所有8点到12点之间的数据, 不包含8点和12点</span>data<span class="token punctuation">[</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>index<span class="token punctuation">.</span>hour <span class="token operator">&gt;</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span>index<span class="token punctuation">.</span>hour <span class="token operator">&lt;</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token comment"># 包含8点到12点</span>data<span class="token punctuation">.</span>between_time<span class="token punctuation">(</span><span class="token string">'08:00'</span><span class="token punctuation">,</span> <span class="token string">'12:00'</span><span class="token punctuation">)</span><span class="token keyword">import</span> datetime<span class="token keyword">from</span> dateutil<span class="token punctuation">.</span>relativedelta <span class="token keyword">import</span> relativedelta  begin <span class="token operator">=</span> datetime<span class="token punctuation">.</span>date<span class="token punctuation">(</span><span class="token number">2019</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>end <span class="token operator">=</span> datetime<span class="token punctuation">.</span>date<span class="token punctuation">(</span><span class="token number">2019</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    first <span class="token operator">=</span> d <span class="token operator">+</span> relativedelta<span class="token punctuation">(</span>months<span class="token operator">=</span>i<span class="token punctuation">)</span>    last <span class="token operator">=</span> end <span class="token operator">+</span> relativedelta<span class="token punctuation">(</span>months<span class="token operator">=</span>i<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>处理月与月之间时间不连续问题</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> time <span class="token keyword">from</span> datetime <span class="token keyword">import</span> datetime<span class="token punctuation">,</span> time<span class="token punctuation">,</span>timedelta<span class="token comment"># 指定昨天</span>df <span class="token operator">=</span> datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> timedelta<span class="token punctuation">(</span>days <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token comment"># 月初第一天</span>startdates <span class="token operator">=</span> <span class="token punctuation">(</span>df<span class="token punctuation">.</span>replace<span class="token punctuation">(</span>day <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">'%Y-%m-%d'</span><span class="token punctuation">)</span><span class="token comment"># 昨天</span>enddates <span class="token operator">=</span> <span class="token punctuation">(</span>df <span class="token operator">-</span> timedelta<span class="token punctuation">(</span>days <span class="token operator">=</span> num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">'%Y-%m-%d'</span><span class="token punctuation">)</span><span class="token comment"># 上月第一天</span>last_moth_f <span class="token operator">=</span> df<span class="token punctuation">.</span>replace<span class="token punctuation">(</span>month <span class="token operator">=</span>df<span class="token punctuation">.</span>month<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> day<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__format__<span class="token punctuation">(</span><span class="token string">"%Y-%m-%d"</span><span class="token punctuation">)</span><span class="token comment"># 上月最后一天</span>last_moth_e <span class="token operator">=</span> df<span class="token punctuation">.</span>replace<span class="token punctuation">(</span>month <span class="token operator">=</span> df<span class="token punctuation">.</span>month<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> day <span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">'%Y-%m-31'</span><span class="token punctuation">)</span><span class="token comment"># 目标值月份</span>mubiao_dates <span class="token operator">=</span> startdates<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token comment"># 将字符串转换为日期</span>df <span class="token operator">=</span> datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> timedelta<span class="token punctuation">(</span>days <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span>day1 <span class="token operator">=</span> <span class="token punctuation">(</span>df<span class="token punctuation">.</span>replace<span class="token punctuation">(</span>day <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">'2019-11-%d'</span><span class="token punctuation">)</span>first <span class="token operator">=</span> datetime<span class="token punctuation">.</span>strptime<span class="token punctuation">(</span>day1<span class="token punctuation">,</span> <span class="token string">"%Y-%m-%d"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="自动发送邮件"><a href="#自动发送邮件" class="headerlink" title="自动发送邮件"></a>自动发送邮件</h1><pre class="line-numbers language-none"><code class="language-none">import smtplibfrom email import encoders<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2019/12/23/uqFn819yGEjWRPQ.jpg" alt="123.jpg"><br><img src="https://i.loli.net/2019/12/23/Druqb2zyHi6ESQV.jpg" alt="456.jpg"> </p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>双拼输入法</title>
      <link href="/2017/09/17/2020-02-22-%E7%94%9F%E6%B4%BB-%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93-%E5%8F%8C%E6%8B%BC%E8%BE%93%E5%85%A5%E6%B3%95-4/"/>
      <url>/2017/09/17/2020-02-22-%E7%94%9F%E6%B4%BB-%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93-%E5%8F%8C%E6%8B%BC%E8%BE%93%E5%85%A5%E6%B3%95-4/</url>
      
        <content type="html"><![CDATA[<h1 id="1-怎么接触到双拼的？"><a href="#1-怎么接触到双拼的？" class="headerlink" title="1. 怎么接触到双拼的？"></a>1. 怎么接触到双拼的？</h1><p>自己第一次接触双拼，是看到李笑来老师的《把时间当朋友》第二章中的“盲打究竟是否值得学会”,里面提到了盲打与双拼帮助他快速进行记录笔记和文字。 于是自己就试着在网上找双拼的学习方法。</p><h1 id="2-什么是双拼？"><a href="#2-什么是双拼？" class="headerlink" title="2. 什么是双拼？"></a>2. 什么是双拼？</h1><blockquote><p>维基百科：双拼是汉语拼音输入法的一种编码方案。相对于全拼而言，使用双拼输入汉字时只需输入一个代表声母的字母，一个代表韵母的字母，就可以打出任意一个中文单字了。</p></blockquote><p>理解起来也很简单，比如你要拼写 <code>张</code> <code>红</code> 这两个字， 用全拼的话可能你得输入 <code>zhang</code> <code> hong</code>， 而用小鹤双拼的话， 你只需要输入<code>vh</code> <code>hs</code> 就可以显示。 <code>v</code> 代表<code>zh</code> , <code>h</code> 代表<code>ang</code> , <code>s</code>代表<code>ong</code></p><p>双拼的语法也有很多种，比如小鹤双拼、自然码双拼、紫光拼音双拼、<br>搜狗拼音双拼、微软拼音双拼、智能ABC双拼。 每种双拼对应的语法也都不一样。</p><p>自己学习的是小鹤双拼，语法图是这样的：<br><img src="http://static.zybuluo.com/zhangyu756897669/ge8055q1u83xn00n84korx3y/%E5%B0%8F%E9%B9%A4%E5%8F%8C%E6%8B%BC.png" alt="小鹤双拼.png-156kB"></p><p>在搜狗输入法上点击 <code>设置</code>—— <code>属性设置</code> —— <code>常用</code> —— <code>特殊习惯</code>—— <code>双拼</code>  就可以使用了。 </p><h1 id="3-学习的过程"><a href="#3-学习的过程" class="headerlink" title="3. 学习的过程"></a>3. 学习的过程</h1><p>刚开始学习小鹤双拼的时候， 自己是完全不习惯的， 因为想要使用小鹤双拼进行文字输入，就得记住每个字母对应的韵母， 自己每输入一个字， 就得想一下这个字的韵母是什么， 对应到按键上的那个字母又是什么。 再去输入，说实话当时输入字的效率低下到令人发指，而且往往记不住，自己只好打印了一张语法表贴在自己的电脑旁， 忘了就在表上找。 好几次忍不住偷偷换成了全拼， 特别是在工作着急的情况下。 </p><p>就这样别别扭扭用了一周之后， 才发现自己已经能够慢慢不看语法表了。 （这让我都有点怀疑自己的智商，因为网上说基本一周就可以很熟练了）<br>一个月过后自己才做到了输入基本不卡壳，但如果旁边有人一紧张还是会忘掉如何输入了。 现在用了一年多， 自己已经能够无意识的使用双拼了。 如果你现在问我键盘上的字母在双拼中代表哪个韵母，自己可能真的答不上来，但只要自己在键盘上打字，自己就能够无意识的打出来。 </p><h1 id="4-学习双拼的优点与缺点"><a href="#4-学习双拼的优点与缺点" class="headerlink" title="4. 学习双拼的优点与缺点"></a>4. 学习双拼的优点与缺点</h1><p>( 1 ). 优点</p><ul><li><p>简洁，同样一个词全拼要五六下，双拼只需要两下</p></li><li><p>感觉节省了时间，更喜欢在键盘上敲字了。 （至于是否真正节省了时间，自己没有做过对比）</p></li></ul><p>( 2 ). 缺点</p><ul><li>全拼不会用了， 有时在别人的电脑上输入文字总是很别扭，老出错，总想着把输入法改成双拼</li><li>有时大脑短路会想不起来双拼的语法</li></ul><h1 id="5-感悟"><a href="#5-感悟" class="headerlink" title="5. 感悟"></a>5. 感悟</h1><ul><li><p>任何学习都是不可逆的，当你学了到了一项技能，你就不可能再像从前没学过一样生活。 </p></li><li><p>最可怕的不是自己知道自己不知道，而是不知道自己不知道。 </p><blockquote><p>比如自己学习双拼，自己以前根本不知道还有双拼这么一种输入法，就更不会产生要学习这种输入法的冲动。</p><p><strong>如何解决自己不知道自己不知道的知识</strong>，自己目前能够想到的方法是：多读书，多关注大牛，多了解别人是怎么工作、生活。</p></blockquote></li><li><p>有些东西只有自己亲身经历过后才能有所体会，哪怕是坏的体验。</p><blockquote><p>如果只是看别人推荐而不去坚持使用双拼， 我就不能体会到大脑下意识使用双拼输入的快感。当然，也许会出现这种情况， 你付出了时间，付出了精力，而这项技能对你的生活影响并不大。这就需要你前期做一些搜索调查。</p></blockquote><p>延伸到生活上，要是我不来北京生活，不来北京工作，我就没有机会知道来北京到底会面临什么困难，到底对自己的职业发展是否有益。也许最后自己会失败，可那又怎么样，自己的人生自己做主。</p><blockquote><p>2020年2月26：现在在北京已经呆了马上快3年了，自己虽然已经转行做数据分析了，但是现在自己的职业发展并不好，甚至犹豫自己是否还应呆在北京。</p></blockquote></li><li><p>学会一项技能，不是只是了解它，而是能够在生活中无意识的使用它</p><blockquote><p> 一项技能，只是了解是远远不够的， 你要去不断的磨练，打磨，直到它成为你大脑的一部分。 学会的标准就是：你能否不需要专门思考就能够调用它。 </p></blockquote></li><li><p>要学习那些你通过短时间学会,就能够一辈子用的上的知识。</p><h1 id="6-延伸"><a href="#6-延伸" class="headerlink" title="6. 延伸"></a>6. 延伸</h1><blockquote><ul><li><p>总是听很多的牛人说，写作是非常重要的一项技能，对一个人清晰思考问题是非常有帮助的，然而自己却迟迟没有行动，主要还是觉得自己语言词汇匮乏， 缺乏独立思考，怕自己语无伦次。</p></li><li><p>其实又想想，写作这东西这就和自己刚开始学习双拼时一样，开始你觉得自己没有可能学会，也许过一段时间你就能够发现自己的进步， 你不去坚持写又怎么能够证明自己一定学不会呢？</p></li><li><p>自己认为学习是一个自我验证的过程：你认为自己不可能学会，你就不会坚持去学；你不坚持去学，你就不会有进步， 从而你就不会看到到自己能够学会的结果，也就证明了自己确实学不会。<strong>相反</strong>， 你认为自己能学会，你就坚持去学，看到自己的进步，最终的确学会了，也证明了自己确实能够学会。</p></li></ul></blockquote></li></ul><h1 id="7-未解决问题"><a href="#7-未解决问题" class="headerlink" title="7. 未解决问题"></a>7. 未解决问题</h1><ul><li>如何运用心智的力量在还没有机会亲身体验的情况下，仅凭心智就可以像真实经历过一样深刻体会？</li><li>如何解决 害怕自己付出了时间，付出了精力，而没有一个好的结果</li></ul><hr><p>参考资料： <a href="https://book.douban.com/subject/3609132/">《把时间当朋友》</a></p>]]></content>
      
      
      <categories>
          
          <category> 技能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 双拼 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>给自己培育一个“环境场”</title>
      <link href="/2017/09/17/2020-03-22-%E7%94%9F%E6%B4%BB-%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93-%E5%88%A9%E7%94%A8%E7%8E%AF%E5%A2%83%E6%9D%A5%E8%BE%85%E5%8A%A9%E8%87%AA%E5%B7%B1%E7%9A%84%E8%BF%9B%E6%AD%A5-5/"/>
      <url>/2017/09/17/2020-03-22-%E7%94%9F%E6%B4%BB-%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93-%E5%88%A9%E7%94%A8%E7%8E%AF%E5%A2%83%E6%9D%A5%E8%BE%85%E5%8A%A9%E8%87%AA%E5%B7%B1%E7%9A%84%E8%BF%9B%E6%AD%A5-5/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是环境场"><a href="#什么是环境场" class="headerlink" title="什么是环境场"></a>什么是环境场</h1><p>它是你在一个空间里做事的习惯，习惯会形成稳定的心理预期，进而又会巩固习惯的行为，你在这个场里做的事情越纯粹、越持久，这个环境场的力量就越大</p><h1 id="实际应用"><a href="#实际应用" class="headerlink" title="实际应用"></a>实际应用</h1><p>自己下班或者周末在房间，总是把大量的时间用来刷微博或者刷剧。虽然一直刷一直爽，但自己总是有一种虚度时间的空虚感，如何改变自己下班和周末的状态，成了自己最近在思考的问题。 </p><p>最近在学习陈海贤的《自我发展心理学》，刚好说到了自己的这种现象，并给出了一种利用环境来促使改变的方法，对自己启发很大，今天就来介绍一下这种方法。</p><p>首先是融入到积极的环境中去。要想学习就去图书馆、自习室，要想锻炼就去体育场、健身房。我们心中其实都有一个关于“特定空间”的假设，在假设中，对于公司、图书馆这样的空间就是用来工作学习，对于自己寝室的假设肯定是用来休息娱乐的。如果你要让自己在宿舍这样的空间中好好学习工作，就得付出比在图书馆多几倍的努力才行，还不一定能学进去。所以，周末能去图书馆上自习就绝不在家办公， 让自己融入到特定的环境中去。</p><p>当然，如果要学习就要去图书馆，那也不现实。如何在自己的房间中也能被环境所带动呢，文中介绍了第二种方法，那就是在某个特定的环境中只做一件事情。</p><p>比如：你可以要求自己在这张书桌上只作跟工作学习有关的事情， 如果想刷微博，看电视，那就换个地方，可以坐沙发上。</p><p>背后其实也是利用了我们心中对“特定空间”的假设，如果你在这个书桌上进行娱乐活动，那么这个书桌作为你心中假设的环境就会破坏掉。平常在一个特定的空间里只做这一件事情， 慢慢这个习惯会形成稳定的心理预期，会给自己一种强烈的心理暗示，从而帮助自己进行改变。</p><p>这促使了我对之前行为的理解，当自己上完班回家之后，本身意志力就消磨的七七八八了，再要用所剩无几的意志力抵抗娱乐去学习，自己的大脑肯定不干。周末在房子里大脑肯定也是怎么舒服怎么来。</p><p>我自己针对性的采取了以下几种方法：</p><ol><li>最近下班回家之后，先休息一个小时左右，恢复一下意志力，再起来学习工作，感觉效率到提升了不少。</li><li>指定特定的桌子只用来办公和学习， 如果自己想刷微博或者刷剧， 不要在这张桌子上进行。 （还在努力实践中）</li><li>周末能去图书馆就尽量不要在房子呆着。</li></ol><h1 id="成果"><a href="#成果" class="headerlink" title="成果"></a>成果</h1><p>2021年，自己终于养成了一个环境场，在书房里自己就会很自然的去学习</p>]]></content>
      
      
      <categories>
          
          <category> 心理学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 心理学 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
